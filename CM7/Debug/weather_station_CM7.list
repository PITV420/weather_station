
weather_station_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4e0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800a780  0800a780  0001a780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a8ac  0800a8ac  0001a8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a8b4  0800a8b4  0001a8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a8b8  0800a8b8  0001a8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800a8bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006fc  20000074  0800a930  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000770  0800a930  00020770  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038270  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000515f  00000000  00000000  00058312  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001ca0  00000000  00000000  0005d478  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001a98  00000000  00000000  0005f118  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004071a  00000000  00000000  00060bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001cd2e  00000000  00000000  000a12ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0019d8dc  00000000  00000000  000bdff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0025b8d4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000082fc  00000000  00000000  0025b950  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a768 	.word	0x0800a768

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	0800a768 	.word	0x0800a768

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <SystemInit+0x104>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a3e      	ldr	r2, [pc, #248]	; (8000784 <SystemInit+0x104>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <SystemInit+0x104>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <SystemInit+0x104>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <SystemInit+0x108>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <SystemInit+0x108>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <SystemInit+0x10c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x10c>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <SystemInit+0x10c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <SystemInit+0x10c>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492e      	ldr	r1, [pc, #184]	; (800078c <SystemInit+0x10c>)
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x110>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemInit+0x108>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	d907      	bls.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemInit+0x108>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemInit+0x108>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemInit+0x10c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemInit+0x10c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemInit+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemInit+0x10c>)
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <SystemInit+0x114>)
 800070c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemInit+0x10c>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemInit+0x118>)
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <SystemInit+0x10c>)
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemInit+0x11c>)
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <SystemInit+0x10c>)
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <SystemInit+0x11c>)
 8000724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <SystemInit+0x10c>)
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <SystemInit+0x11c>)
 8000730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <SystemInit+0x10c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <SystemInit+0x10c>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <SystemInit+0x10c>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x120>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <SystemInit+0x120>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x124>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SystemInit+0x128>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x12c>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x130>)
 800076c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000770:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x104>)
 8000774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000778:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	52002000 	.word	0x52002000
 800078c:	58024400 	.word	0x58024400
 8000790:	eaf6ed7f 	.word	0xeaf6ed7f
 8000794:	02020200 	.word	0x02020200
 8000798:	01ff0000 	.word	0x01ff0000
 800079c:	01010280 	.word	0x01010280
 80007a0:	580000c0 	.word	0x580000c0
 80007a4:	5c001000 	.word	0x5c001000
 80007a8:	ffff0000 	.word	0xffff0000
 80007ac:	51008108 	.word	0x51008108
 80007b0:	52004000 	.word	0x52004000

080007b4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007c6:	463b      	mov	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
 80007d4:	615a      	str	r2, [r3, #20]
 80007d6:	619a      	str	r2, [r3, #24]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d8:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <MX_ADC1_Init+0xe4>)
 80007da:	4a30      	ldr	r2, [pc, #192]	; (800089c <MX_ADC1_Init+0xe8>)
 80007dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007de:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <MX_ADC1_Init+0xe4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007e4:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <MX_ADC1_Init+0xe4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <MX_ADC1_Init+0xe4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f0:	4b29      	ldr	r3, [pc, #164]	; (8000898 <MX_ADC1_Init+0xe4>)
 80007f2:	2204      	movs	r2, #4
 80007f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f6:	4b28      	ldr	r3, [pc, #160]	; (8000898 <MX_ADC1_Init+0xe4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007fc:	4b26      	ldr	r3, [pc, #152]	; (8000898 <MX_ADC1_Init+0xe4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000802:	4b25      	ldr	r3, [pc, #148]	; (8000898 <MX_ADC1_Init+0xe4>)
 8000804:	2201      	movs	r2, #1
 8000806:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000808:	4b23      	ldr	r3, [pc, #140]	; (8000898 <MX_ADC1_Init+0xe4>)
 800080a:	2200      	movs	r2, #0
 800080c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080e:	4b22      	ldr	r3, [pc, #136]	; (8000898 <MX_ADC1_Init+0xe4>)
 8000810:	2200      	movs	r2, #0
 8000812:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000814:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MX_ADC1_Init+0xe4>)
 8000816:	2200      	movs	r2, #0
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <MX_ADC1_Init+0xe4>)
 800081c:	2200      	movs	r2, #0
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_ADC1_Init+0xe4>)
 8000822:	2200      	movs	r2, #0
 8000824:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_ADC1_Init+0xe4>)
 8000828:	2200      	movs	r2, #0
 800082a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800082c:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_ADC1_Init+0xe4>)
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000834:	4818      	ldr	r0, [pc, #96]	; (8000898 <MX_ADC1_Init+0xe4>)
 8000836:	f001 fe9d 	bl	8002574 <HAL_ADC_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000840:	f000 fc4a 	bl	80010d8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	4812      	ldr	r0, [pc, #72]	; (8000898 <MX_ADC1_Init+0xe4>)
 8000850:	f002 feaa 	bl	80035a8 <HAL_ADCEx_MultiModeConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800085a:	f000 fc3d 	bl	80010d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <MX_ADC1_Init+0xec>)
 8000860:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000862:	2306      	movs	r3, #6
 8000864:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8000866:	2302      	movs	r3, #2
 8000868:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800086a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800086e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000870:	2304      	movs	r3, #4
 8000872:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_ADC1_Init+0xe4>)
 8000882:	f002 f9db 	bl	8002c3c <HAL_ADC_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800088c:	f000 fc24 	bl	80010d8 <Error_Handler>
  }

}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2000009c 	.word	0x2000009c
 800089c:	40022000 	.word	0x40022000
 80008a0:	3ac04000 	.word	0x3ac04000

080008a4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
 80008b8:	615a      	str	r2, [r3, #20]
 80008ba:	619a      	str	r2, [r3, #24]

  /** Common config
  */
  hadc3.Instance = ADC3;
 80008bc:	4b29      	ldr	r3, [pc, #164]	; (8000964 <MX_ADC3_Init+0xc0>)
 80008be:	4a2a      	ldr	r2, [pc, #168]	; (8000968 <MX_ADC3_Init+0xc4>)
 80008c0:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008c2:	4b28      	ldr	r3, [pc, #160]	; (8000964 <MX_ADC3_Init+0xc0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80008c8:	4b26      	ldr	r3, [pc, #152]	; (8000964 <MX_ADC3_Init+0xc0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ce:	4b25      	ldr	r3, [pc, #148]	; (8000964 <MX_ADC3_Init+0xc0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <MX_ADC3_Init+0xc0>)
 80008d6:	2204      	movs	r2, #4
 80008d8:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80008da:	4b22      	ldr	r3, [pc, #136]	; (8000964 <MX_ADC3_Init+0xc0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008e0:	4b20      	ldr	r3, [pc, #128]	; (8000964 <MX_ADC3_Init+0xc0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_ADC3_Init+0xc0>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_ADC3_Init+0xc0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_ADC3_Init+0xc0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_ADC3_Init+0xc0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_ADC3_Init+0xc0>)
 8000900:	2200      	movs	r2, #0
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_ADC3_Init+0xc0>)
 8000906:	2200      	movs	r2, #0
 8000908:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_ADC3_Init+0xc0>)
 800090c:	2200      	movs	r2, #0
 800090e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_ADC3_Init+0xc0>)
 8000912:	2200      	movs	r2, #0
 8000914:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000918:	4812      	ldr	r0, [pc, #72]	; (8000964 <MX_ADC3_Init+0xc0>)
 800091a:	f001 fe2b 	bl	8002574 <HAL_ADC_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000924:	f000 fbd8 	bl	80010d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_ADC3_Init+0xc8>)
 800092a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800092c:	2306      	movs	r3, #6
 800092e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8000930:	2302      	movs	r3, #2
 8000932:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000934:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000938:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800093a:	2304      	movs	r3, #4
 800093c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <MX_ADC3_Init+0xc0>)
 800094c:	f002 f976 	bl	8002c3c <HAL_ADC_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000956:	f000 fbbf 	bl	80010d8 <Error_Handler>
  }

}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000100 	.word	0x20000100
 8000968:	58026000 	.word	0x58026000
 800096c:	21800100 	.word	0x21800100

08000970 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a30      	ldr	r2, [pc, #192]	; (8000a50 <HAL_ADC_MspInit+0xe0>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d12a      	bne.n	80009e8 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000992:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <HAL_ADC_MspInit+0xe4>)
 8000994:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000998:	4a2e      	ldr	r2, [pc, #184]	; (8000a54 <HAL_ADC_MspInit+0xe4>)
 800099a:	f043 0320 	orr.w	r3, r3, #32
 800099e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80009a2:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <HAL_ADC_MspInit+0xe4>)
 80009a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009a8:	f003 0320 	and.w	r3, r3, #32
 80009ac:	61bb      	str	r3, [r7, #24]
 80009ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <HAL_ADC_MspInit+0xe4>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	4a27      	ldr	r2, [pc, #156]	; (8000a54 <HAL_ADC_MspInit+0xe4>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c0:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <HAL_ADC_MspInit+0xe4>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = BAT_ADC_Pin;
 80009ce:	2304      	movs	r3, #4
 80009d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d2:	2303      	movs	r3, #3
 80009d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_ADC_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	481d      	ldr	r0, [pc, #116]	; (8000a58 <HAL_ADC_MspInit+0xe8>)
 80009e2:	f002 ff9f 	bl	8003924 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80009e6:	e02e      	b.n	8000a46 <HAL_ADC_MspInit+0xd6>
  else if(adcHandle->Instance==ADC3)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <HAL_ADC_MspInit+0xec>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d129      	bne.n	8000a46 <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <HAL_ADC_MspInit+0xe4>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f8:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <HAL_ADC_MspInit+0xe4>)
 80009fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_ADC_MspInit+0xe4>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <HAL_ADC_MspInit+0xe4>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a16:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <HAL_ADC_MspInit+0xe4>)
 8000a18:	f043 0320 	orr.w	r3, r3, #32
 8000a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <HAL_ADC_MspInit+0xe4>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a26:	f003 0320 	and.w	r3, r3, #32
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIGHT_ADC_Pin;
 8000a2e:	2340      	movs	r3, #64	; 0x40
 8000a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a32:	2303      	movs	r3, #3
 8000a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LIGHT_ADC_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4807      	ldr	r0, [pc, #28]	; (8000a60 <HAL_ADC_MspInit+0xf0>)
 8000a42:	f002 ff6f 	bl	8003924 <HAL_GPIO_Init>
}
 8000a46:	bf00      	nop
 8000a48:	3730      	adds	r7, #48	; 0x30
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40022000 	.word	0x40022000
 8000a54:	58024400 	.word	0x58024400
 8000a58:	58020000 	.word	0x58020000
 8000a5c:	58026000 	.word	0x58026000
 8000a60:	58021400 	.word	0x58021400

08000a64 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08e      	sub	sp, #56	; 0x38
 8000a68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	4b84      	ldr	r3, [pc, #528]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a80:	4a82      	ldr	r2, [pc, #520]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8a:	4b80      	ldr	r3, [pc, #512]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	623b      	str	r3, [r7, #32]
 8000a96:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a98:	4b7c      	ldr	r3, [pc, #496]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9e:	4a7b      	ldr	r2, [pc, #492]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000aa0:	f043 0320 	orr.w	r3, r3, #32
 8000aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa8:	4b78      	ldr	r3, [pc, #480]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aae:	f003 0320 	and.w	r3, r3, #32
 8000ab2:	61fb      	str	r3, [r7, #28]
 8000ab4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab6:	4b75      	ldr	r3, [pc, #468]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abc:	4a73      	ldr	r2, [pc, #460]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac6:	4b71      	ldr	r3, [pc, #452]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b6d      	ldr	r3, [pc, #436]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ada:	4a6c      	ldr	r2, [pc, #432]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae4:	4b69      	ldr	r3, [pc, #420]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	4b66      	ldr	r3, [pc, #408]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af8:	4a64      	ldr	r2, [pc, #400]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b02:	4b62      	ldr	r3, [pc, #392]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b10:	4b5e      	ldr	r3, [pc, #376]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b16:	4a5d      	ldr	r2, [pc, #372]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000b18:	f043 0310 	orr.w	r3, r3, #16
 8000b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b20:	4b5a      	ldr	r3, [pc, #360]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	f003 0310 	and.w	r3, r3, #16
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	4b57      	ldr	r3, [pc, #348]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b34:	4a55      	ldr	r2, [pc, #340]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000b36:	f043 0308 	orr.w	r3, r3, #8
 8000b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3e:	4b53      	ldr	r3, [pc, #332]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	f003 0308 	and.w	r3, r3, #8
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b4c:	4b4f      	ldr	r3, [pc, #316]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b52:	4a4e      	ldr	r2, [pc, #312]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5c:	4b4b      	ldr	r3, [pc, #300]	; (8000c8c <MX_GPIO_Init+0x228>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WIFI_GPIO_0_Pin|WIFI_GPIO_2_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2109      	movs	r1, #9
 8000b6e:	4848      	ldr	r0, [pc, #288]	; (8000c90 <MX_GPIO_Init+0x22c>)
 8000b70:	f003 f8a0 	bl	8003cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|WIFI_EN_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f244 0103 	movw	r1, #16387	; 0x4003
 8000b7a:	4846      	ldr	r0, [pc, #280]	; (8000c94 <MX_GPIO_Init+0x230>)
 8000b7c:	f003 f89a 	bl	8003cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8000b86:	4844      	ldr	r0, [pc, #272]	; (8000c98 <MX_GPIO_Init+0x234>)
 8000b88:	f003 f894 	bl	8003cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BAR_INT_GPIO_Port, BAR_INT_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b92:	4842      	ldr	r0, [pc, #264]	; (8000c9c <MX_GPIO_Init+0x238>)
 8000b94:	f003 f88e 	bl	8003cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	4840      	ldr	r0, [pc, #256]	; (8000ca0 <MX_GPIO_Init+0x23c>)
 8000b9e:	f003 f889 	bl	8003cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4836      	ldr	r0, [pc, #216]	; (8000c90 <MX_GPIO_Init+0x22c>)
 8000bb8:	f002 feb4 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = WIFI_GPIO_0_Pin|WIFI_GPIO_2_Pin;
 8000bbc:	2309      	movs	r3, #9
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	482f      	ldr	r0, [pc, #188]	; (8000c90 <MX_GPIO_Init+0x22c>)
 8000bd4:	f002 fea6 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bd8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4828      	ldr	r0, [pc, #160]	; (8000c94 <MX_GPIO_Init+0x230>)
 8000bf2:	f002 fe97 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_EN_Pin;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WIFI_EN_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4821      	ldr	r0, [pc, #132]	; (8000c94 <MX_GPIO_Init+0x230>)
 8000c0e:	f002 fe89 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEMP_HUM_Pin;
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c16:	2303      	movs	r3, #3
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TEMP_HUM_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	4619      	mov	r1, r3
 8000c24:	481e      	ldr	r0, [pc, #120]	; (8000ca0 <MX_GPIO_Init+0x23c>)
 8000c26:	f002 fe7d 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|WIFI_RST_Pin;
 8000c2a:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	4815      	ldr	r0, [pc, #84]	; (8000c98 <MX_GPIO_Init+0x234>)
 8000c44:	f002 fe6e 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BAR_INT_Pin;
 8000c48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BAR_INT_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480e      	ldr	r0, [pc, #56]	; (8000c9c <MX_GPIO_Init+0x238>)
 8000c62:	f002 fe5f 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c66:	2302      	movs	r3, #2
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <MX_GPIO_Init+0x23c>)
 8000c7e:	f002 fe51 	bl	8003924 <HAL_GPIO_Init>

}
 8000c82:	bf00      	nop
 8000c84:	3738      	adds	r7, #56	; 0x38
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	58020800 	.word	0x58020800
 8000c94:	58020400 	.word	0x58020400
 8000c98:	58020c00 	.word	0x58020c00
 8000c9c:	58021800 	.word	0x58021800
 8000ca0:	58021000 	.word	0x58021000

08000ca4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000caa:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <MX_I2C1_Init+0x78>)
 8000cac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	; (8000d20 <MX_I2C1_Init+0x7c>)
 8000cb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cde:	480e      	ldr	r0, [pc, #56]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000ce0:	f003 f830 	bl	8003d44 <HAL_I2C_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cea:	f000 f9f5 	bl	80010d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4809      	ldr	r0, [pc, #36]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cf2:	f003 f8b7 	bl	8003e64 <HAL_I2CEx_ConfigAnalogFilter>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cfc:	f000 f9ec 	bl	80010d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d00:	2100      	movs	r1, #0
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000d04:	f003 f8f9 	bl	8003efa <HAL_I2CEx_ConfigDigitalFilter>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d0e:	f000 f9e3 	bl	80010d8 <Error_Handler>
  }

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000164 	.word	0x20000164
 8000d1c:	40005400 	.word	0x40005400
 8000d20:	307075b1 	.word	0x307075b1

08000d24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a1a      	ldr	r2, [pc, #104]	; (8000dac <HAL_I2C_MspInit+0x88>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d12e      	bne.n	8000da4 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <HAL_I2C_MspInit+0x8c>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4c:	4a18      	ldr	r2, [pc, #96]	; (8000db0 <HAL_I2C_MspInit+0x8c>)
 8000d4e:	f043 0302 	orr.w	r3, r3, #2
 8000d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_I2C_MspInit+0x8c>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6a:	2312      	movs	r3, #18
 8000d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d76:	2304      	movs	r3, #4
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <HAL_I2C_MspInit+0x90>)
 8000d82:	f002 fdcf 	bl	8003924 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_I2C_MspInit+0x8c>)
 8000d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d8c:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_I2C_MspInit+0x8c>)
 8000d8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_I2C_MspInit+0x8c>)
 8000d98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	; 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40005400 	.word	0x40005400
 8000db0:	58024400 	.word	0x58024400
 8000db4:	58020400 	.word	0x58020400

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dba:	b0a5      	sub	sp, #148	; 0x94
 8000dbc:	af12      	add	r7, sp, #72	; 0x48
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc2:	647b      	str	r3, [r7, #68]	; 0x44
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000dc4:	bf00      	nop
 8000dc6:	4b48      	ldr	r3, [pc, #288]	; (8000ee8 <main+0x130>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <main+0x24>
 8000dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dd4:	1e5a      	subs	r2, r3, #1
 8000dd6:	647a      	str	r2, [r7, #68]	; 0x44
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	dcf4      	bgt.n	8000dc6 <main+0xe>
  if ( timeout < 0 )
 8000ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	da01      	bge.n	8000de6 <main+0x2e>
  {
  Error_Handler();
 8000de2:	f000 f979 	bl	80010d8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de6:	f001 f923 	bl	8002030 <HAL_Init>

  /* USER CODE BEGIN Init */
  char test[28];
  double temp_hum_sens[2] = {0, 0}, light_level = 0;
 8000dea:	f04f 0300 	mov.w	r3, #0
 8000dee:	f04f 0400 	mov.w	r4, #0
 8000df2:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	f04f 0400 	mov.w	r4, #0
 8000dfe:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	f04f 0400 	mov.w	r4, #0
 8000e0a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0e:	f000 f875 	bl	8000efc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e12:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <main+0x130>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	4a33      	ldr	r2, [pc, #204]	; (8000ee8 <main+0x130>)
 8000e1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e22:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <main+0x130>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f002 ff59 	bl	8003ce8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000e36:	2100      	movs	r1, #0
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f002 ff6f 	bl	8003d1c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e42:	647b      	str	r3, [r7, #68]	; 0x44
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000e44:	bf00      	nop
 8000e46:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <main+0x130>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d104      	bne.n	8000e5c <main+0xa4>
 8000e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e54:	1e5a      	subs	r2, r3, #1
 8000e56:	647a      	str	r2, [r7, #68]	; 0x44
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	dcf4      	bgt.n	8000e46 <main+0x8e>
if ( timeout < 0 )
 8000e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	da01      	bge.n	8000e66 <main+0xae>
{
Error_Handler();
 8000e62:	f000 f939 	bl	80010d8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e66:	f7ff fdfd 	bl	8000a64 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e6a:	f000 fbcd 	bl	8001608 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e6e:	f000 fcb9 	bl	80017e4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC3_Init();
 8000e72:	f7ff fd17 	bl	80008a4 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000e76:	f000 fa23 	bl	80012c0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000e7a:	f000 fb79 	bl	8001570 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e7e:	f7ff ff11 	bl	8000ca4 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000e82:	f000 fac9 	bl	8001418 <MX_TIM6_Init>
  MX_ADC1_Init();
 8000e86:	f7ff fc95 	bl	80007b4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  light_level = analog_sensor(&hadc3, 800);
 8000e8a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000e8e:	4817      	ldr	r0, [pc, #92]	; (8000eec <main+0x134>)
 8000e90:	f000 fd32 	bl	80018f8 <analog_sensor>
 8000e94:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	  battery_level(&hadc1, test, 3.7);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8000ee0 <main+0x128>
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <main+0x138>)
 8000ea4:	f000 fd64 	bl	8001970 <battery_level>
	  dht11_run(htim6, TEMP_HUM_GPIO_Port, TEMP_HUM_Pin, temp_hum_sens);
 8000ea8:	4e12      	ldr	r6, [pc, #72]	; (8000ef4 <main+0x13c>)
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	9311      	str	r3, [sp, #68]	; 0x44
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	9310      	str	r3, [sp, #64]	; 0x40
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <main+0x140>)
 8000eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8000eb8:	466d      	mov	r5, sp
 8000eba:	f106 0410 	add.w	r4, r6, #16
 8000ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ece:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000ed2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ed6:	f000 ffaa 	bl	8001e2e <dht11_run>
	  light_level = analog_sensor(&hadc3, 800);
 8000eda:	e7d6      	b.n	8000e8a <main+0xd2>
 8000edc:	f3af 8000 	nop.w
 8000ee0:	9999999a 	.word	0x9999999a
 8000ee4:	400d9999 	.word	0x400d9999
 8000ee8:	58024400 	.word	0x58024400
 8000eec:	20000100 	.word	0x20000100
 8000ef0:	2000009c 	.word	0x2000009c
 8000ef4:	200001b0 	.word	0x200001b0
 8000ef8:	58021000 	.word	0x58021000

08000efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b0cc      	sub	sp, #304	; 0x130
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f06:	224c      	movs	r2, #76	; 0x4c
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f008 fb7c 	bl	8009608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f14:	2220      	movs	r2, #32
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f008 fb75 	bl	8009608 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	4618      	mov	r0, r3
 8000f24:	23bc      	movs	r3, #188	; 0xbc
 8000f26:	461a      	mov	r2, r3
 8000f28:	2100      	movs	r1, #0
 8000f2a:	f008 fb6d 	bl	8009608 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f2e:	2004      	movs	r0, #4
 8000f30:	f003 f978 	bl	8004224 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	4b63      	ldr	r3, [pc, #396]	; (80010c8 <SystemClock_Config+0x1cc>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	4a62      	ldr	r2, [pc, #392]	; (80010c8 <SystemClock_Config+0x1cc>)
 8000f40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f44:	6193      	str	r3, [r2, #24]
 8000f46:	4b60      	ldr	r3, [pc, #384]	; (80010c8 <SystemClock_Config+0x1cc>)
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	4b5e      	ldr	r3, [pc, #376]	; (80010cc <SystemClock_Config+0x1d0>)
 8000f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f56:	4a5d      	ldr	r2, [pc, #372]	; (80010cc <SystemClock_Config+0x1d0>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f5e:	4b5b      	ldr	r3, [pc, #364]	; (80010cc <SystemClock_Config+0x1d0>)
 8000f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f62:	f003 0201 	and.w	r2, r3, #1
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f6e:	bf00      	nop
 8000f70:	4b55      	ldr	r3, [pc, #340]	; (80010c8 <SystemClock_Config+0x1cc>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f7c:	d1f8      	bne.n	8000f70 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000f7e:	4b54      	ldr	r3, [pc, #336]	; (80010d0 <SystemClock_Config+0x1d4>)
 8000f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f82:	f023 0303 	bic.w	r3, r3, #3
 8000f86:	4a52      	ldr	r2, [pc, #328]	; (80010d0 <SystemClock_Config+0x1d4>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000fae:	2378      	movs	r3, #120	; 0x78
 8000fb0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000fba:	2314      	movs	r3, #20
 8000fbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fc6:	230c      	movs	r3, #12
 8000fc8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f003 f98b 	bl	80042f8 <HAL_RCC_OscConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000fe8:	f000 f876 	bl	80010d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	233f      	movs	r3, #63	; 0x3f
 8000fee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ffe:	2308      	movs	r3, #8
 8001000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001004:	2340      	movs	r3, #64	; 0x40
 8001006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800100a:	2340      	movs	r3, #64	; 0x40
 800100c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001014:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001018:	2340      	movs	r3, #64	; 0x40
 800101a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800101e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001022:	2104      	movs	r1, #4
 8001024:	4618      	mov	r0, r3
 8001026:	f003 fd77 	bl	8004b18 <HAL_RCC_ClockConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8001030:	f000 f852 	bl	80010d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	4a26      	ldr	r2, [pc, #152]	; (80010d4 <SystemClock_Config+0x1d8>)
 800103a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800103c:	f107 0308 	add.w	r3, r7, #8
 8001040:	2201      	movs	r2, #1
 8001042:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	2212      	movs	r2, #18
 800104a:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	2201      	movs	r2, #1
 8001052:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	2202      	movs	r2, #2
 800105a:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	2202      	movs	r2, #2
 8001062:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	22c0      	movs	r2, #192	; 0xc0
 800106a:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	2220      	movs	r2, #32
 8001072:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800107c:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	2200      	movs	r2, #0
 8001084:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	2200      	movs	r2, #0
 800108c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001090:	f107 0308 	add.w	r3, r7, #8
 8001094:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	2200      	movs	r2, #0
 80010a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 f8b8 	bl	8005220 <HAL_RCCEx_PeriphCLKConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0x1be>
  {
    Error_Handler();
 80010b6:	f000 f80f 	bl	80010d8 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80010ba:	f003 f90d 	bl	80042d8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80010be:	bf00      	nop
 80010c0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	58024800 	.word	0x58024800
 80010cc:	58000400 	.word	0x58000400
 80010d0:	58024400 	.word	0x58024400
 80010d4:	000c000a 	.word	0x000c000a

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_MspInit+0x30>)
 80010f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010f4:	4a08      	ldr	r2, [pc, #32]	; (8001118 <HAL_MspInit+0x30>)
 80010f6:	f043 0302 	orr.w	r3, r3, #2
 80010fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_MspInit+0x30>)
 8001100:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	58024400 	.word	0x58024400

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <MemManage_Handler+0x4>

08001136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <UsageFault_Handler+0x4>

08001142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001170:	f000 ffd0 	bl	8002114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	e00a      	b.n	80011a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800118a:	f3af 8000 	nop.w
 800118e:	4601      	mov	r1, r0
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	60ba      	str	r2, [r7, #8]
 8001196:	b2ca      	uxtb	r2, r1
 8001198:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3301      	adds	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	dbf0      	blt.n	800118a <_read+0x12>
	}

return len;
 80011a8:	687b      	ldr	r3, [r7, #4]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	e009      	b.n	80011d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	60ba      	str	r2, [r7, #8]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3301      	adds	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	dbf1      	blt.n	80011c4 <_write+0x12>
	}
	return len;
 80011e0:	687b      	ldr	r3, [r7, #4]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_close>:

int _close(int file)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
	return -1;
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001212:	605a      	str	r2, [r3, #4]
	return 0;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <_isatty>:

int _isatty(int file)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
	return 1;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
	return 0;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <_sbrk+0x5c>)
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <_sbrk+0x60>)
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d102      	bne.n	8001276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <_sbrk+0x64>)
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <_sbrk+0x68>)
 8001274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <_sbrk+0x64>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	429a      	cmp	r2, r3
 8001282:	d207      	bcs.n	8001294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001284:	f008 f996 	bl	80095b4 <__errno>
 8001288:	4602      	mov	r2, r0
 800128a:	230c      	movs	r3, #12
 800128c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001292:	e009      	b.n	80012a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <_sbrk+0x64>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <_sbrk+0x64>)
 80012a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012a6:	68fb      	ldr	r3, [r7, #12]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20020000 	.word	0x20020000
 80012b4:	00000400 	.word	0x00000400
 80012b8:	20000090 	.word	0x20000090
 80012bc:	20000770 	.word	0x20000770

080012c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b09a      	sub	sp, #104	; 0x68
 80012c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
 80012f0:	615a      	str	r2, [r3, #20]
 80012f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	222c      	movs	r2, #44	; 0x2c
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f008 f984 	bl	8009608 <memset>

  htim1.Instance = TIM1;
 8001300:	4b43      	ldr	r3, [pc, #268]	; (8001410 <MX_TIM1_Init+0x150>)
 8001302:	4a44      	ldr	r2, [pc, #272]	; (8001414 <MX_TIM1_Init+0x154>)
 8001304:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8001306:	4b42      	ldr	r3, [pc, #264]	; (8001410 <MX_TIM1_Init+0x150>)
 8001308:	22ef      	movs	r2, #239	; 0xef
 800130a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b40      	ldr	r3, [pc, #256]	; (8001410 <MX_TIM1_Init+0x150>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001312:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <MX_TIM1_Init+0x150>)
 8001314:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001318:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131a:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <MX_TIM1_Init+0x150>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001320:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <MX_TIM1_Init+0x150>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001326:	4b3a      	ldr	r3, [pc, #232]	; (8001410 <MX_TIM1_Init+0x150>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800132c:	4838      	ldr	r0, [pc, #224]	; (8001410 <MX_TIM1_Init+0x150>)
 800132e:	f005 fe3b 	bl	8006fa8 <HAL_TIM_Base_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001338:	f7ff fece 	bl	80010d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001340:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001342:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001346:	4619      	mov	r1, r3
 8001348:	4831      	ldr	r0, [pc, #196]	; (8001410 <MX_TIM1_Init+0x150>)
 800134a:	f006 f825 	bl	8007398 <HAL_TIM_ConfigClockSource>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001354:	f7ff fec0 	bl	80010d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001358:	482d      	ldr	r0, [pc, #180]	; (8001410 <MX_TIM1_Init+0x150>)
 800135a:	f005 feab 	bl	80070b4 <HAL_TIM_PWM_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001364:	f7ff feb8 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001374:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001378:	4619      	mov	r1, r3
 800137a:	4825      	ldr	r0, [pc, #148]	; (8001410 <MX_TIM1_Init+0x150>)
 800137c:	f006 fce2 	bl	8007d44 <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001386:	f7ff fea7 	bl	80010d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138a:	2360      	movs	r3, #96	; 0x60
 800138c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001392:	2300      	movs	r3, #0
 8001394:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001396:	2300      	movs	r3, #0
 8001398:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013aa:	2200      	movs	r2, #0
 80013ac:	4619      	mov	r1, r3
 80013ae:	4818      	ldr	r0, [pc, #96]	; (8001410 <MX_TIM1_Init+0x150>)
 80013b0:	f005 fee2 	bl	8007178 <HAL_TIM_PWM_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80013ba:	f7ff fe8d 	bl	80010d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	4619      	mov	r1, r3
 80013f2:	4807      	ldr	r0, [pc, #28]	; (8001410 <MX_TIM1_Init+0x150>)
 80013f4:	f006 fd2e 	bl	8007e54 <HAL_TIMEx_ConfigBreakDeadTime>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80013fe:	f7ff fe6b 	bl	80010d8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001402:	4803      	ldr	r0, [pc, #12]	; (8001410 <MX_TIM1_Init+0x150>)
 8001404:	f000 f878 	bl	80014f8 <HAL_TIM_MspPostInit>

}
 8001408:	bf00      	nop
 800140a:	3768      	adds	r7, #104	; 0x68
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200001fc 	.word	0x200001fc
 8001414:	40010000 	.word	0x40010000

08001418 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_TIM6_Init+0x64>)
 800142a:	4a15      	ldr	r2, [pc, #84]	; (8001480 <MX_TIM6_Init+0x68>)
 800142c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 239;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <MX_TIM6_Init+0x64>)
 8001430:	22ef      	movs	r2, #239	; 0xef
 8001432:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_TIM6_Init+0x64>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_TIM6_Init+0x64>)
 800143c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001440:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_TIM6_Init+0x64>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <MX_TIM6_Init+0x64>)
 800144a:	f005 fdad 	bl	8006fa8 <HAL_TIM_Base_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001454:	f7ff fe40 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_TIM6_Init+0x64>)
 8001466:	f006 fc6d 	bl	8007d44 <HAL_TIMEx_MasterConfigSynchronization>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001470:	f7ff fe32 	bl	80010d8 <Error_Handler>
  }

}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200001b0 	.word	0x200001b0
 8001480:	40001000 	.word	0x40001000

08001484 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a16      	ldr	r2, [pc, #88]	; (80014ec <HAL_TIM_Base_MspInit+0x68>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d10f      	bne.n	80014b6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_TIM_Base_MspInit+0x6c>)
 8001498:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800149c:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <HAL_TIM_Base_MspInit+0x6c>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_TIM_Base_MspInit+0x6c>)
 80014a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80014b4:	e013      	b.n	80014de <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM6)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <HAL_TIM_Base_MspInit+0x70>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d10e      	bne.n	80014de <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_TIM_Base_MspInit+0x6c>)
 80014c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <HAL_TIM_Base_MspInit+0x6c>)
 80014c8:	f043 0310 	orr.w	r3, r3, #16
 80014cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_TIM_Base_MspInit+0x6c>)
 80014d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40010000 	.word	0x40010000
 80014f0:	58024400 	.word	0x58024400
 80014f4:	40001000 	.word	0x40001000

080014f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a13      	ldr	r2, [pc, #76]	; (8001564 <HAL_TIM_MspPostInit+0x6c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d11f      	bne.n	800155a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_TIM_MspPostInit+0x70>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001520:	4a11      	ldr	r2, [pc, #68]	; (8001568 <HAL_TIM_MspPostInit+0x70>)
 8001522:	f043 0310 	orr.w	r3, r3, #16
 8001526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_TIM_MspPostInit+0x70>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001530:	f003 0310 	and.w	r3, r3, #16
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = BUZZ_PWM_Pin;
 8001538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800154a:	2301      	movs	r3, #1
 800154c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZ_PWM_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <HAL_TIM_MspPostInit+0x74>)
 8001556:	f002 f9e5 	bl	8003924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800155a:	bf00      	nop
 800155c:	3720      	adds	r7, #32
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40010000 	.word	0x40010000
 8001568:	58024400 	.word	0x58024400
 800156c:	58021000 	.word	0x58021000

08001570 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <MX_USART2_UART_Init+0x90>)
 8001576:	4a23      	ldr	r2, [pc, #140]	; (8001604 <MX_USART2_UART_Init+0x94>)
 8001578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800157a:	4b21      	ldr	r3, [pc, #132]	; (8001600 <MX_USART2_UART_Init+0x90>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <MX_USART2_UART_Init+0x90>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <MX_USART2_UART_Init+0x90>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <MX_USART2_UART_Init+0x90>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_USART2_UART_Init+0x90>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <MX_USART2_UART_Init+0x90>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <MX_USART2_UART_Init+0x90>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_USART2_UART_Init+0x90>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_USART2_UART_Init+0x90>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <MX_USART2_UART_Init+0x90>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b8:	4811      	ldr	r0, [pc, #68]	; (8001600 <MX_USART2_UART_Init+0x90>)
 80015ba:	f006 fcc9 	bl	8007f50 <HAL_UART_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015c4:	f7ff fd88 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c8:	2100      	movs	r1, #0
 80015ca:	480d      	ldr	r0, [pc, #52]	; (8001600 <MX_USART2_UART_Init+0x90>)
 80015cc:	f007 fc63 	bl	8008e96 <HAL_UARTEx_SetTxFifoThreshold>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015d6:	f7ff fd7f 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015da:	2100      	movs	r1, #0
 80015dc:	4808      	ldr	r0, [pc, #32]	; (8001600 <MX_USART2_UART_Init+0x90>)
 80015de:	f007 fc98 	bl	8008f12 <HAL_UARTEx_SetRxFifoThreshold>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015e8:	f7ff fd76 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015ec:	4804      	ldr	r0, [pc, #16]	; (8001600 <MX_USART2_UART_Init+0x90>)
 80015ee:	f007 fc19 	bl	8008e24 <HAL_UARTEx_DisableFifoMode>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015f8:	f7ff fd6e 	bl	80010d8 <Error_Handler>
  }

}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200002d4 	.word	0x200002d4
 8001604:	40004400 	.word	0x40004400

08001608 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <MX_USART3_UART_Init+0x90>)
 800160e:	4a23      	ldr	r2, [pc, #140]	; (800169c <MX_USART3_UART_Init+0x94>)
 8001610:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <MX_USART3_UART_Init+0x90>)
 8001614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001618:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <MX_USART3_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <MX_USART3_UART_Init+0x90>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <MX_USART3_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <MX_USART3_UART_Init+0x90>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <MX_USART3_UART_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <MX_USART3_UART_Init+0x90>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_USART3_UART_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <MX_USART3_UART_Init+0x90>)
 8001646:	2200      	movs	r2, #0
 8001648:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <MX_USART3_UART_Init+0x90>)
 800164c:	2200      	movs	r2, #0
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001650:	4811      	ldr	r0, [pc, #68]	; (8001698 <MX_USART3_UART_Init+0x90>)
 8001652:	f006 fc7d 	bl	8007f50 <HAL_UART_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800165c:	f7ff fd3c 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001660:	2100      	movs	r1, #0
 8001662:	480d      	ldr	r0, [pc, #52]	; (8001698 <MX_USART3_UART_Init+0x90>)
 8001664:	f007 fc17 	bl	8008e96 <HAL_UARTEx_SetTxFifoThreshold>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800166e:	f7ff fd33 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001672:	2100      	movs	r1, #0
 8001674:	4808      	ldr	r0, [pc, #32]	; (8001698 <MX_USART3_UART_Init+0x90>)
 8001676:	f007 fc4c 	bl	8008f12 <HAL_UARTEx_SetRxFifoThreshold>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001680:	f7ff fd2a 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001684:	4804      	ldr	r0, [pc, #16]	; (8001698 <MX_USART3_UART_Init+0x90>)
 8001686:	f007 fbcd 	bl	8008e24 <HAL_UARTEx_DisableFifoMode>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001690:	f7ff fd22 	bl	80010d8 <Error_Handler>
  }

}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000248 	.word	0x20000248
 800169c:	40004800 	.word	0x40004800

080016a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	; 0x30
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a44      	ldr	r2, [pc, #272]	; (80017d0 <HAL_UART_MspInit+0x130>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d14d      	bne.n	800175e <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c2:	4b44      	ldr	r3, [pc, #272]	; (80017d4 <HAL_UART_MspInit+0x134>)
 80016c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016c8:	4a42      	ldr	r2, [pc, #264]	; (80017d4 <HAL_UART_MspInit+0x134>)
 80016ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016d2:	4b40      	ldr	r3, [pc, #256]	; (80017d4 <HAL_UART_MspInit+0x134>)
 80016d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <HAL_UART_MspInit+0x134>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e6:	4a3b      	ldr	r2, [pc, #236]	; (80017d4 <HAL_UART_MspInit+0x134>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f0:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <HAL_UART_MspInit+0x134>)
 80016f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016fe:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <HAL_UART_MspInit+0x134>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001704:	4a33      	ldr	r2, [pc, #204]	; (80017d4 <HAL_UART_MspInit+0x134>)
 8001706:	f043 0308 	orr.w	r3, r3, #8
 800170a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800170e:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <HAL_UART_MspInit+0x134>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = WIFI_TX_Pin;
 800171c:	2308      	movs	r3, #8
 800171e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800172c:	2307      	movs	r3, #7
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	4828      	ldr	r0, [pc, #160]	; (80017d8 <HAL_UART_MspInit+0x138>)
 8001738:	f002 f8f4 	bl	8003924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIFI_RX_Pin;
 800173c:	2320      	movs	r3, #32
 800173e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800174c:	2307      	movs	r3, #7
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	4619      	mov	r1, r3
 8001756:	4821      	ldr	r0, [pc, #132]	; (80017dc <HAL_UART_MspInit+0x13c>)
 8001758:	f002 f8e4 	bl	8003924 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800175c:	e033      	b.n	80017c6 <HAL_UART_MspInit+0x126>
  else if(uartHandle->Instance==USART3)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <HAL_UART_MspInit+0x140>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d12e      	bne.n	80017c6 <HAL_UART_MspInit+0x126>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <HAL_UART_MspInit+0x134>)
 800176a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800176e:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <HAL_UART_MspInit+0x134>)
 8001770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001774:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001778:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <HAL_UART_MspInit+0x134>)
 800177a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800177e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_UART_MspInit+0x134>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178c:	4a11      	ldr	r2, [pc, #68]	; (80017d4 <HAL_UART_MspInit+0x134>)
 800178e:	f043 0308 	orr.w	r3, r3, #8
 8001792:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_UART_MspInit+0x134>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80017a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017b6:	2307      	movs	r3, #7
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4619      	mov	r1, r3
 80017c0:	4806      	ldr	r0, [pc, #24]	; (80017dc <HAL_UART_MspInit+0x13c>)
 80017c2:	f002 f8af 	bl	8003924 <HAL_GPIO_Init>
}
 80017c6:	bf00      	nop
 80017c8:	3730      	adds	r7, #48	; 0x30
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40004400 	.word	0x40004400
 80017d4:	58024400 	.word	0x58024400
 80017d8:	58020000 	.word	0x58020000
 80017dc:	58020c00 	.word	0x58020c00
 80017e0:	40004800 	.word	0x40004800

080017e4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017ea:	4a16      	ldr	r2, [pc, #88]	; (8001844 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80017ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017f0:	2209      	movs	r2, #9
 80017f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017f6:	2202      	movs	r2, #2
 80017f8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001802:	2202      	movs	r2, #2
 8001804:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001814:	2200      	movs	r2, #0
 8001816:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800181a:	2201      	movs	r2, #1
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001820:	2201      	movs	r2, #1
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001826:	2200      	movs	r2, #0
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800182c:	f002 fbb1 	bl	8003f92 <HAL_PCD_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001836:	f7ff fc4f 	bl	80010d8 <Error_Handler>
  }

}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000360 	.word	0x20000360
 8001844:	40080000 	.word	0x40080000

08001848 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a21      	ldr	r2, [pc, #132]	; (80018ec <HAL_PCD_MspInit+0xa4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d13b      	bne.n	80018e2 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <HAL_PCD_MspInit+0xa8>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001870:	4a1f      	ldr	r2, [pc, #124]	; (80018f0 <HAL_PCD_MspInit+0xa8>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_PCD_MspInit+0xa8>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001888:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800188c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800189a:	230a      	movs	r3, #10
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	4813      	ldr	r0, [pc, #76]	; (80018f4 <HAL_PCD_MspInit+0xac>)
 80018a6:	f002 f83d 	bl	8003924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	480d      	ldr	r0, [pc, #52]	; (80018f4 <HAL_PCD_MspInit+0xac>)
 80018c0:	f002 f830 	bl	8003924 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018c4:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_PCD_MspInit+0xa8>)
 80018c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <HAL_PCD_MspInit+0xa8>)
 80018cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_PCD_MspInit+0xa8>)
 80018d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	; 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40080000 	.word	0x40080000
 80018f0:	58024400 	.word	0x58024400
 80018f4:	58020000 	.word	0x58020000

080018f8 <analog_sensor>:
 */


#include "sensors_headers/analog_sensors.h"

double analog_sensor(ADC_HandleTypeDef* adc, int max_value){
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
	double result = 0;
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	f04f 0400 	mov.w	r4, #0
 800190a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	uint16_t temp = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Start(adc);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 ffce 	bl	80028b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(adc, HAL_MAX_DELAY);
 8001918:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f001 f893 	bl	8002a48 <HAL_ADC_PollForConversion>
	temp = HAL_ADC_GetValue(adc);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f001 f97c 	bl	8002c20 <HAL_ADC_GetValue>
 8001928:	4603      	mov	r3, r0
 800192a:	81fb      	strh	r3, [r7, #14]
	result = ((double)temp)*max_value/65535;
 800192c:	89fb      	ldrh	r3, [r7, #14]
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	ee07 3a90 	vmov	s15, r3
 800193c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001940:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001944:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8001968 <analog_sensor+0x70>
 8001948:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800194c:	ed87 7b04 	vstr	d7, [r7, #16]
	return result;
 8001950:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001954:	ec44 3b17 	vmov	d7, r3, r4
}
 8001958:	eeb0 0b47 	vmov.f64	d0, d7
 800195c:	371c      	adds	r7, #28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd90      	pop	{r4, r7, pc}
 8001962:	bf00      	nop
 8001964:	f3af 8000 	nop.w
 8001968:	00000000 	.word	0x00000000
 800196c:	40efffe0 	.word	0x40efffe0

08001970 <battery_level>:
void battery_level(ADC_HandleTypeDef* adc, char* level, double ref_value){
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b08b      	sub	sp, #44	; 0x2c
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	ed87 0b00 	vstr	d0, [r7]
	uint8_t approx_level = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	double vbat = 0;
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	f04f 0400 	mov.w	r4, #0
 800198c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	HAL_ADC_Start(adc);
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 ff8f 	bl	80028b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(adc, HAL_MAX_DELAY);
 8001996:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f001 f854 	bl	8002a48 <HAL_ADC_PollForConversion>
	uint16_t bat_adc = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	82fb      	strh	r3, [r7, #22]
	bat_adc = HAL_ADC_GetValue(adc);
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f001 f93b 	bl	8002c20 <HAL_ADC_GetValue>
 80019aa:	4603      	mov	r3, r0
 80019ac:	82fb      	strh	r3, [r7, #22]
	vbat = bat_adc*ref_value/65535;
 80019ae:	8afb      	ldrh	r3, [r7, #22]
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019b8:	ed97 7b00 	vldr	d7, [r7]
 80019bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80019c0:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 8001b30 <battery_level+0x1c0>
 80019c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019c8:	ed87 7b06 	vstr	d7, [r7, #24]

	if(vbat>3.7){
 80019cc:	ed97 7b06 	vldr	d7, [r7, #24]
 80019d0:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8001b38 <battery_level+0x1c8>
 80019d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80019d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019dc:	dd02      	ble.n	80019e4 <battery_level+0x74>
		approx_level = 100;
 80019de:	2364      	movs	r3, #100	; 0x64
 80019e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	if(vbat<=3.7 && vbat>3.6){
 80019e4:	ed97 7b06 	vldr	d7, [r7, #24]
 80019e8:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8001b38 <battery_level+0x1c8>
 80019ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80019f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f4:	d80b      	bhi.n	8001a0e <battery_level+0x9e>
 80019f6:	ed97 7b06 	vldr	d7, [r7, #24]
 80019fa:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8001b40 <battery_level+0x1d0>
 80019fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	dd02      	ble.n	8001a0e <battery_level+0x9e>
		approx_level = 90;
 8001a08:	235a      	movs	r3, #90	; 0x5a
 8001a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	if(vbat<=3.6 && vbat>3.55){
 8001a0e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a12:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8001b40 <battery_level+0x1d0>
 8001a16:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1e:	d80b      	bhi.n	8001a38 <battery_level+0xc8>
 8001a20:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a24:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8001b48 <battery_level+0x1d8>
 8001a28:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	dd02      	ble.n	8001a38 <battery_level+0xc8>
		approx_level = 70;
 8001a32:	2346      	movs	r3, #70	; 0x46
 8001a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	if(vbat<=3.55 && vbat>3.5){
 8001a38:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a3c:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8001b48 <battery_level+0x1d8>
 8001a40:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a48:	d80b      	bhi.n	8001a62 <battery_level+0xf2>
 8001a4a:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a4e:	eeb0 6b0c 	vmov.f64	d6, #12	; 0x40600000  3.5
 8001a52:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5a:	dd02      	ble.n	8001a62 <battery_level+0xf2>
		approx_level = 50;
 8001a5c:	2332      	movs	r3, #50	; 0x32
 8001a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	if(vbat<=3.5 && vbat>3.45){
 8001a62:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a66:	eeb0 6b0c 	vmov.f64	d6, #12	; 0x40600000  3.5
 8001a6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a72:	d80b      	bhi.n	8001a8c <battery_level+0x11c>
 8001a74:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a78:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001b50 <battery_level+0x1e0>
 8001a7c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	dd02      	ble.n	8001a8c <battery_level+0x11c>
		approx_level = 30;
 8001a86:	231e      	movs	r3, #30
 8001a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	if(vbat<=3.45 && vbat>3.4){
 8001a8c:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a90:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8001b50 <battery_level+0x1e0>
 8001a94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9c:	d80b      	bhi.n	8001ab6 <battery_level+0x146>
 8001a9e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001aa2:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8001b58 <battery_level+0x1e8>
 8001aa6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aae:	dd02      	ble.n	8001ab6 <battery_level+0x146>
		approx_level = 20;
 8001ab0:	2314      	movs	r3, #20
 8001ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	if(vbat<=3.4 && vbat>3.3){
 8001ab6:	ed97 7b06 	vldr	d7, [r7, #24]
 8001aba:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001b58 <battery_level+0x1e8>
 8001abe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac6:	d80b      	bhi.n	8001ae0 <battery_level+0x170>
 8001ac8:	ed97 7b06 	vldr	d7, [r7, #24]
 8001acc:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8001b60 <battery_level+0x1f0>
 8001ad0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad8:	dd02      	ble.n	8001ae0 <battery_level+0x170>
		approx_level = 5;
 8001ada:	2305      	movs	r3, #5
 8001adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	if (approx_level>70){
 8001ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ae4:	2b46      	cmp	r3, #70	; 0x46
 8001ae6:	d907      	bls.n	8001af8 <battery_level+0x188>
		sprintf(level, "Battery level high, at: %u%s", approx_level, "%");
 8001ae8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <battery_level+0x1f8>)
 8001aee:	491f      	ldr	r1, [pc, #124]	; (8001b6c <battery_level+0x1fc>)
 8001af0:	68b8      	ldr	r0, [r7, #8]
 8001af2:	f007 fda9 	bl	8009648 <siprintf>
		sprintf(level, "Battery level mid, at: %u%s", approx_level, "%");
	}
	else{
		printf(level, "Battery level low, at: %u%s", approx_level, "%");
	}
}
 8001af6:	e016      	b.n	8001b26 <battery_level+0x1b6>
	else if(approx_level<=70 && approx_level>30){
 8001af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001afc:	2b46      	cmp	r3, #70	; 0x46
 8001afe:	d80b      	bhi.n	8001b18 <battery_level+0x1a8>
 8001b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b04:	2b1e      	cmp	r3, #30
 8001b06:	d907      	bls.n	8001b18 <battery_level+0x1a8>
		sprintf(level, "Battery level mid, at: %u%s", approx_level, "%");
 8001b08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001b0c:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <battery_level+0x1f8>)
 8001b0e:	4918      	ldr	r1, [pc, #96]	; (8001b70 <battery_level+0x200>)
 8001b10:	68b8      	ldr	r0, [r7, #8]
 8001b12:	f007 fd99 	bl	8009648 <siprintf>
}
 8001b16:	e006      	b.n	8001b26 <battery_level+0x1b6>
		printf(level, "Battery level low, at: %u%s", approx_level, "%");
 8001b18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <battery_level+0x1f8>)
 8001b1e:	4915      	ldr	r1, [pc, #84]	; (8001b74 <battery_level+0x204>)
 8001b20:	68b8      	ldr	r0, [r7, #8]
 8001b22:	f007 fd79 	bl	8009618 <iprintf>
}
 8001b26:	bf00      	nop
 8001b28:	372c      	adds	r7, #44	; 0x2c
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	00000000 	.word	0x00000000
 8001b34:	40efffe0 	.word	0x40efffe0
 8001b38:	9999999a 	.word	0x9999999a
 8001b3c:	400d9999 	.word	0x400d9999
 8001b40:	cccccccd 	.word	0xcccccccd
 8001b44:	400ccccc 	.word	0x400ccccc
 8001b48:	66666666 	.word	0x66666666
 8001b4c:	400c6666 	.word	0x400c6666
 8001b50:	9999999a 	.word	0x9999999a
 8001b54:	400b9999 	.word	0x400b9999
 8001b58:	33333333 	.word	0x33333333
 8001b5c:	400b3333 	.word	0x400b3333
 8001b60:	66666666 	.word	0x66666666
 8001b64:	400a6666 	.word	0x400a6666
 8001b68:	0800a780 	.word	0x0800a780
 8001b6c:	0800a784 	.word	0x0800a784
 8001b70:	0800a7a4 	.word	0x0800a7a4
 8001b74:	0800a7c0 	.word	0x0800a7c0

08001b78 <delay>:
 */


#include "sensors_headers/dht11.h"

void delay(TIM_HandleTypeDef tim, uint8_t ms){
 8001b78:	b084      	sub	sp, #16
 8001b7a:	b490      	push	{r4, r7}
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	f107 0408 	add.w	r4, r7, #8
 8001b82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	__HAL_TIM_SET_COUNTER(&tim, 0);
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&tim)<ms);
 8001b8c:	bf00      	nop
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b92:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d3f9      	bcc.n	8001b8e <delay+0x16>
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc90      	pop	{r4, r7}
 8001ba0:	b004      	add	sp, #16
 8001ba2:	4770      	bx	lr

08001ba4 <set_gpio_output>:
void set_gpio_output(GPIO_TypeDef* gpio_port, uint8_t gpio_pin){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = gpio_pin;
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(gpio_port, &GPIO_InitStruct);
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f001 fea6 	bl	8003924 <HAL_GPIO_Init>
}
 8001bd8:	bf00      	nop
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <set_gpio_input_nopull>:
	GPIO_InitStruct.Pin = gpio_pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(gpio_port, &GPIO_InitStruct);
}
void set_gpio_input_nopull(GPIO_TypeDef* gpio_port, uint8_t gpio_pin){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = gpio_pin;
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(gpio_port, &GPIO_InitStruct);
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f001 fe88 	bl	8003924 <HAL_GPIO_Init>
}
 8001c14:	bf00      	nop
 8001c16:	3720      	adds	r7, #32
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <dht11_init>:
	GPIO_InitStruct.Pin = gpio_pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init(gpio_port, &GPIO_InitStruct);
}
void dht11_init(TIM_HandleTypeDef tim, GPIO_TypeDef* gpio_port, uint8_t gpio_pin){
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	b5b0      	push	{r4, r5, r7, lr}
 8001c20:	b090      	sub	sp, #64	; 0x40
 8001c22:	af10      	add	r7, sp, #64	; 0x40
 8001c24:	f107 0410 	add.w	r4, r7, #16
 8001c28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	set_gpio_output(gpio_port, gpio_pin);
 8001c2c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001c30:	4619      	mov	r1, r3
 8001c32:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001c34:	f7ff ffb6 	bl	8001ba4 <set_gpio_output>
	HAL_GPIO_WritePin(gpio_port, gpio_pin, GPIO_PIN_SET);
 8001c38:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4619      	mov	r1, r3
 8001c42:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001c44:	f002 f836 	bl	8003cb4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001c48:	2014      	movs	r0, #20
 8001c4a:	f000 fa83 	bl	8002154 <HAL_Delay>
	HAL_GPIO_WritePin(gpio_port, gpio_pin, GPIO_PIN_RESET);
 8001c4e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	2200      	movs	r2, #0
 8001c56:	4619      	mov	r1, r3
 8001c58:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001c5a:	f002 f82b 	bl	8003cb4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001c5e:	2014      	movs	r0, #20
 8001c60:	f000 fa78 	bl	8002154 <HAL_Delay>
	HAL_GPIO_WritePin(gpio_port, gpio_pin, GPIO_PIN_SET);
 8001c64:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001c70:	f002 f820 	bl	8003cb4 <HAL_GPIO_WritePin>
	delay(tim, 30);
 8001c74:	231e      	movs	r3, #30
 8001c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8001c78:	466d      	mov	r5, sp
 8001c7a:	f107 0420 	add.w	r4, r7, #32
 8001c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c8a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001c8e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001c92:	f107 0310 	add.w	r3, r7, #16
 8001c96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c98:	f7ff ff6e 	bl	8001b78 <delay>
	set_gpio_input_nopull(gpio_port, gpio_pin);
 8001c9c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001ca4:	f7ff ff9c 	bl	8001be0 <set_gpio_input_nopull>
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001cb0:	b004      	add	sp, #16
 8001cb2:	4770      	bx	lr

08001cb4 <dht11_response>:
uint8_t dht11_response(TIM_HandleTypeDef tim, GPIO_TypeDef* gpio_port, uint8_t gpio_pin){
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	b5b0      	push	{r4, r5, r7, lr}
 8001cb8:	b092      	sub	sp, #72	; 0x48
 8001cba:	af10      	add	r7, sp, #64	; 0x40
 8001cbc:	f107 0418 	add.w	r4, r7, #24
 8001cc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t resp = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	71fb      	strb	r3, [r7, #7]
	if(!HAL_GPIO_ReadPin(gpio_port, gpio_pin)){
 8001cc8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4619      	mov	r1, r3
 8001cd0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001cd2:	f001 ffd7 	bl	8003c84 <HAL_GPIO_ReadPin>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d122      	bne.n	8001d22 <dht11_response+0x6e>
		delay(tim, 80);
 8001cdc:	2350      	movs	r3, #80	; 0x50
 8001cde:	930f      	str	r3, [sp, #60]	; 0x3c
 8001ce0:	466d      	mov	r5, sp
 8001ce2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001ce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001cf6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001cfa:	f107 0318 	add.w	r3, r7, #24
 8001cfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d00:	f7ff ff3a 	bl	8001b78 <delay>
		if(HAL_GPIO_ReadPin(gpio_port, gpio_pin)){
 8001d04:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001d0e:	f001 ffb9 	bl	8003c84 <HAL_GPIO_ReadPin>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <dht11_response+0x6a>
			resp = 1;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	71fb      	strb	r3, [r7, #7]
 8001d1c:	e001      	b.n	8001d22 <dht11_response+0x6e>
		}
		else{
			resp = -1;
 8001d1e:	23ff      	movs	r3, #255	; 0xff
 8001d20:	71fb      	strb	r3, [r7, #7]
		}
	}
	delay(tim, 80);
 8001d22:	2350      	movs	r3, #80	; 0x50
 8001d24:	930f      	str	r3, [sp, #60]	; 0x3c
 8001d26:	466d      	mov	r5, sp
 8001d28:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d38:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d3c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d40:	f107 0318 	add.w	r3, r7, #24
 8001d44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d46:	f7ff ff17 	bl	8001b78 <delay>
	return resp;
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001d56:	b004      	add	sp, #16
 8001d58:	4770      	bx	lr

08001d5a <dht11_read>:
uint8_t dht11_read(TIM_HandleTypeDef tim, GPIO_TypeDef* gpio_port, uint8_t gpio_pin){
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	b5b0      	push	{r4, r5, r7, lr}
 8001d5e:	b092      	sub	sp, #72	; 0x48
 8001d60:	af10      	add	r7, sp, #64	; 0x40
 8001d62:	f107 0418 	add.w	r4, r7, #24
 8001d66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t data = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<8; i++){
 8001d6e:	2300      	movs	r3, #0
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	e051      	b.n	8001e18 <dht11_read+0xbe>
		while(!HAL_GPIO_ReadPin(gpio_port, gpio_pin));
 8001d74:	bf00      	nop
 8001d76:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001d80:	f001 ff80 	bl	8003c84 <HAL_GPIO_ReadPin>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f5      	beq.n	8001d76 <dht11_read+0x1c>
		delay(tim, 40);
 8001d8a:	2328      	movs	r3, #40	; 0x28
 8001d8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8001d8e:	466d      	mov	r5, sp
 8001d90:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001da4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001da8:	f107 0318 	add.w	r3, r7, #24
 8001dac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dae:	f7ff fee3 	bl	8001b78 <delay>
		if(HAL_GPIO_ReadPin(gpio_port, gpio_pin)){
 8001db2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4619      	mov	r1, r3
 8001dba:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001dbc:	f001 ff62 	bl	8003c84 <HAL_GPIO_ReadPin>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00c      	beq.n	8001de0 <dht11_read+0x86>
			data |= (1<<(7-i));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f1c3 0307 	rsb	r3, r3, #7
 8001dcc:	2201      	movs	r2, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	b25a      	sxtb	r2, r3
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	b25b      	sxtb	r3, r3
 8001ddc:	71fb      	strb	r3, [r7, #7]
 8001dde:	e00d      	b.n	8001dfc <dht11_read+0xa2>
		}
		else{
			data &= ~(1<<(7-i));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	f1c3 0307 	rsb	r3, r3, #7
 8001de6:	2201      	movs	r2, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	b25b      	sxtb	r3, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	b25a      	sxtb	r2, r3
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	4013      	ands	r3, r2
 8001df8:	b25b      	sxtb	r3, r3
 8001dfa:	71fb      	strb	r3, [r7, #7]
		}
		while(HAL_GPIO_ReadPin(gpio_port, gpio_pin));
 8001dfc:	bf00      	nop
 8001dfe:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4619      	mov	r1, r3
 8001e06:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001e08:	f001 ff3c 	bl	8003c84 <HAL_GPIO_ReadPin>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f5      	bne.n	8001dfe <dht11_read+0xa4>
	for (int i=0; i<8; i++){
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2b07      	cmp	r3, #7
 8001e1c:	ddaa      	ble.n	8001d74 <dht11_read+0x1a>
	}
	return data;
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001e2a:	b004      	add	sp, #16
 8001e2c:	4770      	bx	lr

08001e2e <dht11_run>:
void dht11_run(TIM_HandleTypeDef tim, GPIO_TypeDef* gpio_port, uint8_t gpio_pin, double* data){
 8001e2e:	b084      	sub	sp, #16
 8001e30:	b5b0      	push	{r4, r5, r7, lr}
 8001e32:	b094      	sub	sp, #80	; 0x50
 8001e34:	af12      	add	r7, sp, #72	; 0x48
 8001e36:	f107 0418 	add.w	r4, r7, #24
 8001e3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_TIM_Base_Start(&tim);
 8001e3e:	f107 0018 	add.w	r0, r7, #24
 8001e42:	f005 f909 	bl	8007058 <HAL_TIM_Base_Start>
	uint8_t temp_byte_1 = 0, temp_byte_2 = 0, hum_byte_1 = 0, hum_byte_2 = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	71fb      	strb	r3, [r7, #7]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	71bb      	strb	r3, [r7, #6]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	717b      	strb	r3, [r7, #5]
 8001e52:	2300      	movs	r3, #0
 8001e54:	713b      	strb	r3, [r7, #4]
	dht11_init(tim, gpio_port, gpio_pin);
 8001e56:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001e5a:	9310      	str	r3, [sp, #64]	; 0x40
 8001e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001e60:	466d      	mov	r5, sp
 8001e62:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001e66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e72:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001e76:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001e7a:	f107 0318 	add.w	r3, r7, #24
 8001e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e80:	f7ff fecc 	bl	8001c1c <dht11_init>
	if(dht11_response(tim, gpio_port, gpio_pin)){
 8001e84:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001e88:	9310      	str	r3, [sp, #64]	; 0x40
 8001e8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8001e8e:	466d      	mov	r5, sp
 8001e90:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001ea4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001ea8:	f107 0318 	add.w	r3, r7, #24
 8001eac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eae:	f7ff ff01 	bl	8001cb4 <dht11_response>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d063      	beq.n	8001f80 <dht11_run+0x152>
		hum_byte_1 = dht11_read(tim, gpio_port, gpio_pin);
 8001eb8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001ebc:	9310      	str	r3, [sp, #64]	; 0x40
 8001ebe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ec0:	930f      	str	r3, [sp, #60]	; 0x3c
 8001ec2:	466d      	mov	r5, sp
 8001ec4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001ed8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001edc:	f107 0318 	add.w	r3, r7, #24
 8001ee0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ee2:	f7ff ff3a 	bl	8001d5a <dht11_read>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	717b      	strb	r3, [r7, #5]
		hum_byte_2 = dht11_read(tim, gpio_port, gpio_pin);
 8001eea:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001eee:	9310      	str	r3, [sp, #64]	; 0x40
 8001ef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ef2:	930f      	str	r3, [sp, #60]	; 0x3c
 8001ef4:	466d      	mov	r5, sp
 8001ef6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f06:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001f0a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001f0e:	f107 0318 	add.w	r3, r7, #24
 8001f12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f14:	f7ff ff21 	bl	8001d5a <dht11_read>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	713b      	strb	r3, [r7, #4]
		temp_byte_1 = dht11_read(tim, gpio_port, gpio_pin);
 8001f1c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001f20:	9310      	str	r3, [sp, #64]	; 0x40
 8001f22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f24:	930f      	str	r3, [sp, #60]	; 0x3c
 8001f26:	466d      	mov	r5, sp
 8001f28:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f38:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001f3c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001f40:	f107 0318 	add.w	r3, r7, #24
 8001f44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f46:	f7ff ff08 	bl	8001d5a <dht11_read>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
		temp_byte_2 = dht11_read(tim, gpio_port, gpio_pin);
 8001f4e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001f52:	9310      	str	r3, [sp, #64]	; 0x40
 8001f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f56:	930f      	str	r3, [sp, #60]	; 0x3c
 8001f58:	466d      	mov	r5, sp
 8001f5a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f6a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001f6e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001f72:	f107 0318 	add.w	r3, r7, #24
 8001f76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f78:	f7ff feef 	bl	8001d5a <dht11_read>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	71bb      	strb	r3, [r7, #6]
	}
	data[0] = temp_byte_1 + temp_byte_2/10.0;
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001f8a:	79bb      	ldrb	r3, [r7, #6]
 8001f8c:	ee07 3a90 	vmov	s15, r3
 8001f90:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001f94:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8001f98:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001f9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fa2:	ed83 7b00 	vstr	d7, [r3]
	data[1] = hum_byte_1 + hum_byte_2/10.0;
 8001fa6:	797b      	ldrb	r3, [r7, #5]
 8001fa8:	ee07 3a90 	vmov	s15, r3
 8001fac:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001fb0:	793b      	ldrb	r3, [r7, #4]
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001fba:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8001fbe:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fc4:	3308      	adds	r3, #8
 8001fc6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001fca:	ed83 7b00 	vstr	d7, [r3]
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001fd8:	b004      	add	sp, #16
 8001fda:	4770      	bx	lr

08001fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002014 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001fe0:	f7fe fb4e 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fe4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fe6:	e003      	b.n	8001ff0 <LoopCopyDataInit>

08001fe8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001fea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fee:	3104      	adds	r1, #4

08001ff0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ff0:	480a      	ldr	r0, [pc, #40]	; (800201c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001ff4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ff6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ff8:	d3f6      	bcc.n	8001fe8 <CopyDataInit>
  ldr  r2, =_sbss
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001ffc:	e002      	b.n	8002004 <LoopFillZerobss>

08001ffe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ffe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002000:	f842 3b04 	str.w	r3, [r2], #4

08002004 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8002006:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002008:	d3f9      	bcc.n	8001ffe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800200a:	f007 fad9 	bl	80095c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800200e:	f7fe fed3 	bl	8000db8 <main>
  bx  lr    
 8002012:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002014:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002018:	0800a8bc 	.word	0x0800a8bc
  ldr  r0, =_sdata
 800201c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002020:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002024:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002028:	20000770 	.word	0x20000770

0800202c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC3_IRQHandler>
	...

08002030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002036:	2003      	movs	r0, #3
 8002038:	f001 fc42 	bl	80038c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800203c:	f002 ff22 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8002040:	4601      	mov	r1, r0
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_Init+0x68>)
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	0a1b      	lsrs	r3, r3, #8
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	4a13      	ldr	r2, [pc, #76]	; (800209c <HAL_Init+0x6c>)
 800204e:	5cd3      	ldrb	r3, [r2, r3]
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	fa21 f303 	lsr.w	r3, r1, r3
 8002058:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <HAL_Init+0x68>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	4a0e      	ldr	r2, [pc, #56]	; (800209c <HAL_Init+0x6c>)
 8002064:	5cd3      	ldrb	r3, [r2, r3]
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
 8002070:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <HAL_Init+0x70>)
 8002072:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002074:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <HAL_Init+0x74>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800207a:	2000      	movs	r0, #0
 800207c:	f000 f814 	bl	80020a8 <HAL_InitTick>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e002      	b.n	8002090 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800208a:	f7ff f82d 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	58024400 	.word	0x58024400
 800209c:	0800a7ec 	.word	0x0800a7ec
 80020a0:	20000004 	.word	0x20000004
 80020a4:	20000000 	.word	0x20000000

080020a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_InitTick+0x60>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e021      	b.n	8002100 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <HAL_InitTick+0x64>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_InitTick+0x60>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4619      	mov	r1, r3
 80020c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	f001 fc19 	bl	800390a <HAL_SYSTICK_Config>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e00e      	b.n	8002100 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b0f      	cmp	r3, #15
 80020e6:	d80a      	bhi.n	80020fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e8:	2200      	movs	r2, #0
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020f0:	f001 fbf1 	bl	80038d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f4:	4a06      	ldr	r2, [pc, #24]	; (8002110 <HAL_InitTick+0x68>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e000      	b.n	8002100 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	2000000c 	.word	0x2000000c
 800210c:	20000000 	.word	0x20000000
 8002110:	20000008 	.word	0x20000008

08002114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_IncTick+0x20>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_IncTick+0x24>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4413      	add	r3, r2
 8002124:	4a04      	ldr	r2, [pc, #16]	; (8002138 <HAL_IncTick+0x24>)
 8002126:	6013      	str	r3, [r2, #0]
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	2000000c 	.word	0x2000000c
 8002138:	20000768 	.word	0x20000768

0800213c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return uwTick;
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <HAL_GetTick+0x14>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000768 	.word	0x20000768

08002154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff ffee 	bl	800213c <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800216c:	d005      	beq.n	800217a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_Delay+0x40>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800217a:	bf00      	nop
 800217c:	f7ff ffde 	bl	800213c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	429a      	cmp	r2, r3
 800218a:	d8f7      	bhi.n	800217c <HAL_Delay+0x28>
  {
  }
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	2000000c 	.word	0x2000000c

08002198 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <HAL_GetREVID+0x14>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0c1b      	lsrs	r3, r3, #16
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	5c001000 	.word	0x5c001000

080021b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	609a      	str	r2, [r3, #8]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	609a      	str	r2, [r3, #8]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3360      	adds	r3, #96	; 0x60
 800222a:	461a      	mov	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	430b      	orrs	r3, r1
 8002246:	431a      	orrs	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800224c:	bf00      	nop
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	431a      	orrs	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	611a      	str	r2, [r3, #16]
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800228a:	b480      	push	{r7}
 800228c:	b087      	sub	sp, #28
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3360      	adds	r3, #96	; 0x60
 800229a:	461a      	mov	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	431a      	orrs	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	601a      	str	r2, [r3, #0]
  }
}
 80022b4:	bf00      	nop
 80022b6:	371c      	adds	r7, #28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b087      	sub	sp, #28
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3330      	adds	r3, #48	; 0x30
 80022f6:	461a      	mov	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	4413      	add	r3, r2
 8002304:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	211f      	movs	r1, #31
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	401a      	ands	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	0e9b      	lsrs	r3, r3, #26
 800231e:	f003 011f 	and.w	r1, r3, #31
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	431a      	orrs	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002332:	bf00      	nop
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800233e:	b480      	push	{r7}
 8002340:	b087      	sub	sp, #28
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3314      	adds	r3, #20
 800234e:	461a      	mov	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	0e5b      	lsrs	r3, r3, #25
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	4413      	add	r3, r2
 800235c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	0d1b      	lsrs	r3, r3, #20
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	2107      	movs	r1, #7
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	401a      	ands	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	0d1b      	lsrs	r3, r3, #20
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	431a      	orrs	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002388:	bf00      	nop
 800238a:	371c      	adds	r7, #28
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023ac:	43db      	mvns	r3, r3
 80023ae:	401a      	ands	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0318 	and.w	r3, r3, #24
 80023b6:	4908      	ldr	r1, [pc, #32]	; (80023d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023b8:	40d9      	lsrs	r1, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	400b      	ands	r3, r1
 80023be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023c2:	431a      	orrs	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	000fffff 	.word	0x000fffff

080023dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 031f 	and.w	r3, r3, #31
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002422:	4013      	ands	r3, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6093      	str	r3, [r2, #8]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	5fffffc0 	.word	0x5fffffc0

08002438 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800244c:	d101      	bne.n	8002452 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <LL_ADC_EnableInternalRegulator+0x24>)
 800246e:	4013      	ands	r3, r2
 8002470:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	6fffffc0 	.word	0x6fffffc0

08002488 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002498:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800249c:	d101      	bne.n	80024a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <LL_ADC_Enable+0x24>)
 80024be:	4013      	ands	r3, r2
 80024c0:	f043 0201 	orr.w	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	7fffffc0 	.word	0x7fffffc0

080024d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <LL_ADC_IsEnabled+0x18>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <LL_ADC_IsEnabled+0x1a>
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <LL_ADC_REG_StartConversion+0x24>)
 800250e:	4013      	ands	r3, r2
 8002510:	f043 0204 	orr.w	r2, r3, #4
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	7fffffc0 	.word	0x7fffffc0

08002528 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b04      	cmp	r3, #4
 800253a:	d101      	bne.n	8002540 <LL_ADC_REG_IsConversionOngoing+0x18>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b08      	cmp	r3, #8
 8002560:	d101      	bne.n	8002566 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e18e      	b.n	80028ac <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002598:	2b00      	cmp	r3, #0
 800259a:	d109      	bne.n	80025b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7fe f9e7 	bl	8000970 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff3f 	bl	8002438 <LL_ADC_IsDeepPowerDownEnabled>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d004      	beq.n	80025ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff25 	bl	8002414 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ff5a 	bl	8002488 <LL_ADC_IsInternalRegulatorEnabled>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d113      	bne.n	8002602 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ff3e 	bl	8002460 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80025e4:	4b9a      	ldr	r3, [pc, #616]	; (8002850 <HAL_ADC_Init+0x2dc>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	099b      	lsrs	r3, r3, #6
 80025ea:	4a9a      	ldr	r2, [pc, #616]	; (8002854 <HAL_ADC_Init+0x2e0>)
 80025ec:	fba2 2303 	umull	r2, r3, r2, r3
 80025f0:	099b      	lsrs	r3, r3, #6
 80025f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025f4:	e002      	b.n	80025fc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f9      	bne.n	80025f6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff3e 	bl	8002488 <LL_ADC_IsInternalRegulatorEnabled>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10d      	bne.n	800262e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002616:	f043 0210 	orr.w	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	f043 0201 	orr.w	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff ff78 	bl	8002528 <LL_ADC_REG_IsConversionOngoing>
 8002638:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 8129 	bne.w	800289a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f040 8125 	bne.w	800289a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002658:	f043 0202 	orr.w	r2, r3, #2
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff37 	bl	80024d8 <LL_ADC_IsEnabled>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d136      	bne.n	80026de <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a78      	ldr	r2, [pc, #480]	; (8002858 <HAL_ADC_Init+0x2e4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d004      	beq.n	8002684 <HAL_ADC_Init+0x110>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a77      	ldr	r2, [pc, #476]	; (800285c <HAL_ADC_Init+0x2e8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d10e      	bne.n	80026a2 <HAL_ADC_Init+0x12e>
 8002684:	4874      	ldr	r0, [pc, #464]	; (8002858 <HAL_ADC_Init+0x2e4>)
 8002686:	f7ff ff27 	bl	80024d8 <LL_ADC_IsEnabled>
 800268a:	4604      	mov	r4, r0
 800268c:	4873      	ldr	r0, [pc, #460]	; (800285c <HAL_ADC_Init+0x2e8>)
 800268e:	f7ff ff23 	bl	80024d8 <LL_ADC_IsEnabled>
 8002692:	4603      	mov	r3, r0
 8002694:	4323      	orrs	r3, r4
 8002696:	2b00      	cmp	r3, #0
 8002698:	bf0c      	ite	eq
 800269a:	2301      	moveq	r3, #1
 800269c:	2300      	movne	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	e008      	b.n	80026b4 <HAL_ADC_Init+0x140>
 80026a2:	486f      	ldr	r0, [pc, #444]	; (8002860 <HAL_ADC_Init+0x2ec>)
 80026a4:	f7ff ff18 	bl	80024d8 <LL_ADC_IsEnabled>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	bf0c      	ite	eq
 80026ae:	2301      	moveq	r3, #1
 80026b0:	2300      	movne	r3, #0
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d012      	beq.n	80026de <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a66      	ldr	r2, [pc, #408]	; (8002858 <HAL_ADC_Init+0x2e4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d004      	beq.n	80026cc <HAL_ADC_Init+0x158>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a65      	ldr	r2, [pc, #404]	; (800285c <HAL_ADC_Init+0x2e8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d101      	bne.n	80026d0 <HAL_ADC_Init+0x15c>
 80026cc:	4a65      	ldr	r2, [pc, #404]	; (8002864 <HAL_ADC_Init+0x2f0>)
 80026ce:	e000      	b.n	80026d2 <HAL_ADC_Init+0x15e>
 80026d0:	4a65      	ldr	r2, [pc, #404]	; (8002868 <HAL_ADC_Init+0x2f4>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4619      	mov	r1, r3
 80026d8:	4610      	mov	r0, r2
 80026da:	f7ff fd69 	bl	80021b0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80026de:	f7ff fd5b 	bl	8002198 <HAL_GetREVID>
 80026e2:	4602      	mov	r2, r0
 80026e4:	f241 0303 	movw	r3, #4099	; 0x1003
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d914      	bls.n	8002716 <HAL_ADC_Init+0x1a2>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b10      	cmp	r3, #16
 80026f2:	d110      	bne.n	8002716 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7d5b      	ldrb	r3, [r3, #21]
 80026f8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026fe:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002704:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	7f1b      	ldrb	r3, [r3, #28]
 800270a:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800270c:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800270e:	f043 030c 	orr.w	r3, r3, #12
 8002712:	61bb      	str	r3, [r7, #24]
 8002714:	e00d      	b.n	8002732 <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7d5b      	ldrb	r3, [r3, #21]
 800271a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002720:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002726:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7f1b      	ldrb	r3, [r3, #28]
 800272c:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7f1b      	ldrb	r3, [r3, #28]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d106      	bne.n	8002748 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	3b01      	subs	r3, #1
 8002740:	045b      	lsls	r3, r3, #17
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	2b00      	cmp	r3, #0
 800274e:	d009      	beq.n	8002764 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	4b40      	ldr	r3, [pc, #256]	; (800286c <HAL_ADC_Init+0x2f8>)
 800276c:	4013      	ands	r3, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	69b9      	ldr	r1, [r7, #24]
 8002774:	430b      	orrs	r3, r1
 8002776:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fed3 	bl	8002528 <LL_ADC_REG_IsConversionOngoing>
 8002782:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fee0 	bl	800254e <LL_ADC_INJ_IsConversionOngoing>
 800278e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d14a      	bne.n	800282c <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d147      	bne.n	800282c <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7d1b      	ldrb	r3, [r3, #20]
 80027a0:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <HAL_ADC_Init+0x2fc>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	69b9      	ldr	r1, [r7, #24]
 80027ba:	430b      	orrs	r3, r1
 80027bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d11b      	bne.n	8002800 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <HAL_ADC_Init+0x300>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027dc:	3a01      	subs	r2, #1
 80027de:	0411      	lsls	r1, r2, #16
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027e4:	4311      	orrs	r1, r2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027ea:	4311      	orrs	r1, r2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027f0:	430a      	orrs	r2, r1
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0201 	orr.w	r2, r2, #1
 80027fc:	611a      	str	r2, [r3, #16]
 80027fe:	e007      	b.n	8002810 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fda0 	bl	800336c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d121      	bne.n	8002878 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f023 010f 	bic.w	r1, r3, #15
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	1e5a      	subs	r2, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	631a      	str	r2, [r3, #48]	; 0x30
 800284c:	e01c      	b.n	8002888 <HAL_ADC_Init+0x314>
 800284e:	bf00      	nop
 8002850:	20000000 	.word	0x20000000
 8002854:	053e2d63 	.word	0x053e2d63
 8002858:	40022000 	.word	0x40022000
 800285c:	40022100 	.word	0x40022100
 8002860:	58026000 	.word	0x58026000
 8002864:	40022300 	.word	0x40022300
 8002868:	58026300 	.word	0x58026300
 800286c:	fff0c003 	.word	0xfff0c003
 8002870:	ffffbffc 	.word	0xffffbffc
 8002874:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 020f 	bic.w	r2, r2, #15
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288c:	f023 0303 	bic.w	r3, r3, #3
 8002890:	f043 0201 	orr.w	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
 8002898:	e007      	b.n	80028aa <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	f043 0210 	orr.w	r2, r3, #16
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3724      	adds	r7, #36	; 0x24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd90      	pop	{r4, r7, pc}

080028b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a5c      	ldr	r2, [pc, #368]	; (8002a34 <HAL_ADC_Start+0x180>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d004      	beq.n	80028d0 <HAL_ADC_Start+0x1c>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a5b      	ldr	r2, [pc, #364]	; (8002a38 <HAL_ADC_Start+0x184>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_Start+0x20>
 80028d0:	4b5a      	ldr	r3, [pc, #360]	; (8002a3c <HAL_ADC_Start+0x188>)
 80028d2:	e000      	b.n	80028d6 <HAL_ADC_Start+0x22>
 80028d4:	4b5a      	ldr	r3, [pc, #360]	; (8002a40 <HAL_ADC_Start+0x18c>)
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fd80 	bl	80023dc <LL_ADC_GetMultimode>
 80028dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fe20 	bl	8002528 <LL_ADC_REG_IsConversionOngoing>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f040 809a 	bne.w	8002a24 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_Start+0x4a>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e095      	b.n	8002a2a <HAL_ADC_Start+0x176>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fcac 	bl	8003264 <ADC_Enable>
 800290c:	4603      	mov	r3, r0
 800290e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002910:	7dfb      	ldrb	r3, [r7, #23]
 8002912:	2b00      	cmp	r3, #0
 8002914:	f040 8081 	bne.w	8002a1a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800291c:	4b49      	ldr	r3, [pc, #292]	; (8002a44 <HAL_ADC_Start+0x190>)
 800291e:	4013      	ands	r3, r2
 8002920:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a42      	ldr	r2, [pc, #264]	; (8002a38 <HAL_ADC_Start+0x184>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d002      	beq.n	8002938 <HAL_ADC_Start+0x84>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	e000      	b.n	800293a <HAL_ADC_Start+0x86>
 8002938:	4b3e      	ldr	r3, [pc, #248]	; (8002a34 <HAL_ADC_Start+0x180>)
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	4293      	cmp	r3, r2
 8002940:	d002      	beq.n	8002948 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d105      	bne.n	8002954 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800295c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002960:	d106      	bne.n	8002970 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	f023 0206 	bic.w	r2, r3, #6
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	659a      	str	r2, [r3, #88]	; 0x58
 800296e:	e002      	b.n	8002976 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	221c      	movs	r2, #28
 800297c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a2b      	ldr	r2, [pc, #172]	; (8002a38 <HAL_ADC_Start+0x184>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d002      	beq.n	8002996 <HAL_ADC_Start+0xe2>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	e000      	b.n	8002998 <HAL_ADC_Start+0xe4>
 8002996:	4b27      	ldr	r3, [pc, #156]	; (8002a34 <HAL_ADC_Start+0x180>)
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	4293      	cmp	r3, r2
 800299e:	d008      	beq.n	80029b2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d002      	beq.n	80029b2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	2b09      	cmp	r3, #9
 80029b0:	d114      	bne.n	80029dc <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fd93 	bl	8002500 <LL_ADC_REG_StartConversion>
 80029da:	e025      	b.n	8002a28 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a12      	ldr	r2, [pc, #72]	; (8002a38 <HAL_ADC_Start+0x184>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d002      	beq.n	80029f8 <HAL_ADC_Start+0x144>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	e000      	b.n	80029fa <HAL_ADC_Start+0x146>
 80029f8:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <HAL_ADC_Start+0x180>)
 80029fa:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00f      	beq.n	8002a28 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	655a      	str	r2, [r3, #84]	; 0x54
 8002a18:	e006      	b.n	8002a28 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002a22:	e001      	b.n	8002a28 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a24:	2302      	movs	r3, #2
 8002a26:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40022000 	.word	0x40022000
 8002a38:	40022100 	.word	0x40022100
 8002a3c:	40022300 	.word	0x40022300
 8002a40:	58026300 	.word	0x58026300
 8002a44:	fffff0fe 	.word	0xfffff0fe

08002a48 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a6e      	ldr	r2, [pc, #440]	; (8002c10 <HAL_ADC_PollForConversion+0x1c8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d004      	beq.n	8002a66 <HAL_ADC_PollForConversion+0x1e>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a6c      	ldr	r2, [pc, #432]	; (8002c14 <HAL_ADC_PollForConversion+0x1cc>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_PollForConversion+0x22>
 8002a66:	4b6c      	ldr	r3, [pc, #432]	; (8002c18 <HAL_ADC_PollForConversion+0x1d0>)
 8002a68:	e000      	b.n	8002a6c <HAL_ADC_PollForConversion+0x24>
 8002a6a:	4b6c      	ldr	r3, [pc, #432]	; (8002c1c <HAL_ADC_PollForConversion+0x1d4>)
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fcb5 	bl	80023dc <LL_ADC_GetMultimode>
 8002a72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d102      	bne.n	8002a82 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002a7c:	2308      	movs	r3, #8
 8002a7e:	61fb      	str	r3, [r7, #28]
 8002a80:	e037      	b.n	8002af2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2b05      	cmp	r3, #5
 8002a8c:	d002      	beq.n	8002a94 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b09      	cmp	r3, #9
 8002a92:	d111      	bne.n	8002ab8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa6:	f043 0220 	orr.w	r2, r3, #32
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0aa      	b.n	8002c08 <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002ab2:	2304      	movs	r3, #4
 8002ab4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002ab6:	e01c      	b.n	8002af2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a54      	ldr	r2, [pc, #336]	; (8002c10 <HAL_ADC_PollForConversion+0x1c8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d004      	beq.n	8002acc <HAL_ADC_PollForConversion+0x84>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a53      	ldr	r2, [pc, #332]	; (8002c14 <HAL_ADC_PollForConversion+0x1cc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d101      	bne.n	8002ad0 <HAL_ADC_PollForConversion+0x88>
 8002acc:	4b52      	ldr	r3, [pc, #328]	; (8002c18 <HAL_ADC_PollForConversion+0x1d0>)
 8002ace:	e000      	b.n	8002ad2 <HAL_ADC_PollForConversion+0x8a>
 8002ad0:	4b52      	ldr	r3, [pc, #328]	; (8002c1c <HAL_ADC_PollForConversion+0x1d4>)
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fc90 	bl	80023f8 <LL_ADC_GetMultiDMATransfer>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	f043 0220 	orr.w	r2, r3, #32
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e08c      	b.n	8002c08 <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002aee:	2304      	movs	r3, #4
 8002af0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002af2:	f7ff fb23 	bl	800213c <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002af8:	e01a      	b.n	8002b30 <HAL_ADC_PollForConversion+0xe8>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b00:	d016      	beq.n	8002b30 <HAL_ADC_PollForConversion+0xe8>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b02:	f7ff fb1b 	bl	800213c <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d302      	bcc.n	8002b18 <HAL_ADC_PollForConversion+0xd0>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10b      	bne.n	8002b30 <HAL_ADC_PollForConversion+0xe8>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	f043 0204 	orr.w	r2, r3, #4
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e06b      	b.n	8002c08 <HAL_ADC_PollForConversion+0x1c0>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0dd      	beq.n	8002afa <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fbb6 	bl	80022c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d01c      	beq.n	8002b94 <HAL_ADC_PollForConversion+0x14c>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	7d5b      	ldrb	r3, [r3, #21]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d118      	bne.n	8002b94 <HAL_ADC_PollForConversion+0x14c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d111      	bne.n	8002b94 <HAL_ADC_PollForConversion+0x14c>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d105      	bne.n	8002b94 <HAL_ADC_PollForConversion+0x14c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	f043 0201 	orr.w	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a1e      	ldr	r2, [pc, #120]	; (8002c14 <HAL_ADC_PollForConversion+0x1cc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d002      	beq.n	8002ba4 <HAL_ADC_PollForConversion+0x15c>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	e000      	b.n	8002ba6 <HAL_ADC_PollForConversion+0x15e>
 8002ba4:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <HAL_ADC_PollForConversion+0x1c8>)
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d008      	beq.n	8002bc0 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d002      	beq.n	8002bc0 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b09      	cmp	r3, #9
 8002bbe:	d104      	bne.n	8002bca <HAL_ADC_PollForConversion+0x182>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	e00c      	b.n	8002be4 <HAL_ADC_PollForConversion+0x19c>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a11      	ldr	r2, [pc, #68]	; (8002c14 <HAL_ADC_PollForConversion+0x1cc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d002      	beq.n	8002bda <HAL_ADC_PollForConversion+0x192>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	e000      	b.n	8002bdc <HAL_ADC_PollForConversion+0x194>
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <HAL_ADC_PollForConversion+0x1c8>)
 8002bdc:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d104      	bne.n	8002bf4 <HAL_ADC_PollForConversion+0x1ac>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2208      	movs	r2, #8
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	e008      	b.n	8002c06 <HAL_ADC_PollForConversion+0x1be>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d103      	bne.n	8002c06 <HAL_ADC_PollForConversion+0x1be>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	220c      	movs	r2, #12
 8002c04:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3720      	adds	r7, #32
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40022000 	.word	0x40022000
 8002c14:	40022100 	.word	0x40022100
 8002c18:	40022300 	.word	0x40022300
 8002c1c:	58026300 	.word	0x58026300

08002c20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b099      	sub	sp, #100	; 0x64
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4a99      	ldr	r2, [pc, #612]	; (8002ebc <HAL_ADC_ConfigChannel+0x280>)
 8002c56:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x2a>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e2e6      	b.n	8003234 <HAL_ADC_ConfigChannel+0x5f8>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fc58 	bl	8002528 <LL_ADC_REG_IsConversionOngoing>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f040 82cb 	bne.w	8003216 <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d108      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x62>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0e9b      	lsrs	r3, r3, #26
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	2201      	movs	r2, #1
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	e00f      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x82>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	2201      	movs	r2, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	69d1      	ldr	r1, [r2, #28]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f7ff fb04 	bl	80022e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fc20 	bl	8002528 <LL_ADC_REG_IsConversionOngoing>
 8002ce8:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fc2d 	bl	800254e <LL_ADC_INJ_IsConversionOngoing>
 8002cf4:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f040 80b3 	bne.w	8002e64 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f040 80af 	bne.w	8002e64 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6819      	ldr	r1, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	461a      	mov	r2, r3
 8002d14:	f7ff fb13 	bl	800233e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d18:	4b69      	ldr	r3, [pc, #420]	; (8002ec0 <HAL_ADC_ConfigChannel+0x284>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002d20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d24:	d10b      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x102>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	089b      	lsrs	r3, r3, #2
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	e01d      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x13e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x128>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	089b      	lsrs	r3, r3, #2
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	e00a      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x13e>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d027      	beq.n	8002dd4 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	6919      	ldr	r1, [r3, #16]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d92:	f7ff fa41 	bl	8002218 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6919      	ldr	r1, [r3, #16]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	7e5b      	ldrb	r3, [r3, #25]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d102      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x170>
 8002da6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002daa:	e000      	b.n	8002dae <HAL_ADC_ConfigChannel+0x172>
 8002dac:	2300      	movs	r3, #0
 8002dae:	461a      	mov	r2, r3
 8002db0:	f7ff fa6b 	bl	800228a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6919      	ldr	r1, [r3, #16]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	7e1b      	ldrb	r3, [r3, #24]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d102      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x18e>
 8002dc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dc8:	e000      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x190>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f7ff fa43 	bl	8002258 <LL_ADC_SetDataRightShift>
 8002dd2:	e047      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	069b      	lsls	r3, r3, #26
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d107      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002df6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	069b      	lsls	r3, r3, #26
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d107      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e1a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	069b      	lsls	r3, r3, #26
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d107      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e3e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	069b      	lsls	r3, r3, #26
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d107      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e62:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fb35 	bl	80024d8 <LL_ADC_IsEnabled>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f040 81d9 	bne.w	8003228 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6819      	ldr	r1, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	461a      	mov	r2, r3
 8002e84:	f7ff fa86 	bl	8002394 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4a0b      	ldr	r2, [pc, #44]	; (8002ebc <HAL_ADC_ConfigChannel+0x280>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	f040 8101 	bne.w	8003096 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10f      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x288>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	0e9b      	lsrs	r3, r3, #26
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	2b09      	cmp	r3, #9
 8002eb2:	bf94      	ite	ls
 8002eb4:	2301      	movls	r3, #1
 8002eb6:	2300      	movhi	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	e016      	b.n	8002eea <HAL_ADC_ConfigChannel+0x2ae>
 8002ebc:	47ff0000 	.word	0x47ff0000
 8002ec0:	5c001000 	.word	0x5c001000
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	2b09      	cmp	r3, #9
 8002ee2:	bf94      	ite	ls
 8002ee4:	2301      	movls	r3, #1
 8002ee6:	2300      	movhi	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d064      	beq.n	8002fb8 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d107      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x2ce>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	0e9b      	lsrs	r3, r3, #26
 8002f00:	3301      	adds	r3, #1
 8002f02:	069b      	lsls	r3, r3, #26
 8002f04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f08:	e00e      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x2ec>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1a:	fab3 f383 	clz	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	3301      	adds	r3, #1
 8002f22:	069b      	lsls	r3, r3, #26
 8002f24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d109      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x30c>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	0e9b      	lsrs	r3, r3, #26
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	2101      	movs	r1, #1
 8002f42:	fa01 f303 	lsl.w	r3, r1, r3
 8002f46:	e010      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x32e>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	3301      	adds	r3, #1
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	2101      	movs	r1, #1
 8002f66:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6a:	ea42 0103 	orr.w	r1, r2, r3
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10a      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x354>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	0e9b      	lsrs	r3, r3, #26
 8002f80:	3301      	adds	r3, #1
 8002f82:	f003 021f 	and.w	r2, r3, #31
 8002f86:	4613      	mov	r3, r2
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	4413      	add	r3, r2
 8002f8c:	051b      	lsls	r3, r3, #20
 8002f8e:	e011      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x378>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	fa93 f3a3 	rbit	r3, r3
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	f003 021f 	and.w	r2, r3, #31
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	e069      	b.n	800308c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d107      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x398>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	0e9b      	lsrs	r3, r3, #26
 8002fca:	3301      	adds	r3, #1
 8002fcc:	069b      	lsls	r3, r3, #26
 8002fce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fd2:	e00e      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x3b6>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	fa93 f3a3 	rbit	r3, r3
 8002fe0:	61fb      	str	r3, [r7, #28]
  return result;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	069b      	lsls	r3, r3, #26
 8002fee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x3d6>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	0e9b      	lsrs	r3, r3, #26
 8003004:	3301      	adds	r3, #1
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	2101      	movs	r1, #1
 800300c:	fa01 f303 	lsl.w	r3, r1, r3
 8003010:	e010      	b.n	8003034 <HAL_ADC_ConfigChannel+0x3f8>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	617b      	str	r3, [r7, #20]
  return result;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	3301      	adds	r3, #1
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	2101      	movs	r1, #1
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	ea42 0103 	orr.w	r1, r2, r3
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10d      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x424>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	0e9b      	lsrs	r3, r3, #26
 800304a:	3301      	adds	r3, #1
 800304c:	f003 021f 	and.w	r2, r3, #31
 8003050:	4613      	mov	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4413      	add	r3, r2
 8003056:	3b1e      	subs	r3, #30
 8003058:	051b      	lsls	r3, r3, #20
 800305a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800305e:	e014      	b.n	800308a <HAL_ADC_ConfigChannel+0x44e>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	60fb      	str	r3, [r7, #12]
  return result;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	3301      	adds	r3, #1
 8003078:	f003 021f 	and.w	r2, r3, #31
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	3b1e      	subs	r3, #30
 8003084:	051b      	lsls	r3, r3, #20
 8003086:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800308a:	430b      	orrs	r3, r1
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	6892      	ldr	r2, [r2, #8]
 8003090:	4619      	mov	r1, r3
 8003092:	f7ff f954 	bl	800233e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	f280 80c4 	bge.w	8003228 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a65      	ldr	r2, [pc, #404]	; (800323c <HAL_ADC_ConfigChannel+0x600>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d004      	beq.n	80030b4 <HAL_ADC_ConfigChannel+0x478>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a64      	ldr	r2, [pc, #400]	; (8003240 <HAL_ADC_ConfigChannel+0x604>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d101      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x47c>
 80030b4:	4b63      	ldr	r3, [pc, #396]	; (8003244 <HAL_ADC_ConfigChannel+0x608>)
 80030b6:	e000      	b.n	80030ba <HAL_ADC_ConfigChannel+0x47e>
 80030b8:	4b63      	ldr	r3, [pc, #396]	; (8003248 <HAL_ADC_ConfigChannel+0x60c>)
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff f89e 	bl	80021fc <LL_ADC_GetCommonPathInternalCh>
 80030c0:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a5d      	ldr	r2, [pc, #372]	; (800323c <HAL_ADC_ConfigChannel+0x600>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_ADC_ConfigChannel+0x49a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a5b      	ldr	r2, [pc, #364]	; (8003240 <HAL_ADC_ConfigChannel+0x604>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d10e      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x4b8>
 80030d6:	4859      	ldr	r0, [pc, #356]	; (800323c <HAL_ADC_ConfigChannel+0x600>)
 80030d8:	f7ff f9fe 	bl	80024d8 <LL_ADC_IsEnabled>
 80030dc:	4604      	mov	r4, r0
 80030de:	4858      	ldr	r0, [pc, #352]	; (8003240 <HAL_ADC_ConfigChannel+0x604>)
 80030e0:	f7ff f9fa 	bl	80024d8 <LL_ADC_IsEnabled>
 80030e4:	4603      	mov	r3, r0
 80030e6:	4323      	orrs	r3, r4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf0c      	ite	eq
 80030ec:	2301      	moveq	r3, #1
 80030ee:	2300      	movne	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	e008      	b.n	8003106 <HAL_ADC_ConfigChannel+0x4ca>
 80030f4:	4855      	ldr	r0, [pc, #340]	; (800324c <HAL_ADC_ConfigChannel+0x610>)
 80030f6:	f7ff f9ef 	bl	80024d8 <LL_ADC_IsEnabled>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d07b      	beq.n	8003202 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a50      	ldr	r2, [pc, #320]	; (8003250 <HAL_ADC_ConfigChannel+0x614>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d12e      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x536>
 8003114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d129      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a4a      	ldr	r2, [pc, #296]	; (800324c <HAL_ADC_ConfigChannel+0x610>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d17f      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a43      	ldr	r2, [pc, #268]	; (800323c <HAL_ADC_ConfigChannel+0x600>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d004      	beq.n	800313c <HAL_ADC_ConfigChannel+0x500>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a42      	ldr	r2, [pc, #264]	; (8003240 <HAL_ADC_ConfigChannel+0x604>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d101      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x504>
 800313c:	4a41      	ldr	r2, [pc, #260]	; (8003244 <HAL_ADC_ConfigChannel+0x608>)
 800313e:	e000      	b.n	8003142 <HAL_ADC_ConfigChannel+0x506>
 8003140:	4a41      	ldr	r2, [pc, #260]	; (8003248 <HAL_ADC_ConfigChannel+0x60c>)
 8003142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003144:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f7ff f843 	bl	80021d6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003150:	4b40      	ldr	r3, [pc, #256]	; (8003254 <HAL_ADC_ConfigChannel+0x618>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	099b      	lsrs	r3, r3, #6
 8003156:	4a40      	ldr	r2, [pc, #256]	; (8003258 <HAL_ADC_ConfigChannel+0x61c>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	099b      	lsrs	r3, r3, #6
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003162:	e002      	b.n	800316a <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	3b01      	subs	r3, #1
 8003168:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f9      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003170:	e05a      	b.n	8003228 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a39      	ldr	r2, [pc, #228]	; (800325c <HAL_ADC_ConfigChannel+0x620>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d11e      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x57e>
 800317c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800317e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d119      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a30      	ldr	r2, [pc, #192]	; (800324c <HAL_ADC_ConfigChannel+0x610>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d14b      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a29      	ldr	r2, [pc, #164]	; (800323c <HAL_ADC_ConfigChannel+0x600>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d004      	beq.n	80031a4 <HAL_ADC_ConfigChannel+0x568>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a28      	ldr	r2, [pc, #160]	; (8003240 <HAL_ADC_ConfigChannel+0x604>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x56c>
 80031a4:	4a27      	ldr	r2, [pc, #156]	; (8003244 <HAL_ADC_ConfigChannel+0x608>)
 80031a6:	e000      	b.n	80031aa <HAL_ADC_ConfigChannel+0x56e>
 80031a8:	4a27      	ldr	r2, [pc, #156]	; (8003248 <HAL_ADC_ConfigChannel+0x60c>)
 80031aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031b0:	4619      	mov	r1, r3
 80031b2:	4610      	mov	r0, r2
 80031b4:	f7ff f80f 	bl	80021d6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031b8:	e036      	b.n	8003228 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a28      	ldr	r2, [pc, #160]	; (8003260 <HAL_ADC_ConfigChannel+0x624>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d131      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x5ec>
 80031c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d12c      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a1e      	ldr	r2, [pc, #120]	; (800324c <HAL_ADC_ConfigChannel+0x610>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d127      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a17      	ldr	r2, [pc, #92]	; (800323c <HAL_ADC_ConfigChannel+0x600>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d004      	beq.n	80031ec <HAL_ADC_ConfigChannel+0x5b0>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a16      	ldr	r2, [pc, #88]	; (8003240 <HAL_ADC_ConfigChannel+0x604>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d101      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x5b4>
 80031ec:	4a15      	ldr	r2, [pc, #84]	; (8003244 <HAL_ADC_ConfigChannel+0x608>)
 80031ee:	e000      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x5b6>
 80031f0:	4a15      	ldr	r2, [pc, #84]	; (8003248 <HAL_ADC_ConfigChannel+0x60c>)
 80031f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031f8:	4619      	mov	r1, r3
 80031fa:	4610      	mov	r0, r2
 80031fc:	f7fe ffeb 	bl	80021d6 <LL_ADC_SetCommonPathInternalCh>
 8003200:	e012      	b.n	8003228 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003206:	f043 0220 	orr.w	r2, r3, #32
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003214:	e008      	b.n	8003228 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321a:	f043 0220 	orr.w	r2, r3, #32
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003230:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8003234:	4618      	mov	r0, r3
 8003236:	3764      	adds	r7, #100	; 0x64
 8003238:	46bd      	mov	sp, r7
 800323a:	bd90      	pop	{r4, r7, pc}
 800323c:	40022000 	.word	0x40022000
 8003240:	40022100 	.word	0x40022100
 8003244:	40022300 	.word	0x40022300
 8003248:	58026300 	.word	0x58026300
 800324c:	58026000 	.word	0x58026000
 8003250:	cb840000 	.word	0xcb840000
 8003254:	20000000 	.word	0x20000000
 8003258:	053e2d63 	.word	0x053e2d63
 800325c:	c7520000 	.word	0xc7520000
 8003260:	cfb80000 	.word	0xcfb80000

08003264 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff f931 	bl	80024d8 <LL_ADC_IsEnabled>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d167      	bne.n	800334c <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	4b35      	ldr	r3, [pc, #212]	; (8003358 <ADC_Enable+0xf4>)
 8003284:	4013      	ands	r3, r2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00d      	beq.n	80032a6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328e:	f043 0210 	orr.w	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	f043 0201 	orr.w	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e053      	b.n	800334e <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff f900 	bl	80024b0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032b0:	f7fe ff44 	bl	800213c <HAL_GetTick>
 80032b4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a28      	ldr	r2, [pc, #160]	; (800335c <ADC_Enable+0xf8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <ADC_Enable+0x66>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a26      	ldr	r2, [pc, #152]	; (8003360 <ADC_Enable+0xfc>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <ADC_Enable+0x6a>
 80032ca:	4b26      	ldr	r3, [pc, #152]	; (8003364 <ADC_Enable+0x100>)
 80032cc:	e000      	b.n	80032d0 <ADC_Enable+0x6c>
 80032ce:	4b26      	ldr	r3, [pc, #152]	; (8003368 <ADC_Enable+0x104>)
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff f883 	bl	80023dc <LL_ADC_GetMultimode>
 80032d6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a20      	ldr	r2, [pc, #128]	; (8003360 <ADC_Enable+0xfc>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d002      	beq.n	80032e8 <ADC_Enable+0x84>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	e000      	b.n	80032ea <ADC_Enable+0x86>
 80032e8:	4b1c      	ldr	r3, [pc, #112]	; (800335c <ADC_Enable+0xf8>)
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d025      	beq.n	800333e <ADC_Enable+0xda>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d129      	bne.n	800334c <ADC_Enable+0xe8>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032f8:	e021      	b.n	800333e <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff f8ea 	bl	80024d8 <LL_ADC_IsEnabled>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d104      	bne.n	8003314 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff f8ce 	bl	80024b0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003314:	f7fe ff12 	bl	800213c <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d90d      	bls.n	800333e <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003326:	f043 0210 	orr.w	r2, r3, #16
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003332:	f043 0201 	orr.w	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e007      	b.n	800334e <ADC_Enable+0xea>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	d1d6      	bne.n	80032fa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	8000003f 	.word	0x8000003f
 800335c:	40022000 	.word	0x40022000
 8003360:	40022100 	.word	0x40022100
 8003364:	40022300 	.word	0x40022300
 8003368:	58026300 	.word	0x58026300

0800336c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a70      	ldr	r2, [pc, #448]	; (800353c <ADC_ConfigureBoostMode+0x1d0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d004      	beq.n	8003388 <ADC_ConfigureBoostMode+0x1c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a6f      	ldr	r2, [pc, #444]	; (8003540 <ADC_ConfigureBoostMode+0x1d4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d109      	bne.n	800339c <ADC_ConfigureBoostMode+0x30>
 8003388:	4b6e      	ldr	r3, [pc, #440]	; (8003544 <ADC_ConfigureBoostMode+0x1d8>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003390:	2b00      	cmp	r3, #0
 8003392:	bf14      	ite	ne
 8003394:	2301      	movne	r3, #1
 8003396:	2300      	moveq	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	e008      	b.n	80033ae <ADC_ConfigureBoostMode+0x42>
 800339c:	4b6a      	ldr	r3, [pc, #424]	; (8003548 <ADC_ConfigureBoostMode+0x1dc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d01a      	beq.n	80033e8 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80033b2:	f001 fed9 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 80033b6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033c0:	d006      	beq.n	80033d0 <ADC_ConfigureBoostMode+0x64>
 80033c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033c6:	d00b      	beq.n	80033e0 <ADC_ConfigureBoostMode+0x74>
 80033c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033cc:	d000      	beq.n	80033d0 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80033ce:	e05d      	b.n	800348c <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033dc:	60fb      	str	r3, [r7, #12]
        break;
 80033de:	e055      	b.n	800348c <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	089b      	lsrs	r3, r3, #2
 80033e4:	60fb      	str	r3, [r7, #12]
        break;
 80033e6:	e051      	b.n	800348c <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80033e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80033ec:	f002 fe06 	bl	8005ffc <HAL_RCCEx_GetPeriphCLKFreq>
 80033f0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80033fa:	d02a      	beq.n	8003452 <ADC_ConfigureBoostMode+0xe6>
 80033fc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003400:	d813      	bhi.n	800342a <ADC_ConfigureBoostMode+0xbe>
 8003402:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003406:	d024      	beq.n	8003452 <ADC_ConfigureBoostMode+0xe6>
 8003408:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800340c:	d806      	bhi.n	800341c <ADC_ConfigureBoostMode+0xb0>
 800340e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003412:	d01e      	beq.n	8003452 <ADC_ConfigureBoostMode+0xe6>
 8003414:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003418:	d01b      	beq.n	8003452 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 800341a:	e037      	b.n	800348c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 800341c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003420:	d017      	beq.n	8003452 <ADC_ConfigureBoostMode+0xe6>
 8003422:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003426:	d014      	beq.n	8003452 <ADC_ConfigureBoostMode+0xe6>
        break;
 8003428:	e030      	b.n	800348c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 800342a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800342e:	d021      	beq.n	8003474 <ADC_ConfigureBoostMode+0x108>
 8003430:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003434:	d806      	bhi.n	8003444 <ADC_ConfigureBoostMode+0xd8>
 8003436:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800343a:	d013      	beq.n	8003464 <ADC_ConfigureBoostMode+0xf8>
 800343c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003440:	d014      	beq.n	800346c <ADC_ConfigureBoostMode+0x100>
        break;
 8003442:	e023      	b.n	800348c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003444:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003448:	d018      	beq.n	800347c <ADC_ConfigureBoostMode+0x110>
 800344a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800344e:	d019      	beq.n	8003484 <ADC_ConfigureBoostMode+0x118>
        break;
 8003450:	e01c      	b.n	800348c <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	0c9b      	lsrs	r3, r3, #18
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	60fb      	str	r3, [r7, #12]
        break;
 8003462:	e013      	b.n	800348c <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	091b      	lsrs	r3, r3, #4
 8003468:	60fb      	str	r3, [r7, #12]
        break;
 800346a:	e00f      	b.n	800348c <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	60fb      	str	r3, [r7, #12]
        break;
 8003472:	e00b      	b.n	800348c <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	099b      	lsrs	r3, r3, #6
 8003478:	60fb      	str	r3, [r7, #12]
        break;
 800347a:	e007      	b.n	800348c <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	09db      	lsrs	r3, r3, #7
 8003480:	60fb      	str	r3, [r7, #12]
        break;
 8003482:	e003      	b.n	800348c <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	60fb      	str	r3, [r7, #12]
        break;
 800348a:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800348c:	f7fe fe84 	bl	8002198 <HAL_GetREVID>
 8003490:	4602      	mov	r2, r0
 8003492:	f241 0303 	movw	r3, #4099	; 0x1003
 8003496:	429a      	cmp	r2, r3
 8003498:	d815      	bhi.n	80034c6 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4a2b      	ldr	r2, [pc, #172]	; (800354c <ADC_ConfigureBoostMode+0x1e0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d908      	bls.n	80034b4 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80034b2:	e03e      	b.n	8003532 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034c2:	609a      	str	r2, [r3, #8]
}
 80034c4:	e035      	b.n	8003532 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	085b      	lsrs	r3, r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4a20      	ldr	r2, [pc, #128]	; (8003550 <ADC_ConfigureBoostMode+0x1e4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d808      	bhi.n	80034e6 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034e2:	609a      	str	r2, [r3, #8]
}
 80034e4:	e025      	b.n	8003532 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4a1a      	ldr	r2, [pc, #104]	; (8003554 <ADC_ConfigureBoostMode+0x1e8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d80a      	bhi.n	8003504 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003500:	609a      	str	r2, [r3, #8]
}
 8003502:	e016      	b.n	8003532 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a14      	ldr	r2, [pc, #80]	; (8003558 <ADC_ConfigureBoostMode+0x1ec>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d80a      	bhi.n	8003522 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800351e:	609a      	str	r2, [r3, #8]
}
 8003520:	e007      	b.n	8003532 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003530:	609a      	str	r2, [r3, #8]
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40022000 	.word	0x40022000
 8003540:	40022100 	.word	0x40022100
 8003544:	40022300 	.word	0x40022300
 8003548:	58026300 	.word	0x58026300
 800354c:	01312d00 	.word	0x01312d00
 8003550:	005f5e10 	.word	0x005f5e10
 8003554:	00bebc20 	.word	0x00bebc20
 8003558:	017d7840 	.word	0x017d7840

0800355c <LL_ADC_IsEnabled>:
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <LL_ADC_IsEnabled+0x18>
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <LL_ADC_IsEnabled+0x1a>
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <LL_ADC_REG_IsConversionOngoing>:
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b04      	cmp	r3, #4
 8003594:	d101      	bne.n	800359a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80035a8:	b590      	push	{r4, r7, lr}
 80035aa:	b09f      	sub	sp, #124	; 0x7c
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e0ba      	b.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x194>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a5c      	ldr	r2, [pc, #368]	; (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d102      	bne.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80035d8:	4b5b      	ldr	r3, [pc, #364]	; (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	e001      	b.n	80035e2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ec:	f043 0220 	orr.w	r2, r3, #32
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e09d      	b.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff ffbd 	bl	8003582 <LL_ADC_REG_IsConversionOngoing>
 8003608:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff ffb7 	bl	8003582 <LL_ADC_REG_IsConversionOngoing>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d17f      	bne.n	800371a <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800361a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800361c:	2b00      	cmp	r3, #0
 800361e:	d17c      	bne.n	800371a <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a47      	ldr	r2, [pc, #284]	; (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d004      	beq.n	8003634 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a46      	ldr	r2, [pc, #280]	; (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d101      	bne.n	8003638 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8003634:	4b45      	ldr	r3, [pc, #276]	; (800374c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003636:	e000      	b.n	800363a <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003638:	4b45      	ldr	r3, [pc, #276]	; (8003750 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800363a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d039      	beq.n	80036b8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	431a      	orrs	r2, r3
 8003652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003654:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a3a      	ldr	r2, [pc, #232]	; (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d004      	beq.n	800366a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a38      	ldr	r2, [pc, #224]	; (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d10e      	bne.n	8003688 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800366a:	4836      	ldr	r0, [pc, #216]	; (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800366c:	f7ff ff76 	bl	800355c <LL_ADC_IsEnabled>
 8003670:	4604      	mov	r4, r0
 8003672:	4835      	ldr	r0, [pc, #212]	; (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003674:	f7ff ff72 	bl	800355c <LL_ADC_IsEnabled>
 8003678:	4603      	mov	r3, r0
 800367a:	4323      	orrs	r3, r4
 800367c:	2b00      	cmp	r3, #0
 800367e:	bf0c      	ite	eq
 8003680:	2301      	moveq	r3, #1
 8003682:	2300      	movne	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	e008      	b.n	800369a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003688:	4832      	ldr	r0, [pc, #200]	; (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800368a:	f7ff ff67 	bl	800355c <LL_ADC_IsEnabled>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d047      	beq.n	800372e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800369e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	4b2d      	ldr	r3, [pc, #180]	; (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	6811      	ldr	r1, [r2, #0]
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	6892      	ldr	r2, [r2, #8]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	431a      	orrs	r2, r3
 80036b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036b6:	e03a      	b.n	800372e <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80036b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1e      	ldr	r2, [pc, #120]	; (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d004      	beq.n	80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d10e      	bne.n	80036f6 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 80036d8:	481a      	ldr	r0, [pc, #104]	; (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80036da:	f7ff ff3f 	bl	800355c <LL_ADC_IsEnabled>
 80036de:	4604      	mov	r4, r0
 80036e0:	4819      	ldr	r0, [pc, #100]	; (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80036e2:	f7ff ff3b 	bl	800355c <LL_ADC_IsEnabled>
 80036e6:	4603      	mov	r3, r0
 80036e8:	4323      	orrs	r3, r4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	bf0c      	ite	eq
 80036ee:	2301      	moveq	r3, #1
 80036f0:	2300      	movne	r3, #0
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	e008      	b.n	8003708 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 80036f6:	4817      	ldr	r0, [pc, #92]	; (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80036f8:	f7ff ff30 	bl	800355c <LL_ADC_IsEnabled>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bf0c      	ite	eq
 8003702:	2301      	moveq	r3, #1
 8003704:	2300      	movne	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d010      	beq.n	800372e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800370c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	4b11      	ldr	r3, [pc, #68]	; (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003712:	4013      	ands	r3, r2
 8003714:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003716:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003718:	e009      	b.n	800372e <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371e:	f043 0220 	orr.w	r2, r3, #32
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800372c:	e000      	b.n	8003730 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800372e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003738:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800373c:	4618      	mov	r0, r3
 800373e:	377c      	adds	r7, #124	; 0x7c
 8003740:	46bd      	mov	sp, r7
 8003742:	bd90      	pop	{r4, r7, pc}
 8003744:	40022000 	.word	0x40022000
 8003748:	40022100 	.word	0x40022100
 800374c:	40022300 	.word	0x40022300
 8003750:	58026300 	.word	0x58026300
 8003754:	58026000 	.word	0x58026000
 8003758:	fffff0e0 	.word	0xfffff0e0

0800375c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <__NVIC_SetPriorityGrouping+0x40>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003778:	4013      	ands	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003786:	4313      	orrs	r3, r2
 8003788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800378a:	4a04      	ldr	r2, [pc, #16]	; (800379c <__NVIC_SetPriorityGrouping+0x40>)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	60d3      	str	r3, [r2, #12]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000ed00 	.word	0xe000ed00
 80037a0:	05fa0000 	.word	0x05fa0000

080037a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a8:	4b04      	ldr	r3, [pc, #16]	; (80037bc <__NVIC_GetPriorityGrouping+0x18>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	f003 0307 	and.w	r3, r3, #7
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	6039      	str	r1, [r7, #0]
 80037ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	db0a      	blt.n	80037ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	490c      	ldr	r1, [pc, #48]	; (800380c <__NVIC_SetPriority+0x4c>)
 80037da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037de:	0112      	lsls	r2, r2, #4
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	440b      	add	r3, r1
 80037e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e8:	e00a      	b.n	8003800 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	4908      	ldr	r1, [pc, #32]	; (8003810 <__NVIC_SetPriority+0x50>)
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	3b04      	subs	r3, #4
 80037f8:	0112      	lsls	r2, r2, #4
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	440b      	add	r3, r1
 80037fe:	761a      	strb	r2, [r3, #24]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000e100 	.word	0xe000e100
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003814:	b480      	push	{r7}
 8003816:	b089      	sub	sp, #36	; 0x24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f1c3 0307 	rsb	r3, r3, #7
 800382e:	2b04      	cmp	r3, #4
 8003830:	bf28      	it	cs
 8003832:	2304      	movcs	r3, #4
 8003834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3304      	adds	r3, #4
 800383a:	2b06      	cmp	r3, #6
 800383c:	d902      	bls.n	8003844 <NVIC_EncodePriority+0x30>
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3b03      	subs	r3, #3
 8003842:	e000      	b.n	8003846 <NVIC_EncodePriority+0x32>
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43da      	mvns	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	401a      	ands	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800385c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	43d9      	mvns	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800386c:	4313      	orrs	r3, r2
         );
}
 800386e:	4618      	mov	r0, r3
 8003870:	3724      	adds	r7, #36	; 0x24
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800388c:	d301      	bcc.n	8003892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800388e:	2301      	movs	r3, #1
 8003890:	e00f      	b.n	80038b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003892:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <SysTick_Config+0x40>)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3b01      	subs	r3, #1
 8003898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800389a:	210f      	movs	r1, #15
 800389c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038a0:	f7ff ff8e 	bl	80037c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <SysTick_Config+0x40>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038aa:	4b04      	ldr	r3, [pc, #16]	; (80038bc <SysTick_Config+0x40>)
 80038ac:	2207      	movs	r2, #7
 80038ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	e000e010 	.word	0xe000e010

080038c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff ff47 	bl	800375c <__NVIC_SetPriorityGrouping>
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b086      	sub	sp, #24
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038e4:	f7ff ff5e 	bl	80037a4 <__NVIC_GetPriorityGrouping>
 80038e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	6978      	ldr	r0, [r7, #20]
 80038f0:	f7ff ff90 	bl	8003814 <NVIC_EncodePriority>
 80038f4:	4602      	mov	r2, r0
 80038f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038fa:	4611      	mov	r1, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff ff5f 	bl	80037c0 <__NVIC_SetPriority>
}
 8003902:	bf00      	nop
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff ffb2 	bl	800387c <SysTick_Config>
 8003918:	4603      	mov	r3, r0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003924:	b480      	push	{r7}
 8003926:	b089      	sub	sp, #36	; 0x24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003932:	4b89      	ldr	r3, [pc, #548]	; (8003b58 <HAL_GPIO_Init+0x234>)
 8003934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003936:	e194      	b.n	8003c62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	2101      	movs	r1, #1
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	fa01 f303 	lsl.w	r3, r1, r3
 8003944:	4013      	ands	r3, r2
 8003946:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8186 	beq.w	8003c5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d00b      	beq.n	8003970 <HAL_GPIO_Init+0x4c>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d007      	beq.n	8003970 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003964:	2b11      	cmp	r3, #17
 8003966:	d003      	beq.n	8003970 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b12      	cmp	r3, #18
 800396e:	d130      	bne.n	80039d2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039a6:	2201      	movs	r2, #1
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4013      	ands	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	091b      	lsrs	r3, r3, #4
 80039bc:	f003 0201 	and.w	r2, r3, #1
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	2203      	movs	r2, #3
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d003      	beq.n	8003a12 <HAL_GPIO_Init+0xee>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b12      	cmp	r3, #18
 8003a10:	d123      	bne.n	8003a5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	08da      	lsrs	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3208      	adds	r2, #8
 8003a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	220f      	movs	r2, #15
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	08da      	lsrs	r2, r3, #3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3208      	adds	r2, #8
 8003a54:	69b9      	ldr	r1, [r7, #24]
 8003a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	2203      	movs	r2, #3
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f003 0203 	and.w	r2, r3, #3
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 80e0 	beq.w	8003c5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9c:	4b2f      	ldr	r3, [pc, #188]	; (8003b5c <HAL_GPIO_Init+0x238>)
 8003a9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003aa2:	4a2e      	ldr	r2, [pc, #184]	; (8003b5c <HAL_GPIO_Init+0x238>)
 8003aa4:	f043 0302 	orr.w	r3, r3, #2
 8003aa8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003aac:	4b2b      	ldr	r3, [pc, #172]	; (8003b5c <HAL_GPIO_Init+0x238>)
 8003aae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aba:	4a29      	ldr	r2, [pc, #164]	; (8003b60 <HAL_GPIO_Init+0x23c>)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	089b      	lsrs	r3, r3, #2
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	220f      	movs	r2, #15
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a20      	ldr	r2, [pc, #128]	; (8003b64 <HAL_GPIO_Init+0x240>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d052      	beq.n	8003b8c <HAL_GPIO_Init+0x268>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a1f      	ldr	r2, [pc, #124]	; (8003b68 <HAL_GPIO_Init+0x244>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d031      	beq.n	8003b52 <HAL_GPIO_Init+0x22e>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a1e      	ldr	r2, [pc, #120]	; (8003b6c <HAL_GPIO_Init+0x248>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d02b      	beq.n	8003b4e <HAL_GPIO_Init+0x22a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a1d      	ldr	r2, [pc, #116]	; (8003b70 <HAL_GPIO_Init+0x24c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d025      	beq.n	8003b4a <HAL_GPIO_Init+0x226>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <HAL_GPIO_Init+0x250>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01f      	beq.n	8003b46 <HAL_GPIO_Init+0x222>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a1b      	ldr	r2, [pc, #108]	; (8003b78 <HAL_GPIO_Init+0x254>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d019      	beq.n	8003b42 <HAL_GPIO_Init+0x21e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a1a      	ldr	r2, [pc, #104]	; (8003b7c <HAL_GPIO_Init+0x258>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d013      	beq.n	8003b3e <HAL_GPIO_Init+0x21a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a19      	ldr	r2, [pc, #100]	; (8003b80 <HAL_GPIO_Init+0x25c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00d      	beq.n	8003b3a <HAL_GPIO_Init+0x216>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a18      	ldr	r2, [pc, #96]	; (8003b84 <HAL_GPIO_Init+0x260>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d007      	beq.n	8003b36 <HAL_GPIO_Init+0x212>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a17      	ldr	r2, [pc, #92]	; (8003b88 <HAL_GPIO_Init+0x264>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <HAL_GPIO_Init+0x20e>
 8003b2e:	2309      	movs	r3, #9
 8003b30:	e02d      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b32:	230a      	movs	r3, #10
 8003b34:	e02b      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b36:	2308      	movs	r3, #8
 8003b38:	e029      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b3a:	2307      	movs	r3, #7
 8003b3c:	e027      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b3e:	2306      	movs	r3, #6
 8003b40:	e025      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b42:	2305      	movs	r3, #5
 8003b44:	e023      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b46:	2304      	movs	r3, #4
 8003b48:	e021      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e01f      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e01d      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e01b      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b56:	bf00      	nop
 8003b58:	58000080 	.word	0x58000080
 8003b5c:	58024400 	.word	0x58024400
 8003b60:	58000400 	.word	0x58000400
 8003b64:	58020000 	.word	0x58020000
 8003b68:	58020400 	.word	0x58020400
 8003b6c:	58020800 	.word	0x58020800
 8003b70:	58020c00 	.word	0x58020c00
 8003b74:	58021000 	.word	0x58021000
 8003b78:	58021400 	.word	0x58021400
 8003b7c:	58021800 	.word	0x58021800
 8003b80:	58021c00 	.word	0x58021c00
 8003b84:	58022000 	.word	0x58022000
 8003b88:	58022400 	.word	0x58022400
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	f002 0203 	and.w	r2, r2, #3
 8003b94:	0092      	lsls	r2, r2, #2
 8003b96:	4093      	lsls	r3, r2
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b9e:	4938      	ldr	r1, [pc, #224]	; (8003c80 <HAL_GPIO_Init+0x35c>)
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	089b      	lsrs	r3, r3, #2
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	43db      	mvns	r3, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4013      	ands	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003c26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003c54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f47f ae63 	bne.w	8003938 <HAL_GPIO_Init+0x14>
  }
}
 8003c72:	bf00      	nop
 8003c74:	3724      	adds	r7, #36	; 0x24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	58000400 	.word	0x58000400

08003c84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	887b      	ldrh	r3, [r7, #2]
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
 8003ca0:	e001      	b.n	8003ca6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	807b      	strh	r3, [r7, #2]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cc4:	787b      	ldrb	r3, [r7, #1]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cca:	887a      	ldrh	r2, [r7, #2]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003cd0:	e003      	b.n	8003cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003cd2:	887b      	ldrh	r3, [r7, #2]
 8003cd4:	041a      	lsls	r2, r3, #16
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	619a      	str	r2, [r3, #24]
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
	...

08003ce8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003cf0:	4a08      	ldr	r2, [pc, #32]	; (8003d14 <HAL_HSEM_FastTake+0x2c>)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3320      	adds	r3, #32
 8003cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfa:	4a07      	ldr	r2, [pc, #28]	; (8003d18 <HAL_HSEM_FastTake+0x30>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d101      	bne.n	8003d04 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e000      	b.n	8003d06 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	58026400 	.word	0x58026400
 8003d18:	80000300 	.word	0x80000300

08003d1c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003d26:	4906      	ldr	r1, [pc, #24]	; (8003d40 <HAL_HSEM_Release+0x24>)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	58026400 	.word	0x58026400

08003d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e07f      	b.n	8003e56 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fc ffda 	bl	8000d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2224      	movs	r2, #36	; 0x24
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003da4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d107      	bne.n	8003dbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dba:	609a      	str	r2, [r3, #8]
 8003dbc:	e006      	b.n	8003dcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003dca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d104      	bne.n	8003dde <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ddc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6859      	ldr	r1, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <HAL_I2C_Init+0x11c>)
 8003dea:	430b      	orrs	r3, r1
 8003dec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691a      	ldr	r2, [r3, #16]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	ea42 0103 	orr.w	r1, r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	021a      	lsls	r2, r3, #8
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69d9      	ldr	r1, [r3, #28]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1a      	ldr	r2, [r3, #32]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	02008000 	.word	0x02008000

08003e64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d138      	bne.n	8003eec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e032      	b.n	8003eee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2224      	movs	r2, #36	; 0x24
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0201 	bic.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003eb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6819      	ldr	r1, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e000      	b.n	8003eee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
  }
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b085      	sub	sp, #20
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d139      	bne.n	8003f84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e033      	b.n	8003f86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2224      	movs	r2, #36	; 0x24
 8003f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0201 	bic.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	021b      	lsls	r3, r3, #8
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	e000      	b.n	8003f86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f84:	2302      	movs	r3, #2
  }
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f94:	b08f      	sub	sp, #60	; 0x3c
 8003f96:	af0a      	add	r7, sp, #40	; 0x28
 8003f98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e116      	b.n	80041d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fd fc42 	bl	8001848 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f005 f89e 	bl	8009124 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	603b      	str	r3, [r7, #0]
 8003fee:	687e      	ldr	r6, [r7, #4]
 8003ff0:	466d      	mov	r5, sp
 8003ff2:	f106 0410 	add.w	r4, r6, #16
 8003ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ffe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004002:	e885 0003 	stmia.w	r5, {r0, r1}
 8004006:	1d33      	adds	r3, r6, #4
 8004008:	cb0e      	ldmia	r3, {r1, r2, r3}
 800400a:	6838      	ldr	r0, [r7, #0]
 800400c:	f005 f828 	bl	8009060 <USB_CoreInit>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2202      	movs	r2, #2
 800401a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e0d7      	b.n	80041d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f005 f88c 	bl	8009146 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800402e:	2300      	movs	r3, #0
 8004030:	73fb      	strb	r3, [r7, #15]
 8004032:	e04a      	b.n	80040ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004034:	7bfa      	ldrb	r2, [r7, #15]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	333d      	adds	r3, #61	; 0x3d
 8004044:	2201      	movs	r2, #1
 8004046:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004048:	7bfa      	ldrb	r2, [r7, #15]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	333c      	adds	r3, #60	; 0x3c
 8004058:	7bfa      	ldrb	r2, [r7, #15]
 800405a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800405c:	7bfa      	ldrb	r2, [r7, #15]
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	b298      	uxth	r0, r3
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	1a9b      	subs	r3, r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	3342      	adds	r3, #66	; 0x42
 8004070:	4602      	mov	r2, r0
 8004072:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004074:	7bfa      	ldrb	r2, [r7, #15]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	333f      	adds	r3, #63	; 0x3f
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004088:	7bfa      	ldrb	r2, [r7, #15]
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	3344      	adds	r3, #68	; 0x44
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800409c:	7bfa      	ldrb	r2, [r7, #15]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	3348      	adds	r3, #72	; 0x48
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040b0:	7bfa      	ldrb	r2, [r7, #15]
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	3350      	adds	r3, #80	; 0x50
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	3301      	adds	r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
 80040ca:	7bfa      	ldrb	r2, [r7, #15]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d3af      	bcc.n	8004034 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040d4:	2300      	movs	r3, #0
 80040d6:	73fb      	strb	r3, [r7, #15]
 80040d8:	e044      	b.n	8004164 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040da:	7bfa      	ldrb	r2, [r7, #15]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80040ec:	2200      	movs	r2, #0
 80040ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040f0:	7bfa      	ldrb	r2, [r7, #15]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004102:	7bfa      	ldrb	r2, [r7, #15]
 8004104:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004106:	7bfa      	ldrb	r2, [r7, #15]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800411c:	7bfa      	ldrb	r2, [r7, #15]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004132:	7bfa      	ldrb	r2, [r7, #15]
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004148:	7bfa      	ldrb	r2, [r7, #15]
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	3301      	adds	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
 8004164:	7bfa      	ldrb	r2, [r7, #15]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	429a      	cmp	r2, r3
 800416c:	d3b5      	bcc.n	80040da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	687e      	ldr	r6, [r7, #4]
 8004176:	466d      	mov	r5, sp
 8004178:	f106 0410 	add.w	r4, r6, #16
 800417c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800417e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004184:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004188:	e885 0003 	stmia.w	r5, {r0, r1}
 800418c:	1d33      	adds	r3, r6, #4
 800418e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004190:	6838      	ldr	r0, [r7, #0]
 8004192:	f005 f803 	bl	800919c <USB_DevInit>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e014      	b.n	80041d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d102      	bne.n	80041c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f80b 	bl	80041dc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f005 f9a5 	bl	800951a <USB_DevDisconnect>

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080041dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800420a:	4b05      	ldr	r3, [pc, #20]	; (8004220 <HAL_PCDEx_ActivateLPM+0x44>)
 800420c:	4313      	orrs	r3, r2
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	10000003 	.word	0x10000003

08004224 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800422c:	4b29      	ldr	r3, [pc, #164]	; (80042d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	2b06      	cmp	r3, #6
 8004236:	d00a      	beq.n	800424e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004238:	4b26      	ldr	r3, [pc, #152]	; (80042d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	429a      	cmp	r2, r3
 8004244:	d001      	beq.n	800424a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e040      	b.n	80042cc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	e03e      	b.n	80042cc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800424e:	4b21      	ldr	r3, [pc, #132]	; (80042d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004256:	491f      	ldr	r1, [pc, #124]	; (80042d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4313      	orrs	r3, r2
 800425c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800425e:	f7fd ff6d 	bl	800213c <HAL_GetTick>
 8004262:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004264:	e009      	b.n	800427a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004266:	f7fd ff69 	bl	800213c <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004274:	d901      	bls.n	800427a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e028      	b.n	80042cc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800427a:	4b16      	ldr	r3, [pc, #88]	; (80042d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004286:	d1ee      	bne.n	8004266 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b1e      	cmp	r3, #30
 800428c:	d008      	beq.n	80042a0 <HAL_PWREx_ConfigSupply+0x7c>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b2e      	cmp	r3, #46	; 0x2e
 8004292:	d005      	beq.n	80042a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b1d      	cmp	r3, #29
 8004298:	d002      	beq.n	80042a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b2d      	cmp	r3, #45	; 0x2d
 800429e:	d114      	bne.n	80042ca <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80042a0:	f7fd ff4c 	bl	800213c <HAL_GetTick>
 80042a4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80042a6:	e009      	b.n	80042bc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80042a8:	f7fd ff48 	bl	800213c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042b6:	d901      	bls.n	80042bc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e007      	b.n	80042cc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_PWREx_ConfigSupply+0xb0>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c8:	d1ee      	bne.n	80042a8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	58024800 	.word	0x58024800

080042d8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a04      	ldr	r2, [pc, #16]	; (80042f4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80042e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042e6:	60d3      	str	r3, [r2, #12]
}
 80042e8:	bf00      	nop
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	58024800 	.word	0x58024800

080042f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08c      	sub	sp, #48	; 0x30
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e3ff      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 8087 	beq.w	8004426 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004318:	4b99      	ldr	r3, [pc, #612]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004320:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004322:	4b97      	ldr	r3, [pc, #604]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432a:	2b10      	cmp	r3, #16
 800432c:	d007      	beq.n	800433e <HAL_RCC_OscConfig+0x46>
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	2b18      	cmp	r3, #24
 8004332:	d110      	bne.n	8004356 <HAL_RCC_OscConfig+0x5e>
 8004334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d10b      	bne.n	8004356 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800433e:	4b90      	ldr	r3, [pc, #576]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d06c      	beq.n	8004424 <HAL_RCC_OscConfig+0x12c>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d168      	bne.n	8004424 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e3d9      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800435e:	d106      	bne.n	800436e <HAL_RCC_OscConfig+0x76>
 8004360:	4b87      	ldr	r3, [pc, #540]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a86      	ldr	r2, [pc, #536]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 8004366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	e02e      	b.n	80043cc <HAL_RCC_OscConfig+0xd4>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10c      	bne.n	8004390 <HAL_RCC_OscConfig+0x98>
 8004376:	4b82      	ldr	r3, [pc, #520]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a81      	ldr	r2, [pc, #516]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 800437c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	4b7f      	ldr	r3, [pc, #508]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a7e      	ldr	r2, [pc, #504]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 8004388:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	e01d      	b.n	80043cc <HAL_RCC_OscConfig+0xd4>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004398:	d10c      	bne.n	80043b4 <HAL_RCC_OscConfig+0xbc>
 800439a:	4b79      	ldr	r3, [pc, #484]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a78      	ldr	r2, [pc, #480]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 80043a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	4b76      	ldr	r3, [pc, #472]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a75      	ldr	r2, [pc, #468]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 80043ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	e00b      	b.n	80043cc <HAL_RCC_OscConfig+0xd4>
 80043b4:	4b72      	ldr	r3, [pc, #456]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a71      	ldr	r2, [pc, #452]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 80043ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	4b6f      	ldr	r3, [pc, #444]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a6e      	ldr	r2, [pc, #440]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 80043c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d013      	beq.n	80043fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d4:	f7fd feb2 	bl	800213c <HAL_GetTick>
 80043d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043dc:	f7fd feae 	bl	800213c <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b64      	cmp	r3, #100	; 0x64
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e38d      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043ee:	4b64      	ldr	r3, [pc, #400]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0xe4>
 80043fa:	e014      	b.n	8004426 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fd fe9e 	bl	800213c <HAL_GetTick>
 8004400:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004404:	f7fd fe9a 	bl	800213c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b64      	cmp	r3, #100	; 0x64
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e379      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004416:	4b5a      	ldr	r3, [pc, #360]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x10c>
 8004422:	e000      	b.n	8004426 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 80ae 	beq.w	8004590 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004434:	4b52      	ldr	r3, [pc, #328]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800443c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800443e:	4b50      	ldr	r3, [pc, #320]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 8004440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004442:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d007      	beq.n	800445a <HAL_RCC_OscConfig+0x162>
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	2b18      	cmp	r3, #24
 800444e:	d13a      	bne.n	80044c6 <HAL_RCC_OscConfig+0x1ce>
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d135      	bne.n	80044c6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800445a:	4b49      	ldr	r3, [pc, #292]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_RCC_OscConfig+0x17a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e34b      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004472:	f7fd fe91 	bl	8002198 <HAL_GetREVID>
 8004476:	4602      	mov	r2, r0
 8004478:	f241 0303 	movw	r3, #4099	; 0x1003
 800447c:	429a      	cmp	r2, r3
 800447e:	d817      	bhi.n	80044b0 <HAL_RCC_OscConfig+0x1b8>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	2b40      	cmp	r3, #64	; 0x40
 8004486:	d108      	bne.n	800449a <HAL_RCC_OscConfig+0x1a2>
 8004488:	4b3d      	ldr	r3, [pc, #244]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004490:	4a3b      	ldr	r2, [pc, #236]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 8004492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004496:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004498:	e07a      	b.n	8004590 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449a:	4b39      	ldr	r3, [pc, #228]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	031b      	lsls	r3, r3, #12
 80044a8:	4935      	ldr	r1, [pc, #212]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ae:	e06f      	b.n	8004590 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b0:	4b33      	ldr	r3, [pc, #204]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	061b      	lsls	r3, r3, #24
 80044be:	4930      	ldr	r1, [pc, #192]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044c4:	e064      	b.n	8004590 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d045      	beq.n	800455a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044ce:	4b2c      	ldr	r3, [pc, #176]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f023 0219 	bic.w	r2, r3, #25
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	4929      	ldr	r1, [pc, #164]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fd fe2c 	bl	800213c <HAL_GetTick>
 80044e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044e8:	f7fd fe28 	bl	800213c <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e307      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044fa:	4b21      	ldr	r3, [pc, #132]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f0      	beq.n	80044e8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004506:	f7fd fe47 	bl	8002198 <HAL_GetREVID>
 800450a:	4602      	mov	r2, r0
 800450c:	f241 0303 	movw	r3, #4099	; 0x1003
 8004510:	429a      	cmp	r2, r3
 8004512:	d817      	bhi.n	8004544 <HAL_RCC_OscConfig+0x24c>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	d108      	bne.n	800452e <HAL_RCC_OscConfig+0x236>
 800451c:	4b18      	ldr	r3, [pc, #96]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004524:	4a16      	ldr	r2, [pc, #88]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 8004526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800452a:	6053      	str	r3, [r2, #4]
 800452c:	e030      	b.n	8004590 <HAL_RCC_OscConfig+0x298>
 800452e:	4b14      	ldr	r3, [pc, #80]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	031b      	lsls	r3, r3, #12
 800453c:	4910      	ldr	r1, [pc, #64]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 800453e:	4313      	orrs	r3, r2
 8004540:	604b      	str	r3, [r1, #4]
 8004542:	e025      	b.n	8004590 <HAL_RCC_OscConfig+0x298>
 8004544:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	061b      	lsls	r3, r3, #24
 8004552:	490b      	ldr	r1, [pc, #44]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 8004554:	4313      	orrs	r3, r2
 8004556:	604b      	str	r3, [r1, #4]
 8004558:	e01a      	b.n	8004590 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800455a:	4b09      	ldr	r3, [pc, #36]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a08      	ldr	r2, [pc, #32]	; (8004580 <HAL_RCC_OscConfig+0x288>)
 8004560:	f023 0301 	bic.w	r3, r3, #1
 8004564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004566:	f7fd fde9 	bl	800213c <HAL_GetTick>
 800456a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800456c:	e00a      	b.n	8004584 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800456e:	f7fd fde5 	bl	800213c <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d903      	bls.n	8004584 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e2c4      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
 8004580:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004584:	4ba4      	ldr	r3, [pc, #656]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1ee      	bne.n	800456e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80a9 	beq.w	80046f0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800459e:	4b9e      	ldr	r3, [pc, #632]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045a8:	4b9b      	ldr	r3, [pc, #620]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d007      	beq.n	80045c4 <HAL_RCC_OscConfig+0x2cc>
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	2b18      	cmp	r3, #24
 80045b8:	d13a      	bne.n	8004630 <HAL_RCC_OscConfig+0x338>
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d135      	bne.n	8004630 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045c4:	4b94      	ldr	r3, [pc, #592]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_RCC_OscConfig+0x2e4>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	2b80      	cmp	r3, #128	; 0x80
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e296      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045dc:	f7fd fddc 	bl	8002198 <HAL_GetREVID>
 80045e0:	4602      	mov	r2, r0
 80045e2:	f241 0303 	movw	r3, #4099	; 0x1003
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d817      	bhi.n	800461a <HAL_RCC_OscConfig+0x322>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d108      	bne.n	8004604 <HAL_RCC_OscConfig+0x30c>
 80045f2:	4b89      	ldr	r3, [pc, #548]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80045fa:	4a87      	ldr	r2, [pc, #540]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 80045fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004600:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004602:	e075      	b.n	80046f0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004604:	4b84      	ldr	r3, [pc, #528]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	069b      	lsls	r3, r3, #26
 8004612:	4981      	ldr	r1, [pc, #516]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 8004614:	4313      	orrs	r3, r2
 8004616:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004618:	e06a      	b.n	80046f0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800461a:	4b7f      	ldr	r3, [pc, #508]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	061b      	lsls	r3, r3, #24
 8004628:	497b      	ldr	r1, [pc, #492]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 800462a:	4313      	orrs	r3, r2
 800462c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800462e:	e05f      	b.n	80046f0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d042      	beq.n	80046be <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004638:	4b77      	ldr	r3, [pc, #476]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a76      	ldr	r2, [pc, #472]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 800463e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fd fd7a 	bl	800213c <HAL_GetTick>
 8004648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800464c:	f7fd fd76 	bl	800213c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e255      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800465e:	4b6e      	ldr	r3, [pc, #440]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800466a:	f7fd fd95 	bl	8002198 <HAL_GetREVID>
 800466e:	4602      	mov	r2, r0
 8004670:	f241 0303 	movw	r3, #4099	; 0x1003
 8004674:	429a      	cmp	r2, r3
 8004676:	d817      	bhi.n	80046a8 <HAL_RCC_OscConfig+0x3b0>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	2b20      	cmp	r3, #32
 800467e:	d108      	bne.n	8004692 <HAL_RCC_OscConfig+0x39a>
 8004680:	4b65      	ldr	r3, [pc, #404]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004688:	4a63      	ldr	r2, [pc, #396]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 800468a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800468e:	6053      	str	r3, [r2, #4]
 8004690:	e02e      	b.n	80046f0 <HAL_RCC_OscConfig+0x3f8>
 8004692:	4b61      	ldr	r3, [pc, #388]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	069b      	lsls	r3, r3, #26
 80046a0:	495d      	ldr	r1, [pc, #372]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	604b      	str	r3, [r1, #4]
 80046a6:	e023      	b.n	80046f0 <HAL_RCC_OscConfig+0x3f8>
 80046a8:	4b5b      	ldr	r3, [pc, #364]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	061b      	lsls	r3, r3, #24
 80046b6:	4958      	ldr	r1, [pc, #352]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60cb      	str	r3, [r1, #12]
 80046bc:	e018      	b.n	80046f0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80046be:	4b56      	ldr	r3, [pc, #344]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a55      	ldr	r2, [pc, #340]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 80046c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fd fd37 	bl	800213c <HAL_GetTick>
 80046ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80046d2:	f7fd fd33 	bl	800213c <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e212      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046e4:	4b4c      	ldr	r3, [pc, #304]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f0      	bne.n	80046d2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d036      	beq.n	800476a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d019      	beq.n	8004738 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004704:	4b44      	ldr	r3, [pc, #272]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 8004706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004708:	4a43      	ldr	r2, [pc, #268]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fd fd14 	bl	800213c <HAL_GetTick>
 8004714:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004718:	f7fd fd10 	bl	800213c <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e1ef      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800472a:	4b3b      	ldr	r3, [pc, #236]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 800472c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0x420>
 8004736:	e018      	b.n	800476a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004738:	4b37      	ldr	r3, [pc, #220]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 800473a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473c:	4a36      	ldr	r2, [pc, #216]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 800473e:	f023 0301 	bic.w	r3, r3, #1
 8004742:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004744:	f7fd fcfa 	bl	800213c <HAL_GetTick>
 8004748:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800474c:	f7fd fcf6 	bl	800213c <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e1d5      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800475e:	4b2e      	ldr	r3, [pc, #184]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 8004760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d036      	beq.n	80047e4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d019      	beq.n	80047b2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800477e:	4b26      	ldr	r3, [pc, #152]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a25      	ldr	r2, [pc, #148]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 8004784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004788:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800478a:	f7fd fcd7 	bl	800213c <HAL_GetTick>
 800478e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004792:	f7fd fcd3 	bl	800213c <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e1b2      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80047a4:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x49a>
 80047b0:	e018      	b.n	80047e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047b2:	4b19      	ldr	r3, [pc, #100]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a18      	ldr	r2, [pc, #96]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 80047b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80047be:	f7fd fcbd 	bl	800213c <HAL_GetTick>
 80047c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80047c6:	f7fd fcb9 	bl	800213c <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e198      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <HAL_RCC_OscConfig+0x520>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1f0      	bne.n	80047c6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 8085 	beq.w	80048fc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047f2:	4b0a      	ldr	r3, [pc, #40]	; (800481c <HAL_RCC_OscConfig+0x524>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a09      	ldr	r2, [pc, #36]	; (800481c <HAL_RCC_OscConfig+0x524>)
 80047f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047fe:	f7fd fc9d 	bl	800213c <HAL_GetTick>
 8004802:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004804:	e00c      	b.n	8004820 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004806:	f7fd fc99 	bl	800213c <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b64      	cmp	r3, #100	; 0x64
 8004812:	d905      	bls.n	8004820 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e178      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
 8004818:	58024400 	.word	0x58024400
 800481c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004820:	4b96      	ldr	r3, [pc, #600]	; (8004a7c <HAL_RCC_OscConfig+0x784>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0ec      	beq.n	8004806 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d106      	bne.n	8004842 <HAL_RCC_OscConfig+0x54a>
 8004834:	4b92      	ldr	r3, [pc, #584]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004838:	4a91      	ldr	r2, [pc, #580]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	6713      	str	r3, [r2, #112]	; 0x70
 8004840:	e02d      	b.n	800489e <HAL_RCC_OscConfig+0x5a6>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10c      	bne.n	8004864 <HAL_RCC_OscConfig+0x56c>
 800484a:	4b8d      	ldr	r3, [pc, #564]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	4a8c      	ldr	r2, [pc, #560]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004850:	f023 0301 	bic.w	r3, r3, #1
 8004854:	6713      	str	r3, [r2, #112]	; 0x70
 8004856:	4b8a      	ldr	r3, [pc, #552]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	4a89      	ldr	r2, [pc, #548]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 800485c:	f023 0304 	bic.w	r3, r3, #4
 8004860:	6713      	str	r3, [r2, #112]	; 0x70
 8004862:	e01c      	b.n	800489e <HAL_RCC_OscConfig+0x5a6>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2b05      	cmp	r3, #5
 800486a:	d10c      	bne.n	8004886 <HAL_RCC_OscConfig+0x58e>
 800486c:	4b84      	ldr	r3, [pc, #528]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004870:	4a83      	ldr	r2, [pc, #524]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004872:	f043 0304 	orr.w	r3, r3, #4
 8004876:	6713      	str	r3, [r2, #112]	; 0x70
 8004878:	4b81      	ldr	r3, [pc, #516]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	4a80      	ldr	r2, [pc, #512]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	6713      	str	r3, [r2, #112]	; 0x70
 8004884:	e00b      	b.n	800489e <HAL_RCC_OscConfig+0x5a6>
 8004886:	4b7e      	ldr	r3, [pc, #504]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488a:	4a7d      	ldr	r2, [pc, #500]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 800488c:	f023 0301 	bic.w	r3, r3, #1
 8004890:	6713      	str	r3, [r2, #112]	; 0x70
 8004892:	4b7b      	ldr	r3, [pc, #492]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004896:	4a7a      	ldr	r2, [pc, #488]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004898:	f023 0304 	bic.w	r3, r3, #4
 800489c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d015      	beq.n	80048d2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a6:	f7fd fc49 	bl	800213c <HAL_GetTick>
 80048aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048ac:	e00a      	b.n	80048c4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ae:	f7fd fc45 	bl	800213c <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048bc:	4293      	cmp	r3, r2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e122      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048c4:	4b6e      	ldr	r3, [pc, #440]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0ee      	beq.n	80048ae <HAL_RCC_OscConfig+0x5b6>
 80048d0:	e014      	b.n	80048fc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d2:	f7fd fc33 	bl	800213c <HAL_GetTick>
 80048d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048d8:	e00a      	b.n	80048f0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048da:	f7fd fc2f 	bl	800213c <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e10c      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048f0:	4b63      	ldr	r3, [pc, #396]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 80048f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1ee      	bne.n	80048da <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 8101 	beq.w	8004b08 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004906:	4b5e      	ldr	r3, [pc, #376]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800490e:	2b18      	cmp	r3, #24
 8004910:	f000 80bc 	beq.w	8004a8c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	2b02      	cmp	r3, #2
 800491a:	f040 8095 	bne.w	8004a48 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800491e:	4b58      	ldr	r3, [pc, #352]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a57      	ldr	r2, [pc, #348]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004924:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492a:	f7fd fc07 	bl	800213c <HAL_GetTick>
 800492e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004932:	f7fd fc03 	bl	800213c <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e0e2      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004944:	4b4e      	ldr	r3, [pc, #312]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f0      	bne.n	8004932 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004950:	4b4b      	ldr	r3, [pc, #300]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004954:	4b4b      	ldr	r3, [pc, #300]	; (8004a84 <HAL_RCC_OscConfig+0x78c>)
 8004956:	4013      	ands	r3, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004960:	0112      	lsls	r2, r2, #4
 8004962:	430a      	orrs	r2, r1
 8004964:	4946      	ldr	r1, [pc, #280]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004966:	4313      	orrs	r3, r2
 8004968:	628b      	str	r3, [r1, #40]	; 0x28
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	3b01      	subs	r3, #1
 8004970:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	3b01      	subs	r3, #1
 800497a:	025b      	lsls	r3, r3, #9
 800497c:	b29b      	uxth	r3, r3
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	3b01      	subs	r3, #1
 8004986:	041b      	lsls	r3, r3, #16
 8004988:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004992:	3b01      	subs	r3, #1
 8004994:	061b      	lsls	r3, r3, #24
 8004996:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800499a:	4939      	ldr	r1, [pc, #228]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 800499c:	4313      	orrs	r3, r2
 800499e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80049a0:	4b37      	ldr	r3, [pc, #220]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	4a36      	ldr	r2, [pc, #216]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80049ac:	4b34      	ldr	r3, [pc, #208]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 80049ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b0:	4b35      	ldr	r3, [pc, #212]	; (8004a88 <HAL_RCC_OscConfig+0x790>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80049b8:	00d2      	lsls	r2, r2, #3
 80049ba:	4931      	ldr	r1, [pc, #196]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80049c0:	4b2f      	ldr	r3, [pc, #188]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	f023 020c 	bic.w	r2, r3, #12
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	492c      	ldr	r1, [pc, #176]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80049d2:	4b2b      	ldr	r3, [pc, #172]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	f023 0202 	bic.w	r2, r3, #2
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	4928      	ldr	r1, [pc, #160]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049e4:	4b26      	ldr	r3, [pc, #152]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	4a25      	ldr	r2, [pc, #148]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 80049ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f0:	4b23      	ldr	r3, [pc, #140]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	4a22      	ldr	r2, [pc, #136]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 80049f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80049fc:	4b20      	ldr	r3, [pc, #128]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	4a1f      	ldr	r2, [pc, #124]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004a02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004a08:	4b1d      	ldr	r3, [pc, #116]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	4a1c      	ldr	r2, [pc, #112]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a14:	4b1a      	ldr	r3, [pc, #104]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a19      	ldr	r2, [pc, #100]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a20:	f7fd fb8c 	bl	800213c <HAL_GetTick>
 8004a24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a28:	f7fd fb88 	bl	800213c <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e067      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a3a:	4b11      	ldr	r3, [pc, #68]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCC_OscConfig+0x730>
 8004a46:	e05f      	b.n	8004b08 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a48:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a0c      	ldr	r2, [pc, #48]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fd fb72 	bl	800213c <HAL_GetTick>
 8004a58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a5c:	f7fd fb6e 	bl	800213c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e04d      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a6e:	4b04      	ldr	r3, [pc, #16]	; (8004a80 <HAL_RCC_OscConfig+0x788>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x764>
 8004a7a:	e045      	b.n	8004b08 <HAL_RCC_OscConfig+0x810>
 8004a7c:	58024800 	.word	0x58024800
 8004a80:	58024400 	.word	0x58024400
 8004a84:	fffffc0c 	.word	0xfffffc0c
 8004a88:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a8c:	4b21      	ldr	r3, [pc, #132]	; (8004b14 <HAL_RCC_OscConfig+0x81c>)
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a92:	4b20      	ldr	r3, [pc, #128]	; (8004b14 <HAL_RCC_OscConfig+0x81c>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d031      	beq.n	8004b04 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f003 0203 	and.w	r2, r3, #3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d12a      	bne.n	8004b04 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	091b      	lsrs	r3, r3, #4
 8004ab2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d122      	bne.n	8004b04 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d11a      	bne.n	8004b04 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	0a5b      	lsrs	r3, r3, #9
 8004ad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ada:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d111      	bne.n	8004b04 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	0c1b      	lsrs	r3, r3, #16
 8004ae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d108      	bne.n	8004b04 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	0e1b      	lsrs	r3, r3, #24
 8004af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d001      	beq.n	8004b08 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e000      	b.n	8004b0a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3730      	adds	r7, #48	; 0x30
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	58024400 	.word	0x58024400

08004b18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e19c      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b2c:	4b8a      	ldr	r3, [pc, #552]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 030f 	and.w	r3, r3, #15
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d910      	bls.n	8004b5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3a:	4b87      	ldr	r3, [pc, #540]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f023 020f 	bic.w	r2, r3, #15
 8004b42:	4985      	ldr	r1, [pc, #532]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4a:	4b83      	ldr	r3, [pc, #524]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e184      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d010      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	4b7b      	ldr	r3, [pc, #492]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d908      	bls.n	8004b8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b78:	4b78      	ldr	r3, [pc, #480]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	4975      	ldr	r1, [pc, #468]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d010      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	4b70      	ldr	r3, [pc, #448]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d908      	bls.n	8004bb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ba6:	4b6d      	ldr	r3, [pc, #436]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	496a      	ldr	r1, [pc, #424]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d010      	beq.n	8004be6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699a      	ldr	r2, [r3, #24]
 8004bc8:	4b64      	ldr	r3, [pc, #400]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d908      	bls.n	8004be6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004bd4:	4b61      	ldr	r3, [pc, #388]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	495e      	ldr	r1, [pc, #376]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d010      	beq.n	8004c14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69da      	ldr	r2, [r3, #28]
 8004bf6:	4b59      	ldr	r3, [pc, #356]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d908      	bls.n	8004c14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c02:	4b56      	ldr	r3, [pc, #344]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	4953      	ldr	r1, [pc, #332]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d010      	beq.n	8004c42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	4b4d      	ldr	r3, [pc, #308]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d908      	bls.n	8004c42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c30:	4b4a      	ldr	r3, [pc, #296]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f023 020f 	bic.w	r2, r3, #15
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4947      	ldr	r1, [pc, #284]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d055      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c4e:	4b43      	ldr	r3, [pc, #268]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	4940      	ldr	r1, [pc, #256]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d107      	bne.n	8004c78 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c68:	4b3c      	ldr	r3, [pc, #240]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d121      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e0f6      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d107      	bne.n	8004c90 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c80:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d115      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0ea      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d107      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c98:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d109      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e0de      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ca8:	4b2c      	ldr	r3, [pc, #176]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0d6      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cb8:	4b28      	ldr	r3, [pc, #160]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	f023 0207 	bic.w	r2, r3, #7
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	4925      	ldr	r1, [pc, #148]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cca:	f7fd fa37 	bl	800213c <HAL_GetTick>
 8004cce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd0:	e00a      	b.n	8004ce8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd2:	f7fd fa33 	bl	800213c <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e0be      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce8:	4b1c      	ldr	r3, [pc, #112]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d1eb      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d010      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d208      	bcs.n	8004d28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d16:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f023 020f 	bic.w	r2, r3, #15
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	490e      	ldr	r1, [pc, #56]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d214      	bcs.n	8004d60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d36:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 020f 	bic.w	r2, r3, #15
 8004d3e:	4906      	ldr	r1, [pc, #24]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d46:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d005      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e086      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
 8004d58:	52002000 	.word	0x52002000
 8004d5c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d010      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	4b3f      	ldr	r3, [pc, #252]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d208      	bcs.n	8004d8e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d7c:	4b3c      	ldr	r3, [pc, #240]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	4939      	ldr	r1, [pc, #228]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d010      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695a      	ldr	r2, [r3, #20]
 8004d9e:	4b34      	ldr	r3, [pc, #208]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d208      	bcs.n	8004dbc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004daa:	4b31      	ldr	r3, [pc, #196]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	492e      	ldr	r1, [pc, #184]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d010      	beq.n	8004dea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699a      	ldr	r2, [r3, #24]
 8004dcc:	4b28      	ldr	r3, [pc, #160]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d208      	bcs.n	8004dea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004dd8:	4b25      	ldr	r3, [pc, #148]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	4922      	ldr	r1, [pc, #136]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d010      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69da      	ldr	r2, [r3, #28]
 8004dfa:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d208      	bcs.n	8004e18 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004e06:	4b1a      	ldr	r3, [pc, #104]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	4917      	ldr	r1, [pc, #92]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e18:	f000 f834 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004e1c:	4601      	mov	r1, r0
 8004e1e:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	0a1b      	lsrs	r3, r3, #8
 8004e24:	f003 030f 	and.w	r3, r3, #15
 8004e28:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <HAL_RCC_ClockConfig+0x35c>)
 8004e2a:	5cd3      	ldrb	r3, [r2, r3]
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	fa21 f303 	lsr.w	r3, r1, r3
 8004e34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e36:	4b0e      	ldr	r3, [pc, #56]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	4a0d      	ldr	r2, [pc, #52]	; (8004e74 <HAL_RCC_ClockConfig+0x35c>)
 8004e40:	5cd3      	ldrb	r3, [r2, r3]
 8004e42:	f003 031f 	and.w	r3, r3, #31
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4c:	4a0a      	ldr	r2, [pc, #40]	; (8004e78 <HAL_RCC_ClockConfig+0x360>)
 8004e4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e50:	4a0a      	ldr	r2, [pc, #40]	; (8004e7c <HAL_RCC_ClockConfig+0x364>)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <HAL_RCC_ClockConfig+0x368>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fd f924 	bl	80020a8 <HAL_InitTick>
 8004e60:	4603      	mov	r3, r0
 8004e62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	58024400 	.word	0x58024400
 8004e74:	0800a7ec 	.word	0x0800a7ec
 8004e78:	20000004 	.word	0x20000004
 8004e7c:	20000000 	.word	0x20000000
 8004e80:	20000008 	.word	0x20000008

08004e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b089      	sub	sp, #36	; 0x24
 8004e88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e8a:	4baf      	ldr	r3, [pc, #700]	; (8005148 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e92:	2b18      	cmp	r3, #24
 8004e94:	f200 814e 	bhi.w	8005134 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004e98:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9e:	bf00      	nop
 8004ea0:	08004f05 	.word	0x08004f05
 8004ea4:	08005135 	.word	0x08005135
 8004ea8:	08005135 	.word	0x08005135
 8004eac:	08005135 	.word	0x08005135
 8004eb0:	08005135 	.word	0x08005135
 8004eb4:	08005135 	.word	0x08005135
 8004eb8:	08005135 	.word	0x08005135
 8004ebc:	08005135 	.word	0x08005135
 8004ec0:	08004f2b 	.word	0x08004f2b
 8004ec4:	08005135 	.word	0x08005135
 8004ec8:	08005135 	.word	0x08005135
 8004ecc:	08005135 	.word	0x08005135
 8004ed0:	08005135 	.word	0x08005135
 8004ed4:	08005135 	.word	0x08005135
 8004ed8:	08005135 	.word	0x08005135
 8004edc:	08005135 	.word	0x08005135
 8004ee0:	08004f31 	.word	0x08004f31
 8004ee4:	08005135 	.word	0x08005135
 8004ee8:	08005135 	.word	0x08005135
 8004eec:	08005135 	.word	0x08005135
 8004ef0:	08005135 	.word	0x08005135
 8004ef4:	08005135 	.word	0x08005135
 8004ef8:	08005135 	.word	0x08005135
 8004efc:	08005135 	.word	0x08005135
 8004f00:	08004f37 	.word	0x08004f37
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f04:	4b90      	ldr	r3, [pc, #576]	; (8005148 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d009      	beq.n	8004f24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f10:	4b8d      	ldr	r3, [pc, #564]	; (8005148 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	08db      	lsrs	r3, r3, #3
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	4a8c      	ldr	r2, [pc, #560]	; (800514c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004f22:	e10a      	b.n	800513a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f24:	4b89      	ldr	r3, [pc, #548]	; (800514c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004f26:	61bb      	str	r3, [r7, #24]
    break;
 8004f28:	e107      	b.n	800513a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004f2a:	4b89      	ldr	r3, [pc, #548]	; (8005150 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004f2c:	61bb      	str	r3, [r7, #24]
    break;
 8004f2e:	e104      	b.n	800513a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004f30:	4b88      	ldr	r3, [pc, #544]	; (8005154 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004f32:	61bb      	str	r3, [r7, #24]
    break;
 8004f34:	e101      	b.n	800513a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f36:	4b84      	ldr	r3, [pc, #528]	; (8005148 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004f40:	4b81      	ldr	r3, [pc, #516]	; (8005148 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	091b      	lsrs	r3, r3, #4
 8004f46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f4a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f4c:	4b7e      	ldr	r3, [pc, #504]	; (8005148 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004f56:	4b7c      	ldr	r3, [pc, #496]	; (8005148 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5a:	08db      	lsrs	r3, r3, #3
 8004f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	fb02 f303 	mul.w	r3, r2, r3
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80da 	beq.w	800512e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d05a      	beq.n	8005036 <HAL_RCC_GetSysClockFreq+0x1b2>
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d302      	bcc.n	8004f8a <HAL_RCC_GetSysClockFreq+0x106>
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d078      	beq.n	800507a <HAL_RCC_GetSysClockFreq+0x1f6>
 8004f88:	e099      	b.n	80050be <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f8a:	4b6f      	ldr	r3, [pc, #444]	; (8005148 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d02d      	beq.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f96:	4b6c      	ldr	r3, [pc, #432]	; (8005148 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	08db      	lsrs	r3, r3, #3
 8004f9c:	f003 0303 	and.w	r3, r3, #3
 8004fa0:	4a6a      	ldr	r2, [pc, #424]	; (800514c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	ee07 3a90 	vmov	s15, r3
 8004fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fc0:	4b61      	ldr	r3, [pc, #388]	; (8005148 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc8:	ee07 3a90 	vmov	s15, r3
 8004fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fd0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fd4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005158 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004fd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004ff0:	e087      	b.n	8005102 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	ee07 3a90 	vmov	s15, r3
 8004ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffc:	eddf 6a57 	vldr	s13, [pc, #348]	; 800515c <HAL_RCC_GetSysClockFreq+0x2d8>
 8005000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005004:	4b50      	ldr	r3, [pc, #320]	; (8005148 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800500c:	ee07 3a90 	vmov	s15, r3
 8005010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005014:	ed97 6a02 	vldr	s12, [r7, #8]
 8005018:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005158 <HAL_RCC_GetSysClockFreq+0x2d4>
 800501c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005020:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005024:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005028:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800502c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005030:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005034:	e065      	b.n	8005102 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	ee07 3a90 	vmov	s15, r3
 800503c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005040:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005160 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005048:	4b3f      	ldr	r3, [pc, #252]	; (8005148 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005050:	ee07 3a90 	vmov	s15, r3
 8005054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005058:	ed97 6a02 	vldr	s12, [r7, #8]
 800505c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005158 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005060:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005064:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800506c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005074:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005078:	e043      	b.n	8005102 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	ee07 3a90 	vmov	s15, r3
 8005080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005084:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005164 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800508c:	4b2e      	ldr	r3, [pc, #184]	; (8005148 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005094:	ee07 3a90 	vmov	s15, r3
 8005098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800509c:	ed97 6a02 	vldr	s12, [r7, #8]
 80050a0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005158 <HAL_RCC_GetSysClockFreq+0x2d4>
 80050a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050bc:	e021      	b.n	8005102 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	ee07 3a90 	vmov	s15, r3
 80050c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005160 <HAL_RCC_GetSysClockFreq+0x2dc>
 80050cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d0:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d8:	ee07 3a90 	vmov	s15, r3
 80050dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80050e4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005158 <HAL_RCC_GetSysClockFreq+0x2d4>
 80050e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005100:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005102:	4b11      	ldr	r3, [pc, #68]	; (8005148 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	0a5b      	lsrs	r3, r3, #9
 8005108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800510c:	3301      	adds	r3, #1
 800510e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800511a:	edd7 6a07 	vldr	s13, [r7, #28]
 800511e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005126:	ee17 3a90 	vmov	r3, s15
 800512a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800512c:	e005      	b.n	800513a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	61bb      	str	r3, [r7, #24]
    break;
 8005132:	e002      	b.n	800513a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005134:	4b06      	ldr	r3, [pc, #24]	; (8005150 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005136:	61bb      	str	r3, [r7, #24]
    break;
 8005138:	bf00      	nop
  }

  return sysclockfreq;
 800513a:	69bb      	ldr	r3, [r7, #24]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3724      	adds	r7, #36	; 0x24
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	58024400 	.word	0x58024400
 800514c:	03d09000 	.word	0x03d09000
 8005150:	003d0900 	.word	0x003d0900
 8005154:	007a1200 	.word	0x007a1200
 8005158:	46000000 	.word	0x46000000
 800515c:	4c742400 	.word	0x4c742400
 8005160:	4a742400 	.word	0x4a742400
 8005164:	4af42400 	.word	0x4af42400

08005168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800516e:	f7ff fe89 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8005172:	4601      	mov	r1, r0
 8005174:	4b10      	ldr	r3, [pc, #64]	; (80051b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	0a1b      	lsrs	r3, r3, #8
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	4a0f      	ldr	r2, [pc, #60]	; (80051bc <HAL_RCC_GetHCLKFreq+0x54>)
 8005180:	5cd3      	ldrb	r3, [r2, r3]
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	fa21 f303 	lsr.w	r3, r1, r3
 800518a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800518c:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f003 030f 	and.w	r3, r3, #15
 8005194:	4a09      	ldr	r2, [pc, #36]	; (80051bc <HAL_RCC_GetHCLKFreq+0x54>)
 8005196:	5cd3      	ldrb	r3, [r2, r3]
 8005198:	f003 031f 	and.w	r3, r3, #31
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	fa22 f303 	lsr.w	r3, r2, r3
 80051a2:	4a07      	ldr	r2, [pc, #28]	; (80051c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80051a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051a6:	4a07      	ldr	r2, [pc, #28]	; (80051c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80051ac:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80051ae:	681b      	ldr	r3, [r3, #0]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	58024400 	.word	0x58024400
 80051bc:	0800a7ec 	.word	0x0800a7ec
 80051c0:	20000004 	.word	0x20000004
 80051c4:	20000000 	.word	0x20000000

080051c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80051cc:	f7ff ffcc 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 80051d0:	4601      	mov	r1, r0
 80051d2:	4b06      	ldr	r3, [pc, #24]	; (80051ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	091b      	lsrs	r3, r3, #4
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	4a04      	ldr	r2, [pc, #16]	; (80051f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051de:	5cd3      	ldrb	r3, [r2, r3]
 80051e0:	f003 031f 	and.w	r3, r3, #31
 80051e4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	58024400 	.word	0x58024400
 80051f0:	0800a7ec 	.word	0x0800a7ec

080051f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80051f8:	f7ff ffb6 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 80051fc:	4601      	mov	r1, r0
 80051fe:	4b06      	ldr	r3, [pc, #24]	; (8005218 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	0a1b      	lsrs	r3, r3, #8
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	4a04      	ldr	r2, [pc, #16]	; (800521c <HAL_RCC_GetPCLK2Freq+0x28>)
 800520a:	5cd3      	ldrb	r3, [r2, r3]
 800520c:	f003 031f 	and.w	r3, r3, #31
 8005210:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005214:	4618      	mov	r0, r3
 8005216:	bd80      	pop	{r7, pc}
 8005218:	58024400 	.word	0x58024400
 800521c:	0800a7ec 	.word	0x0800a7ec

08005220 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005228:	2300      	movs	r3, #0
 800522a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800522c:	2300      	movs	r3, #0
 800522e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d03d      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005244:	d013      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800524a:	d802      	bhi.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800524c:	2b00      	cmp	r3, #0
 800524e:	d007      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005250:	e01f      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005256:	d013      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005258:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800525c:	d01c      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800525e:	e018      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005260:	4baf      	ldr	r3, [pc, #700]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	4aae      	ldr	r2, [pc, #696]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800526a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800526c:	e015      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3304      	adds	r3, #4
 8005272:	2102      	movs	r1, #2
 8005274:	4618      	mov	r0, r3
 8005276:	f001 fd33 	bl	8006ce0 <RCCEx_PLL2_Config>
 800527a:	4603      	mov	r3, r0
 800527c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800527e:	e00c      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3324      	adds	r3, #36	; 0x24
 8005284:	2102      	movs	r1, #2
 8005286:	4618      	mov	r0, r3
 8005288:	f001 fddc 	bl	8006e44 <RCCEx_PLL3_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005290:	e003      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	75fb      	strb	r3, [r7, #23]
      break;
 8005296:	e000      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800529a:	7dfb      	ldrb	r3, [r7, #23]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d109      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80052a0:	4b9f      	ldr	r3, [pc, #636]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052ac:	499c      	ldr	r1, [pc, #624]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	650b      	str	r3, [r1, #80]	; 0x50
 80052b2:	e001      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
 80052b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d03d      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c8:	2b04      	cmp	r3, #4
 80052ca:	d826      	bhi.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80052cc:	a201      	add	r2, pc, #4	; (adr r2, 80052d4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80052ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d2:	bf00      	nop
 80052d4:	080052e9 	.word	0x080052e9
 80052d8:	080052f7 	.word	0x080052f7
 80052dc:	08005309 	.word	0x08005309
 80052e0:	08005321 	.word	0x08005321
 80052e4:	08005321 	.word	0x08005321
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e8:	4b8d      	ldr	r3, [pc, #564]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	4a8c      	ldr	r2, [pc, #560]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052f4:	e015      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3304      	adds	r3, #4
 80052fa:	2100      	movs	r1, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f001 fcef 	bl	8006ce0 <RCCEx_PLL2_Config>
 8005302:	4603      	mov	r3, r0
 8005304:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005306:	e00c      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3324      	adds	r3, #36	; 0x24
 800530c:	2100      	movs	r1, #0
 800530e:	4618      	mov	r0, r3
 8005310:	f001 fd98 	bl	8006e44 <RCCEx_PLL3_Config>
 8005314:	4603      	mov	r3, r0
 8005316:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005318:	e003      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	75fb      	strb	r3, [r7, #23]
      break;
 800531e:	e000      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8005320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005322:	7dfb      	ldrb	r3, [r7, #23]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d109      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005328:	4b7d      	ldr	r3, [pc, #500]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800532a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532c:	f023 0207 	bic.w	r2, r3, #7
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005334:	497a      	ldr	r1, [pc, #488]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005336:	4313      	orrs	r3, r2
 8005338:	650b      	str	r3, [r1, #80]	; 0x50
 800533a:	e001      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533c:	7dfb      	ldrb	r3, [r7, #23]
 800533e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005348:	2b00      	cmp	r3, #0
 800534a:	d03e      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005350:	2b80      	cmp	r3, #128	; 0x80
 8005352:	d01c      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005354:	2b80      	cmp	r3, #128	; 0x80
 8005356:	d804      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005358:	2b00      	cmp	r3, #0
 800535a:	d008      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800535c:	2b40      	cmp	r3, #64	; 0x40
 800535e:	d00d      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005360:	e01e      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005362:	2bc0      	cmp	r3, #192	; 0xc0
 8005364:	d01f      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800536a:	d01e      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800536c:	e018      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800536e:	4b6c      	ldr	r3, [pc, #432]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	4a6b      	ldr	r2, [pc, #428]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005378:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800537a:	e017      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3304      	adds	r3, #4
 8005380:	2100      	movs	r1, #0
 8005382:	4618      	mov	r0, r3
 8005384:	f001 fcac 	bl	8006ce0 <RCCEx_PLL2_Config>
 8005388:	4603      	mov	r3, r0
 800538a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800538c:	e00e      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3324      	adds	r3, #36	; 0x24
 8005392:	2100      	movs	r1, #0
 8005394:	4618      	mov	r0, r3
 8005396:	f001 fd55 	bl	8006e44 <RCCEx_PLL3_Config>
 800539a:	4603      	mov	r3, r0
 800539c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800539e:	e005      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	75fb      	strb	r3, [r7, #23]
      break;
 80053a4:	e002      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80053a6:	bf00      	nop
 80053a8:	e000      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80053aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d109      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80053b2:	4b5b      	ldr	r3, [pc, #364]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053be:	4958      	ldr	r1, [pc, #352]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	650b      	str	r3, [r1, #80]	; 0x50
 80053c4:	e001      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c6:	7dfb      	ldrb	r3, [r7, #23]
 80053c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d044      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053e0:	d01f      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80053e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053e6:	d805      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053f0:	d00e      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80053f2:	e01f      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80053f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053f8:	d01f      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80053fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053fe:	d01e      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005400:	e018      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005402:	4b47      	ldr	r3, [pc, #284]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	4a46      	ldr	r2, [pc, #280]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800540c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800540e:	e017      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3304      	adds	r3, #4
 8005414:	2100      	movs	r1, #0
 8005416:	4618      	mov	r0, r3
 8005418:	f001 fc62 	bl	8006ce0 <RCCEx_PLL2_Config>
 800541c:	4603      	mov	r3, r0
 800541e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005420:	e00e      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3324      	adds	r3, #36	; 0x24
 8005426:	2100      	movs	r1, #0
 8005428:	4618      	mov	r0, r3
 800542a:	f001 fd0b 	bl	8006e44 <RCCEx_PLL3_Config>
 800542e:	4603      	mov	r3, r0
 8005430:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005432:	e005      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	75fb      	strb	r3, [r7, #23]
      break;
 8005438:	e002      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800543a:	bf00      	nop
 800543c:	e000      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800543e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005440:	7dfb      	ldrb	r3, [r7, #23]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005446:	4b36      	ldr	r3, [pc, #216]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800544a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005454:	4932      	ldr	r1, [pc, #200]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005456:	4313      	orrs	r3, r2
 8005458:	658b      	str	r3, [r1, #88]	; 0x58
 800545a:	e001      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545c:	7dfb      	ldrb	r3, [r7, #23]
 800545e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005468:	2b00      	cmp	r3, #0
 800546a:	d044      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005472:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005476:	d01f      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800547c:	d805      	bhi.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005482:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005486:	d00e      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005488:	e01f      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800548a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800548e:	d01f      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005490:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005494:	d01e      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005496:	e018      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005498:	4b21      	ldr	r3, [pc, #132]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	4a20      	ldr	r2, [pc, #128]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800549e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054a4:	e017      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3304      	adds	r3, #4
 80054aa:	2100      	movs	r1, #0
 80054ac:	4618      	mov	r0, r3
 80054ae:	f001 fc17 	bl	8006ce0 <RCCEx_PLL2_Config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80054b6:	e00e      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3324      	adds	r3, #36	; 0x24
 80054bc:	2100      	movs	r1, #0
 80054be:	4618      	mov	r0, r3
 80054c0:	f001 fcc0 	bl	8006e44 <RCCEx_PLL3_Config>
 80054c4:	4603      	mov	r3, r0
 80054c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054c8:	e005      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	75fb      	strb	r3, [r7, #23]
      break;
 80054ce:	e002      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80054d0:	bf00      	nop
 80054d2:	e000      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80054d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054d6:	7dfb      	ldrb	r3, [r7, #23]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10a      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80054dc:	4b10      	ldr	r3, [pc, #64]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80054de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054ea:	490d      	ldr	r1, [pc, #52]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	658b      	str	r3, [r1, #88]	; 0x58
 80054f0:	e001      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
 80054f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d035      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005506:	2b10      	cmp	r3, #16
 8005508:	d00c      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800550a:	2b10      	cmp	r3, #16
 800550c:	d802      	bhi.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800550e:	2b00      	cmp	r3, #0
 8005510:	d01b      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005512:	e017      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005514:	2b20      	cmp	r3, #32
 8005516:	d00c      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005518:	2b30      	cmp	r3, #48	; 0x30
 800551a:	d018      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800551c:	e012      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800551e:	bf00      	nop
 8005520:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005524:	4baf      	ldr	r3, [pc, #700]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	4aae      	ldr	r2, [pc, #696]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800552a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800552e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005530:	e00e      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3304      	adds	r3, #4
 8005536:	2102      	movs	r1, #2
 8005538:	4618      	mov	r0, r3
 800553a:	f001 fbd1 	bl	8006ce0 <RCCEx_PLL2_Config>
 800553e:	4603      	mov	r3, r0
 8005540:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005542:	e005      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	75fb      	strb	r3, [r7, #23]
      break;
 8005548:	e002      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800554a:	bf00      	nop
 800554c:	e000      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800554e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005550:	7dfb      	ldrb	r3, [r7, #23]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d109      	bne.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005556:	4ba3      	ldr	r3, [pc, #652]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005562:	49a0      	ldr	r1, [pc, #640]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005564:	4313      	orrs	r3, r2
 8005566:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005568:	e001      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556a:	7dfb      	ldrb	r3, [r7, #23]
 800556c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d042      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800557e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005582:	d01f      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005588:	d805      	bhi.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800558e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005592:	d00e      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005594:	e01f      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005596:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800559a:	d01f      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800559c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055a0:	d01e      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80055a2:	e018      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a4:	4b8f      	ldr	r3, [pc, #572]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	4a8e      	ldr	r2, [pc, #568]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80055b0:	e017      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3304      	adds	r3, #4
 80055b6:	2100      	movs	r1, #0
 80055b8:	4618      	mov	r0, r3
 80055ba:	f001 fb91 	bl	8006ce0 <RCCEx_PLL2_Config>
 80055be:	4603      	mov	r3, r0
 80055c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80055c2:	e00e      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3324      	adds	r3, #36	; 0x24
 80055c8:	2100      	movs	r1, #0
 80055ca:	4618      	mov	r0, r3
 80055cc:	f001 fc3a 	bl	8006e44 <RCCEx_PLL3_Config>
 80055d0:	4603      	mov	r3, r0
 80055d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80055d4:	e005      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	75fb      	strb	r3, [r7, #23]
      break;
 80055da:	e002      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80055dc:	bf00      	nop
 80055de:	e000      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80055e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055e2:	7dfb      	ldrb	r3, [r7, #23]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d109      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80055e8:	4b7e      	ldr	r3, [pc, #504]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f4:	497b      	ldr	r1, [pc, #492]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	650b      	str	r3, [r1, #80]	; 0x50
 80055fa:	e001      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fc:	7dfb      	ldrb	r3, [r7, #23]
 80055fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d042      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005614:	d01b      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800561a:	d805      	bhi.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d022      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005624:	d00a      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005626:	e01b      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005628:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800562c:	d01d      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800562e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005632:	d01c      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005634:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005638:	d01b      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800563a:	e011      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	3304      	adds	r3, #4
 8005640:	2101      	movs	r1, #1
 8005642:	4618      	mov	r0, r3
 8005644:	f001 fb4c 	bl	8006ce0 <RCCEx_PLL2_Config>
 8005648:	4603      	mov	r3, r0
 800564a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800564c:	e012      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3324      	adds	r3, #36	; 0x24
 8005652:	2101      	movs	r1, #1
 8005654:	4618      	mov	r0, r3
 8005656:	f001 fbf5 	bl	8006e44 <RCCEx_PLL3_Config>
 800565a:	4603      	mov	r3, r0
 800565c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800565e:	e009      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	75fb      	strb	r3, [r7, #23]
      break;
 8005664:	e006      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005666:	bf00      	nop
 8005668:	e004      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800566a:	bf00      	nop
 800566c:	e002      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800566e:	bf00      	nop
 8005670:	e000      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005674:	7dfb      	ldrb	r3, [r7, #23]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d109      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800567a:	4b5a      	ldr	r3, [pc, #360]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800567c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005686:	4957      	ldr	r1, [pc, #348]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005688:	4313      	orrs	r3, r2
 800568a:	650b      	str	r3, [r1, #80]	; 0x50
 800568c:	e001      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568e:	7dfb      	ldrb	r3, [r7, #23]
 8005690:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d044      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80056a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056a8:	d01b      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80056aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056ae:	d805      	bhi.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d022      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80056b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056b8:	d00a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80056ba:	e01b      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80056bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c0:	d01d      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80056c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056c6:	d01c      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80056c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056cc:	d01b      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80056ce:	e011      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3304      	adds	r3, #4
 80056d4:	2101      	movs	r1, #1
 80056d6:	4618      	mov	r0, r3
 80056d8:	f001 fb02 	bl	8006ce0 <RCCEx_PLL2_Config>
 80056dc:	4603      	mov	r3, r0
 80056de:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80056e0:	e012      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3324      	adds	r3, #36	; 0x24
 80056e6:	2101      	movs	r1, #1
 80056e8:	4618      	mov	r0, r3
 80056ea:	f001 fbab 	bl	8006e44 <RCCEx_PLL3_Config>
 80056ee:	4603      	mov	r3, r0
 80056f0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80056f2:	e009      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	75fb      	strb	r3, [r7, #23]
      break;
 80056f8:	e006      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80056fa:	bf00      	nop
 80056fc:	e004      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80056fe:	bf00      	nop
 8005700:	e002      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005702:	bf00      	nop
 8005704:	e000      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005708:	7dfb      	ldrb	r3, [r7, #23]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800570e:	4b35      	ldr	r3, [pc, #212]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005712:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800571c:	4931      	ldr	r1, [pc, #196]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800571e:	4313      	orrs	r3, r2
 8005720:	658b      	str	r3, [r1, #88]	; 0x58
 8005722:	e001      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005724:	7dfb      	ldrb	r3, [r7, #23]
 8005726:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d02d      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800573c:	d005      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800573e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005742:	d009      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005744:	2b00      	cmp	r3, #0
 8005746:	d013      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005748:	e00f      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800574a:	4b26      	ldr	r3, [pc, #152]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	4a25      	ldr	r2, [pc, #148]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005754:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005756:	e00c      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3304      	adds	r3, #4
 800575c:	2101      	movs	r1, #1
 800575e:	4618      	mov	r0, r3
 8005760:	f001 fabe 	bl	8006ce0 <RCCEx_PLL2_Config>
 8005764:	4603      	mov	r3, r0
 8005766:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005768:	e003      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	75fb      	strb	r3, [r7, #23]
      break;
 800576e:	e000      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d109      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005778:	4b1a      	ldr	r3, [pc, #104]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800577a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005784:	4917      	ldr	r1, [pc, #92]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005786:	4313      	orrs	r3, r2
 8005788:	650b      	str	r3, [r1, #80]	; 0x50
 800578a:	e001      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800578c:	7dfb      	ldrb	r3, [r7, #23]
 800578e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d035      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d81b      	bhi.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80057a4:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	080057e9 	.word	0x080057e9
 80057b0:	080057bd 	.word	0x080057bd
 80057b4:	080057cb 	.word	0x080057cb
 80057b8:	080057e9 	.word	0x080057e9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057bc:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	4a08      	ldr	r2, [pc, #32]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80057c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80057c8:	e00f      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3304      	adds	r3, #4
 80057ce:	2102      	movs	r1, #2
 80057d0:	4618      	mov	r0, r3
 80057d2:	f001 fa85 	bl	8006ce0 <RCCEx_PLL2_Config>
 80057d6:	4603      	mov	r3, r0
 80057d8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80057da:	e006      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	75fb      	strb	r3, [r7, #23]
      break;
 80057e0:	e003      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80057e2:	bf00      	nop
 80057e4:	58024400 	.word	0x58024400
      break;
 80057e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057ea:	7dfb      	ldrb	r3, [r7, #23]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d109      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80057f0:	4bba      	ldr	r3, [pc, #744]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f4:	f023 0203 	bic.w	r2, r3, #3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fc:	49b7      	ldr	r1, [pc, #732]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005802:	e001      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005804:	7dfb      	ldrb	r3, [r7, #23]
 8005806:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 8086 	beq.w	8005922 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005816:	4bb2      	ldr	r3, [pc, #712]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4ab1      	ldr	r2, [pc, #708]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800581c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005820:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005822:	f7fc fc8b 	bl	800213c <HAL_GetTick>
 8005826:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005828:	e009      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800582a:	f7fc fc87 	bl	800213c <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b64      	cmp	r3, #100	; 0x64
 8005836:	d902      	bls.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	75fb      	strb	r3, [r7, #23]
        break;
 800583c:	e005      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800583e:	4ba8      	ldr	r3, [pc, #672]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0ef      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800584a:	7dfb      	ldrb	r3, [r7, #23]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d166      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005850:	4ba2      	ldr	r3, [pc, #648]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005852:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800585a:	4053      	eors	r3, r2
 800585c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005860:	2b00      	cmp	r3, #0
 8005862:	d013      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005864:	4b9d      	ldr	r3, [pc, #628]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800586e:	4b9b      	ldr	r3, [pc, #620]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005872:	4a9a      	ldr	r2, [pc, #616]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005878:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800587a:	4b98      	ldr	r3, [pc, #608]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587e:	4a97      	ldr	r2, [pc, #604]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005884:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005886:	4a95      	ldr	r2, [pc, #596]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005896:	d115      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005898:	f7fc fc50 	bl	800213c <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800589e:	e00b      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a0:	f7fc fc4c 	bl	800213c <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d902      	bls.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	75fb      	strb	r3, [r7, #23]
            break;
 80058b6:	e005      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058b8:	4b88      	ldr	r3, [pc, #544]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0ed      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80058c4:	7dfb      	ldrb	r3, [r7, #23]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d126      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058d8:	d10d      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80058da:	4b80      	ldr	r3, [pc, #512]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058e8:	0919      	lsrs	r1, r3, #4
 80058ea:	4b7e      	ldr	r3, [pc, #504]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80058ec:	400b      	ands	r3, r1
 80058ee:	497b      	ldr	r1, [pc, #492]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	610b      	str	r3, [r1, #16]
 80058f4:	e005      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80058f6:	4b79      	ldr	r3, [pc, #484]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	4a78      	ldr	r2, [pc, #480]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80058fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005900:	6113      	str	r3, [r2, #16]
 8005902:	4b76      	ldr	r3, [pc, #472]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005904:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800590c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005910:	4972      	ldr	r1, [pc, #456]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005912:	4313      	orrs	r3, r2
 8005914:	670b      	str	r3, [r1, #112]	; 0x70
 8005916:	e004      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005918:	7dfb      	ldrb	r3, [r7, #23]
 800591a:	75bb      	strb	r3, [r7, #22]
 800591c:	e001      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591e:	7dfb      	ldrb	r3, [r7, #23]
 8005920:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d07d      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005932:	2b28      	cmp	r3, #40	; 0x28
 8005934:	d866      	bhi.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005936:	a201      	add	r2, pc, #4	; (adr r2, 800593c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	08005a0b 	.word	0x08005a0b
 8005940:	08005a05 	.word	0x08005a05
 8005944:	08005a05 	.word	0x08005a05
 8005948:	08005a05 	.word	0x08005a05
 800594c:	08005a05 	.word	0x08005a05
 8005950:	08005a05 	.word	0x08005a05
 8005954:	08005a05 	.word	0x08005a05
 8005958:	08005a05 	.word	0x08005a05
 800595c:	080059e1 	.word	0x080059e1
 8005960:	08005a05 	.word	0x08005a05
 8005964:	08005a05 	.word	0x08005a05
 8005968:	08005a05 	.word	0x08005a05
 800596c:	08005a05 	.word	0x08005a05
 8005970:	08005a05 	.word	0x08005a05
 8005974:	08005a05 	.word	0x08005a05
 8005978:	08005a05 	.word	0x08005a05
 800597c:	080059f3 	.word	0x080059f3
 8005980:	08005a05 	.word	0x08005a05
 8005984:	08005a05 	.word	0x08005a05
 8005988:	08005a05 	.word	0x08005a05
 800598c:	08005a05 	.word	0x08005a05
 8005990:	08005a05 	.word	0x08005a05
 8005994:	08005a05 	.word	0x08005a05
 8005998:	08005a05 	.word	0x08005a05
 800599c:	08005a0b 	.word	0x08005a0b
 80059a0:	08005a05 	.word	0x08005a05
 80059a4:	08005a05 	.word	0x08005a05
 80059a8:	08005a05 	.word	0x08005a05
 80059ac:	08005a05 	.word	0x08005a05
 80059b0:	08005a05 	.word	0x08005a05
 80059b4:	08005a05 	.word	0x08005a05
 80059b8:	08005a05 	.word	0x08005a05
 80059bc:	08005a0b 	.word	0x08005a0b
 80059c0:	08005a05 	.word	0x08005a05
 80059c4:	08005a05 	.word	0x08005a05
 80059c8:	08005a05 	.word	0x08005a05
 80059cc:	08005a05 	.word	0x08005a05
 80059d0:	08005a05 	.word	0x08005a05
 80059d4:	08005a05 	.word	0x08005a05
 80059d8:	08005a05 	.word	0x08005a05
 80059dc:	08005a0b 	.word	0x08005a0b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3304      	adds	r3, #4
 80059e4:	2101      	movs	r1, #1
 80059e6:	4618      	mov	r0, r3
 80059e8:	f001 f97a 	bl	8006ce0 <RCCEx_PLL2_Config>
 80059ec:	4603      	mov	r3, r0
 80059ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80059f0:	e00c      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3324      	adds	r3, #36	; 0x24
 80059f6:	2101      	movs	r1, #1
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 fa23 	bl	8006e44 <RCCEx_PLL3_Config>
 80059fe:	4603      	mov	r3, r0
 8005a00:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005a02:	e003      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	75fb      	strb	r3, [r7, #23]
      break;
 8005a08:	e000      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005a0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a0c:	7dfb      	ldrb	r3, [r7, #23]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d109      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a12:	4b32      	ldr	r3, [pc, #200]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a16:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a1e:	492f      	ldr	r1, [pc, #188]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	654b      	str	r3, [r1, #84]	; 0x54
 8005a24:	e001      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
 8005a28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d037      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a3a:	2b05      	cmp	r3, #5
 8005a3c:	d820      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005a3e:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a44:	08005a87 	.word	0x08005a87
 8005a48:	08005a5d 	.word	0x08005a5d
 8005a4c:	08005a6f 	.word	0x08005a6f
 8005a50:	08005a87 	.word	0x08005a87
 8005a54:	08005a87 	.word	0x08005a87
 8005a58:	08005a87 	.word	0x08005a87
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	2101      	movs	r1, #1
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 f93c 	bl	8006ce0 <RCCEx_PLL2_Config>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005a6c:	e00c      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3324      	adds	r3, #36	; 0x24
 8005a72:	2101      	movs	r1, #1
 8005a74:	4618      	mov	r0, r3
 8005a76:	f001 f9e5 	bl	8006e44 <RCCEx_PLL3_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005a7e:	e003      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	75fb      	strb	r3, [r7, #23]
      break;
 8005a84:	e000      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8005a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005a8e:	4b13      	ldr	r3, [pc, #76]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a92:	f023 0207 	bic.w	r2, r3, #7
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9a:	4910      	ldr	r1, [pc, #64]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	654b      	str	r3, [r1, #84]	; 0x54
 8005aa0:	e001      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
 8005aa4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0304 	and.w	r3, r3, #4
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d040      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab8:	2b05      	cmp	r3, #5
 8005aba:	d827      	bhi.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005abc:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8005abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac2:	bf00      	nop
 8005ac4:	08005b13 	.word	0x08005b13
 8005ac8:	08005ae9 	.word	0x08005ae9
 8005acc:	08005afb 	.word	0x08005afb
 8005ad0:	08005b13 	.word	0x08005b13
 8005ad4:	08005b13 	.word	0x08005b13
 8005ad8:	08005b13 	.word	0x08005b13
 8005adc:	58024400 	.word	0x58024400
 8005ae0:	58024800 	.word	0x58024800
 8005ae4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3304      	adds	r3, #4
 8005aec:	2101      	movs	r1, #1
 8005aee:	4618      	mov	r0, r3
 8005af0:	f001 f8f6 	bl	8006ce0 <RCCEx_PLL2_Config>
 8005af4:	4603      	mov	r3, r0
 8005af6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005af8:	e00c      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3324      	adds	r3, #36	; 0x24
 8005afe:	2101      	movs	r1, #1
 8005b00:	4618      	mov	r0, r3
 8005b02:	f001 f99f 	bl	8006e44 <RCCEx_PLL3_Config>
 8005b06:	4603      	mov	r3, r0
 8005b08:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005b0a:	e003      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b10:	e000      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8005b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b14:	7dfb      	ldrb	r3, [r7, #23]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10a      	bne.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b1a:	4bb2      	ldr	r3, [pc, #712]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1e:	f023 0207 	bic.w	r2, r3, #7
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b28:	49ae      	ldr	r1, [pc, #696]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	658b      	str	r3, [r1, #88]	; 0x58
 8005b2e:	e001      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
 8005b32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d044      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b4a:	d01b      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b50:	d805      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d022      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005b56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b5a:	d00a      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005b5c:	e01b      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b62:	d01d      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b68:	d01c      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005b6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b6e:	d01b      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005b70:	e011      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	3304      	adds	r3, #4
 8005b76:	2100      	movs	r1, #0
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f001 f8b1 	bl	8006ce0 <RCCEx_PLL2_Config>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005b82:	e012      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3324      	adds	r3, #36	; 0x24
 8005b88:	2102      	movs	r1, #2
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f001 f95a 	bl	8006e44 <RCCEx_PLL3_Config>
 8005b90:	4603      	mov	r3, r0
 8005b92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005b94:	e009      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	75fb      	strb	r3, [r7, #23]
      break;
 8005b9a:	e006      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005b9c:	bf00      	nop
 8005b9e:	e004      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005ba0:	bf00      	nop
 8005ba2:	e002      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005ba4:	bf00      	nop
 8005ba6:	e000      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005ba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10a      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bb0:	4b8c      	ldr	r3, [pc, #560]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bbe:	4989      	ldr	r1, [pc, #548]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	654b      	str	r3, [r1, #84]	; 0x54
 8005bc4:	e001      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
 8005bc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d044      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005be0:	d01b      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005be6:	d805      	bhi.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d022      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf0:	d00a      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005bf2:	e01b      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf8:	d01d      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005bfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005bfe:	d01c      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005c00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c04:	d01b      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005c06:	e011      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 f866 	bl	8006ce0 <RCCEx_PLL2_Config>
 8005c14:	4603      	mov	r3, r0
 8005c16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005c18:	e012      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3324      	adds	r3, #36	; 0x24
 8005c1e:	2102      	movs	r1, #2
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 f90f 	bl	8006e44 <RCCEx_PLL3_Config>
 8005c26:	4603      	mov	r3, r0
 8005c28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005c2a:	e009      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c30:	e006      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005c32:	bf00      	nop
 8005c34:	e004      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005c36:	bf00      	nop
 8005c38:	e002      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005c3a:	bf00      	nop
 8005c3c:	e000      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005c3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c46:	4b67      	ldr	r3, [pc, #412]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c54:	4963      	ldr	r1, [pc, #396]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	658b      	str	r3, [r1, #88]	; 0x58
 8005c5a:	e001      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5c:	7dfb      	ldrb	r3, [r7, #23]
 8005c5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d044      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c76:	d01b      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c7c:	d805      	bhi.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d022      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c86:	d00a      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005c88:	e01b      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c8e:	d01d      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005c90:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c94:	d01c      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005c96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005c9a:	d01b      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005c9c:	e011      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 f81b 	bl	8006ce0 <RCCEx_PLL2_Config>
 8005caa:	4603      	mov	r3, r0
 8005cac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005cae:	e012      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3324      	adds	r3, #36	; 0x24
 8005cb4:	2102      	movs	r1, #2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f001 f8c4 	bl	8006e44 <RCCEx_PLL3_Config>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005cc0:	e009      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc6:	e006      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005cc8:	bf00      	nop
 8005cca:	e004      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005ccc:	bf00      	nop
 8005cce:	e002      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005cd0:	bf00      	nop
 8005cd2:	e000      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005cd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cd6:	7dfb      	ldrb	r3, [r7, #23]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10a      	bne.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005cdc:	4b41      	ldr	r3, [pc, #260]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cea:	493e      	ldr	r1, [pc, #248]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	658b      	str	r3, [r1, #88]	; 0x58
 8005cf0:	e001      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
 8005cf4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0308 	and.w	r3, r3, #8
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d01a      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0c:	d10a      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3324      	adds	r3, #36	; 0x24
 8005d12:	2102      	movs	r1, #2
 8005d14:	4618      	mov	r0, r3
 8005d16:	f001 f895 	bl	8006e44 <RCCEx_PLL3_Config>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005d24:	4b2f      	ldr	r3, [pc, #188]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d32:	492c      	ldr	r1, [pc, #176]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d01a      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d4e:	d10a      	bne.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3324      	adds	r3, #36	; 0x24
 8005d54:	2102      	movs	r1, #2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f001 f874 	bl	8006e44 <RCCEx_PLL3_Config>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d66:	4b1f      	ldr	r3, [pc, #124]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d74:	491b      	ldr	r1, [pc, #108]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d032      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d90:	d00d      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d96:	d016      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d111      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3304      	adds	r3, #4
 8005da0:	2100      	movs	r1, #0
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 ff9c 	bl	8006ce0 <RCCEx_PLL2_Config>
 8005da8:	4603      	mov	r3, r0
 8005daa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005dac:	e00c      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	3324      	adds	r3, #36	; 0x24
 8005db2:	2102      	movs	r1, #2
 8005db4:	4618      	mov	r0, r3
 8005db6:	f001 f845 	bl	8006e44 <RCCEx_PLL3_Config>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005dbe:	e003      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8005dc4:	e000      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dc8:	7dfb      	ldrb	r3, [r7, #23]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10c      	bne.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005dce:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ddc:	4901      	ldr	r1, [pc, #4]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	658b      	str	r3, [r1, #88]	; 0x58
 8005de2:	e003      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005de4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
 8005dea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d02f      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e02:	d00c      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005e04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e08:	d015      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e0e:	d10f      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e10:	4b79      	ldr	r3, [pc, #484]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	4a78      	ldr	r2, [pc, #480]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005e1c:	e00c      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3324      	adds	r3, #36	; 0x24
 8005e22:	2101      	movs	r1, #1
 8005e24:	4618      	mov	r0, r3
 8005e26:	f001 f80d 	bl	8006e44 <RCCEx_PLL3_Config>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005e2e:	e003      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	75fb      	strb	r3, [r7, #23]
      break;
 8005e34:	e000      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005e36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10a      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e3e:	4b6e      	ldr	r3, [pc, #440]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e4c:	496a      	ldr	r1, [pc, #424]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	654b      	str	r3, [r1, #84]	; 0x54
 8005e52:	e001      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
 8005e56:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d029      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e70:	d007      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005e72:	e00f      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e74:	4b60      	ldr	r3, [pc, #384]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e78:	4a5f      	ldr	r2, [pc, #380]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005e80:	e00b      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3304      	adds	r3, #4
 8005e86:	2102      	movs	r1, #2
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 ff29 	bl	8006ce0 <RCCEx_PLL2_Config>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005e92:	e002      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	75fb      	strb	r3, [r7, #23]
      break;
 8005e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e9a:	7dfb      	ldrb	r3, [r7, #23]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d109      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005ea0:	4b55      	ldr	r3, [pc, #340]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eac:	4952      	ldr	r1, [pc, #328]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005eb2:	e001      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00a      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3324      	adds	r3, #36	; 0x24
 8005ec8:	2102      	movs	r1, #2
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 ffba 	bl	8006e44 <RCCEx_PLL3_Config>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d02f      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eee:	d00c      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef4:	d802      	bhi.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d011      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005efa:	e00d      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f00:	d00f      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005f02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f06:	d00e      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005f08:	e006      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f0a:	4b3b      	ldr	r3, [pc, #236]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	4a3a      	ldr	r2, [pc, #232]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005f16:	e007      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f1c:	e004      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005f1e:	bf00      	nop
 8005f20:	e002      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005f22:	bf00      	nop
 8005f24:	e000      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f28:	7dfb      	ldrb	r3, [r7, #23]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d109      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f2e:	4b32      	ldr	r3, [pc, #200]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f3a:	492f      	ldr	r1, [pc, #188]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	654b      	str	r3, [r1, #84]	; 0x54
 8005f40:	e001      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f42:	7dfb      	ldrb	r3, [r7, #23]
 8005f44:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d008      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f52:	4b29      	ldr	r3, [pc, #164]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5e:	4926      	ldr	r1, [pc, #152]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d009      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005f70:	4b21      	ldr	r3, [pc, #132]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f7e:	491e      	ldr	r1, [pc, #120]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d008      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f90:	4b19      	ldr	r3, [pc, #100]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f9c:	4916      	ldr	r1, [pc, #88]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00d      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fae:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	4a11      	ldr	r2, [pc, #68]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fb8:	6113      	str	r3, [r2, #16]
 8005fba:	4b0f      	ldr	r3, [pc, #60]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005fc4:	490c      	ldr	r1, [pc, #48]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	da08      	bge.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005fd2:	4b09      	ldr	r3, [pc, #36]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fde:	4906      	ldr	r1, [pc, #24]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005fe4:	7dbb      	ldrb	r3, [r7, #22]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	e000      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	58024400 	.word	0x58024400

08005ffc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b090      	sub	sp, #64	; 0x40
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800600a:	d150      	bne.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800600c:	4ba1      	ldr	r3, [pc, #644]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800600e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	2b04      	cmp	r3, #4
 800601a:	d844      	bhi.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800601c:	a201      	add	r2, pc, #4	; (adr r2, 8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800601e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006022:	bf00      	nop
 8006024:	08006039 	.word	0x08006039
 8006028:	08006049 	.word	0x08006049
 800602c:	08006059 	.word	0x08006059
 8006030:	080060a1 	.word	0x080060a1
 8006034:	08006069 	.word	0x08006069
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800603c:	4618      	mov	r0, r3
 800603e:	f000 fd03 	bl	8006a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006046:	e241      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006048:	f107 0318 	add.w	r3, r7, #24
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fa63 	bl	8006518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006056:	e239      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006058:	f107 030c 	add.w	r3, r7, #12
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fba7 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006066:	e231      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006068:	4b8a      	ldr	r3, [pc, #552]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800606a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800606c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006070:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006074:	2b00      	cmp	r3, #0
 8006076:	d102      	bne.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006078:	4b87      	ldr	r3, [pc, #540]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800607a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800607c:	e226      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800607e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006084:	d102      	bne.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8006086:	4b85      	ldr	r3, [pc, #532]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006088:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800608a:	e21f      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800608c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006092:	d102      	bne.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006094:	4b82      	ldr	r3, [pc, #520]	; (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006096:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006098:	e218      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800609a:	2300      	movs	r3, #0
 800609c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800609e:	e215      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80060a0:	4b80      	ldr	r3, [pc, #512]	; (80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80060a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060a4:	e212      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80060a6:	2300      	movs	r3, #0
 80060a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060aa:	bf00      	nop
 80060ac:	e20e      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b4:	d14f      	bne.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80060b6:	4b77      	ldr	r3, [pc, #476]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80060b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ba:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80060be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	2b80      	cmp	r3, #128	; 0x80
 80060c4:	d01c      	beq.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80060c6:	2b80      	cmp	r3, #128	; 0x80
 80060c8:	d804      	bhi.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d008      	beq.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80060ce:	2b40      	cmp	r3, #64	; 0x40
 80060d0:	d00e      	beq.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80060d2:	e03c      	b.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80060d4:	2bc0      	cmp	r3, #192	; 0xc0
 80060d6:	d037      	beq.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80060d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060dc:	d018      	beq.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80060de:	e036      	b.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 fcaf 	bl	8006a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060ee:	e1ed      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060f0:	f107 0318 	add.w	r3, r7, #24
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 fa0f 	bl	8006518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060fe:	e1e5      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006100:	f107 030c 	add.w	r3, r7, #12
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fb53 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800610e:	e1dd      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006110:	4b60      	ldr	r3, [pc, #384]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006114:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006118:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800611a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800611c:	2b00      	cmp	r3, #0
 800611e:	d102      	bne.n	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006120:	4b5d      	ldr	r3, [pc, #372]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006122:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006124:	e1d2      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006128:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800612c:	d102      	bne.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800612e:	4b5b      	ldr	r3, [pc, #364]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006130:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006132:	e1cb      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800613a:	d102      	bne.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800613c:	4b58      	ldr	r3, [pc, #352]	; (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800613e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006140:	e1c4      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006146:	e1c1      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006148:	4b56      	ldr	r3, [pc, #344]	; (80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800614a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800614c:	e1be      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006152:	bf00      	nop
 8006154:	e1ba      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800615c:	d153      	bne.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800615e:	4b4d      	ldr	r3, [pc, #308]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006162:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006166:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800616e:	d01f      	beq.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006174:	d805      	bhi.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800617a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800617e:	d00f      	beq.n	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006180:	e03d      	b.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8006182:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006186:	d037      	beq.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006188:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800618c:	d018      	beq.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800618e:	e036      	b.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006194:	4618      	mov	r0, r3
 8006196:	f000 fc57 	bl	8006a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800619e:	e195      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061a0:	f107 0318 	add.w	r3, r7, #24
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 f9b7 	bl	8006518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061ae:	e18d      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061b0:	f107 030c 	add.w	r3, r7, #12
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fafb 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061be:	e185      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80061c0:	4b34      	ldr	r3, [pc, #208]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80061c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061c8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80061ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d102      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80061d0:	4b31      	ldr	r3, [pc, #196]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80061d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80061d4:	e17a      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80061d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061dc:	d102      	bne.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80061de:	4b2f      	ldr	r3, [pc, #188]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80061e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061e2:	e173      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80061e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ea:	d102      	bne.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80061ec:	4b2c      	ldr	r3, [pc, #176]	; (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80061ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061f0:	e16c      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80061f2:	2300      	movs	r3, #0
 80061f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061f6:	e169      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80061f8:	4b2a      	ldr	r3, [pc, #168]	; (80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80061fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061fc:	e166      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80061fe:	2300      	movs	r3, #0
 8006200:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006202:	bf00      	nop
 8006204:	e162      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800620c:	d15d      	bne.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800620e:	4b21      	ldr	r3, [pc, #132]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006212:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006216:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800621e:	d01f      	beq.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006220:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006224:	d805      	bhi.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800622a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800622e:	d00f      	beq.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8006230:	e047      	b.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8006232:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006236:	d041      	beq.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8006238:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800623c:	d018      	beq.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800623e:	e040      	b.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fbff 	bl	8006a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800624e:	e13d      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006250:	f107 0318 	add.w	r3, r7, #24
 8006254:	4618      	mov	r0, r3
 8006256:	f000 f95f 	bl	8006518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800625e:	e135      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006260:	f107 030c 	add.w	r3, r7, #12
 8006264:	4618      	mov	r0, r3
 8006266:	f000 faa3 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800626e:	e12d      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006270:	4b08      	ldr	r3, [pc, #32]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006278:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800627a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627c:	2b00      	cmp	r3, #0
 800627e:	d102      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006280:	4b05      	ldr	r3, [pc, #20]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006282:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006284:	e122      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006288:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800628c:	d10c      	bne.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800628e:	4b03      	ldr	r3, [pc, #12]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006290:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006292:	e11b      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006294:	58024400 	.word	0x58024400
 8006298:	03d09000 	.word	0x03d09000
 800629c:	003d0900 	.word	0x003d0900
 80062a0:	007a1200 	.word	0x007a1200
 80062a4:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80062a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062ae:	d102      	bne.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80062b0:	4b89      	ldr	r3, [pc, #548]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80062b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062b4:	e10a      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80062b6:	2300      	movs	r3, #0
 80062b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062ba:	e107      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80062bc:	4b87      	ldr	r3, [pc, #540]	; (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80062be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062c0:	e104      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80062c2:	2300      	movs	r3, #0
 80062c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062c6:	bf00      	nop
 80062c8:	e100      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d0:	d153      	bne.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80062d2:	4b83      	ldr	r3, [pc, #524]	; (80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80062d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80062da:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e2:	d01f      	beq.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80062e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e8:	d805      	bhi.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80062ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f2:	d00f      	beq.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80062f4:	e03d      	b.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80062f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062fa:	d037      	beq.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80062fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006300:	d018      	beq.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006302:	e036      	b.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fb9d 	bl	8006a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006312:	e0db      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006314:	f107 0318 	add.w	r3, r7, #24
 8006318:	4618      	mov	r0, r3
 800631a:	f000 f8fd 	bl	8006518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006322:	e0d3      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006324:	f107 030c 	add.w	r3, r7, #12
 8006328:	4618      	mov	r0, r3
 800632a:	f000 fa41 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006332:	e0cb      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006334:	4b6a      	ldr	r3, [pc, #424]	; (80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006338:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800633c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800633e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006340:	2b00      	cmp	r3, #0
 8006342:	d102      	bne.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006344:	4b67      	ldr	r3, [pc, #412]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006346:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006348:	e0c0      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800634a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006350:	d102      	bne.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8006352:	4b65      	ldr	r3, [pc, #404]	; (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006354:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006356:	e0b9      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800635e:	d102      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8006360:	4b5d      	ldr	r3, [pc, #372]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006362:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006364:	e0b2      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006366:	2300      	movs	r3, #0
 8006368:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800636a:	e0af      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800636c:	4b5b      	ldr	r3, [pc, #364]	; (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800636e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006370:	e0ac      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006372:	2300      	movs	r3, #0
 8006374:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006376:	bf00      	nop
 8006378:	e0a8      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006380:	d13d      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006382:	4b57      	ldr	r3, [pc, #348]	; (80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006386:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800638a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800638c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006392:	d00c      	beq.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006398:	d011      	beq.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d12b      	bne.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800639e:	f107 0318 	add.w	r3, r7, #24
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 f8b8 	bl	8006518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063ac:	e08e      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063ae:	f107 030c 	add.w	r3, r7, #12
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 f9fc 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063bc:	e086      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80063be:	4b48      	ldr	r3, [pc, #288]	; (80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80063c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063c6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80063c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d102      	bne.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80063ce:	4b45      	ldr	r3, [pc, #276]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80063d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80063d2:	e07b      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80063d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063da:	d102      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80063dc:	4b42      	ldr	r3, [pc, #264]	; (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80063de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063e0:	e074      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80063e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063e8:	d102      	bne.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80063ea:	4b3b      	ldr	r3, [pc, #236]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80063ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063ee:	e06d      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80063f0:	2300      	movs	r3, #0
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063f4:	e06a      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063fa:	bf00      	nop
 80063fc:	e066      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006404:	d11f      	bne.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006406:	4b36      	ldr	r3, [pc, #216]	; (80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800640a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800640e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800641a:	d008      	beq.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800641c:	e00f      	b.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800641e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fb10 	bl	8006a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800642c:	e04e      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800642e:	f107 0318 	add.w	r3, r7, #24
 8006432:	4618      	mov	r0, r3
 8006434:	f000 f870 	bl	8006518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800643c:	e046      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006442:	bf00      	nop
 8006444:	e042      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800644c:	d13c      	bne.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800644e:	4b24      	ldr	r3, [pc, #144]	; (80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006452:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006456:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800645e:	d01e      	beq.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8006460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006464:	d805      	bhi.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00d      	beq.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800646a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800646e:	d00e      	beq.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8006470:	e026      	b.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8006472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006476:	d01d      	beq.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8006478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800647c:	d01d      	beq.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800647e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006482:	d014      	beq.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006484:	e01c      	b.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006486:	f000 f831 	bl	80064ec <HAL_RCCEx_GetD3PCLK1Freq>
 800648a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800648c:	e01e      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800648e:	f107 0318 	add.w	r3, r7, #24
 8006492:	4618      	mov	r0, r3
 8006494:	f000 f840 	bl	8006518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800649c:	e016      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800649e:	f107 030c 	add.w	r3, r7, #12
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 f984 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064ac:	e00e      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80064ae:	4b0d      	ldr	r3, [pc, #52]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80064b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064b2:	e00b      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80064b4:	4b0c      	ldr	r3, [pc, #48]	; (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80064b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064b8:	e008      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80064ba:	4b07      	ldr	r3, [pc, #28]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80064bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064be:	e005      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80064c0:	2300      	movs	r3, #0
 80064c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064c4:	bf00      	nop
 80064c6:	e001      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80064c8:	2300      	movs	r3, #0
 80064ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80064cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3740      	adds	r7, #64	; 0x40
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	007a1200 	.word	0x007a1200
 80064dc:	00bb8000 	.word	0x00bb8000
 80064e0:	58024400 	.word	0x58024400
 80064e4:	03d09000 	.word	0x03d09000
 80064e8:	003d0900 	.word	0x003d0900

080064ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80064f0:	f7fe fe3a 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 80064f4:	4601      	mov	r1, r0
 80064f6:	4b06      	ldr	r3, [pc, #24]	; (8006510 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	091b      	lsrs	r3, r3, #4
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	4a04      	ldr	r2, [pc, #16]	; (8006514 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006502:	5cd3      	ldrb	r3, [r2, r3]
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800650c:	4618      	mov	r0, r3
 800650e:	bd80      	pop	{r7, pc}
 8006510:	58024400 	.word	0x58024400
 8006514:	0800a7ec 	.word	0x0800a7ec

08006518 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006518:	b480      	push	{r7}
 800651a:	b089      	sub	sp, #36	; 0x24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006520:	4b9d      	ldr	r3, [pc, #628]	; (8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006524:	f003 0303 	and.w	r3, r3, #3
 8006528:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800652a:	4b9b      	ldr	r3, [pc, #620]	; (8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800652c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652e:	0b1b      	lsrs	r3, r3, #12
 8006530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006534:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006536:	4b98      	ldr	r3, [pc, #608]	; (8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	091b      	lsrs	r3, r3, #4
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006542:	4b95      	ldr	r3, [pc, #596]	; (8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006546:	08db      	lsrs	r3, r3, #3
 8006548:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	fb02 f303 	mul.w	r3, r2, r3
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800655a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 810a 	beq.w	800677a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d05a      	beq.n	8006622 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800656c:	2b01      	cmp	r3, #1
 800656e:	d302      	bcc.n	8006576 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8006570:	2b02      	cmp	r3, #2
 8006572:	d078      	beq.n	8006666 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006574:	e099      	b.n	80066aa <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006576:	4b88      	ldr	r3, [pc, #544]	; (8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b00      	cmp	r3, #0
 8006580:	d02d      	beq.n	80065de <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006582:	4b85      	ldr	r3, [pc, #532]	; (8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	08db      	lsrs	r3, r3, #3
 8006588:	f003 0303 	and.w	r3, r3, #3
 800658c:	4a83      	ldr	r2, [pc, #524]	; (800679c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800658e:	fa22 f303 	lsr.w	r3, r2, r3
 8006592:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	ee07 3a90 	vmov	s15, r3
 80065a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ac:	4b7a      	ldr	r3, [pc, #488]	; (8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b4:	ee07 3a90 	vmov	s15, r3
 80065b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80065c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80067a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80065c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80065dc:	e087      	b.n	80066ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	ee07 3a90 	vmov	s15, r3
 80065e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80067a4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80065ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f0:	4b69      	ldr	r3, [pc, #420]	; (8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80065f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f8:	ee07 3a90 	vmov	s15, r3
 80065fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006600:	ed97 6a03 	vldr	s12, [r7, #12]
 8006604:	eddf 5a66 	vldr	s11, [pc, #408]	; 80067a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006608:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800660c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006610:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006614:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800661c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006620:	e065      	b.n	80066ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	ee07 3a90 	vmov	s15, r3
 8006628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80067a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006630:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006634:	4b58      	ldr	r3, [pc, #352]	; (8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800663c:	ee07 3a90 	vmov	s15, r3
 8006640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006644:	ed97 6a03 	vldr	s12, [r7, #12]
 8006648:	eddf 5a55 	vldr	s11, [pc, #340]	; 80067a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800664c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006650:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006654:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006658:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800665c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006660:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006664:	e043      	b.n	80066ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	ee07 3a90 	vmov	s15, r3
 800666c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006670:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006674:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006678:	4b47      	ldr	r3, [pc, #284]	; (8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800667a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006680:	ee07 3a90 	vmov	s15, r3
 8006684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006688:	ed97 6a03 	vldr	s12, [r7, #12]
 800668c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80067a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006690:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006694:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006698:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800669c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066a8:	e021      	b.n	80066ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	ee07 3a90 	vmov	s15, r3
 80066b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80067a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80066b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066bc:	4b36      	ldr	r3, [pc, #216]	; (8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80066be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c4:	ee07 3a90 	vmov	s15, r3
 80066c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80066d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80067a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80066d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066ec:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80066ee:	4b2a      	ldr	r3, [pc, #168]	; (8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	0a5b      	lsrs	r3, r3, #9
 80066f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f8:	ee07 3a90 	vmov	s15, r3
 80066fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006700:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006704:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006708:	edd7 6a07 	vldr	s13, [r7, #28]
 800670c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006714:	ee17 2a90 	vmov	r2, s15
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800671c:	4b1e      	ldr	r3, [pc, #120]	; (8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	0c1b      	lsrs	r3, r3, #16
 8006722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006732:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006736:	edd7 6a07 	vldr	s13, [r7, #28]
 800673a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800673e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006742:	ee17 2a90 	vmov	r2, s15
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800674a:	4b13      	ldr	r3, [pc, #76]	; (8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674e:	0e1b      	lsrs	r3, r3, #24
 8006750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006754:	ee07 3a90 	vmov	s15, r3
 8006758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006760:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006764:	edd7 6a07 	vldr	s13, [r7, #28]
 8006768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800676c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006770:	ee17 2a90 	vmov	r2, s15
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006778:	e008      	b.n	800678c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	609a      	str	r2, [r3, #8]
}
 800678c:	bf00      	nop
 800678e:	3724      	adds	r7, #36	; 0x24
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	58024400 	.word	0x58024400
 800679c:	03d09000 	.word	0x03d09000
 80067a0:	46000000 	.word	0x46000000
 80067a4:	4c742400 	.word	0x4c742400
 80067a8:	4a742400 	.word	0x4a742400
 80067ac:	4af42400 	.word	0x4af42400

080067b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b089      	sub	sp, #36	; 0x24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067b8:	4b9d      	ldr	r3, [pc, #628]	; (8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80067ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067bc:	f003 0303 	and.w	r3, r3, #3
 80067c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80067c2:	4b9b      	ldr	r3, [pc, #620]	; (8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80067c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c6:	0d1b      	lsrs	r3, r3, #20
 80067c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80067ce:	4b98      	ldr	r3, [pc, #608]	; (8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80067d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d2:	0a1b      	lsrs	r3, r3, #8
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80067da:	4b95      	ldr	r3, [pc, #596]	; (8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80067dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067de:	08db      	lsrs	r3, r3, #3
 80067e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	fb02 f303 	mul.w	r3, r2, r3
 80067ea:	ee07 3a90 	vmov	s15, r3
 80067ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 810a 	beq.w	8006a12 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d05a      	beq.n	80068ba <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006804:	2b01      	cmp	r3, #1
 8006806:	d302      	bcc.n	800680e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006808:	2b02      	cmp	r3, #2
 800680a:	d078      	beq.n	80068fe <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800680c:	e099      	b.n	8006942 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800680e:	4b88      	ldr	r3, [pc, #544]	; (8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b00      	cmp	r3, #0
 8006818:	d02d      	beq.n	8006876 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800681a:	4b85      	ldr	r3, [pc, #532]	; (8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	08db      	lsrs	r3, r3, #3
 8006820:	f003 0303 	and.w	r3, r3, #3
 8006824:	4a83      	ldr	r2, [pc, #524]	; (8006a34 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006826:	fa22 f303 	lsr.w	r3, r2, r3
 800682a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	ee07 3a90 	vmov	s15, r3
 8006832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	ee07 3a90 	vmov	s15, r3
 800683c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006840:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006844:	4b7a      	ldr	r3, [pc, #488]	; (8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800684c:	ee07 3a90 	vmov	s15, r3
 8006850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006854:	ed97 6a03 	vldr	s12, [r7, #12]
 8006858:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006a38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800685c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006860:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006864:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006868:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800686c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006870:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006874:	e087      	b.n	8006986 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	ee07 3a90 	vmov	s15, r3
 800687c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006880:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006a3c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006884:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006888:	4b69      	ldr	r3, [pc, #420]	; (8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006890:	ee07 3a90 	vmov	s15, r3
 8006894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006898:	ed97 6a03 	vldr	s12, [r7, #12]
 800689c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006a38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80068a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068b8:	e065      	b.n	8006986 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	ee07 3a90 	vmov	s15, r3
 80068c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006a40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80068c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068cc:	4b58      	ldr	r3, [pc, #352]	; (8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d4:	ee07 3a90 	vmov	s15, r3
 80068d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80068e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006a38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80068e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068fc:	e043      	b.n	8006986 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	ee07 3a90 	vmov	s15, r3
 8006904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006908:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006a44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800690c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006910:	4b47      	ldr	r3, [pc, #284]	; (8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006918:	ee07 3a90 	vmov	s15, r3
 800691c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006920:	ed97 6a03 	vldr	s12, [r7, #12]
 8006924:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006a38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800692c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006930:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006940:	e021      	b.n	8006986 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	ee07 3a90 	vmov	s15, r3
 8006948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006a40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006954:	4b36      	ldr	r3, [pc, #216]	; (8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695c:	ee07 3a90 	vmov	s15, r3
 8006960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006964:	ed97 6a03 	vldr	s12, [r7, #12]
 8006968:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006a38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800696c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800697c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006980:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006984:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006986:	4b2a      	ldr	r3, [pc, #168]	; (8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698a:	0a5b      	lsrs	r3, r3, #9
 800698c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006990:	ee07 3a90 	vmov	s15, r3
 8006994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006998:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800699c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80069a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069ac:	ee17 2a90 	vmov	r2, s15
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80069b4:	4b1e      	ldr	r3, [pc, #120]	; (8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	0c1b      	lsrs	r3, r3, #16
 80069ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069be:	ee07 3a90 	vmov	s15, r3
 80069c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80069d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069da:	ee17 2a90 	vmov	r2, s15
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80069e2:	4b13      	ldr	r3, [pc, #76]	; (8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80069e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e6:	0e1b      	lsrs	r3, r3, #24
 80069e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ec:	ee07 3a90 	vmov	s15, r3
 80069f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a08:	ee17 2a90 	vmov	r2, s15
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006a10:	e008      	b.n	8006a24 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	609a      	str	r2, [r3, #8]
}
 8006a24:	bf00      	nop
 8006a26:	3724      	adds	r7, #36	; 0x24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	58024400 	.word	0x58024400
 8006a34:	03d09000 	.word	0x03d09000
 8006a38:	46000000 	.word	0x46000000
 8006a3c:	4c742400 	.word	0x4c742400
 8006a40:	4a742400 	.word	0x4a742400
 8006a44:	4af42400 	.word	0x4af42400

08006a48 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b089      	sub	sp, #36	; 0x24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a50:	4b9d      	ldr	r3, [pc, #628]	; (8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a54:	f003 0303 	and.w	r3, r3, #3
 8006a58:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006a5a:	4b9b      	ldr	r3, [pc, #620]	; (8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5e:	091b      	lsrs	r3, r3, #4
 8006a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a64:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006a66:	4b98      	ldr	r3, [pc, #608]	; (8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a70:	4b95      	ldr	r3, [pc, #596]	; (8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a74:	08db      	lsrs	r3, r3, #3
 8006a76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	fb02 f303 	mul.w	r3, r2, r3
 8006a80:	ee07 3a90 	vmov	s15, r3
 8006a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a88:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 810a 	beq.w	8006ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d05a      	beq.n	8006b50 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d302      	bcc.n	8006aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d078      	beq.n	8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8006aa2:	e099      	b.n	8006bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aa4:	4b88      	ldr	r3, [pc, #544]	; (8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0320 	and.w	r3, r3, #32
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d02d      	beq.n	8006b0c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ab0:	4b85      	ldr	r3, [pc, #532]	; (8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	08db      	lsrs	r3, r3, #3
 8006ab6:	f003 0303 	and.w	r3, r3, #3
 8006aba:	4a84      	ldr	r2, [pc, #528]	; (8006ccc <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8006abc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	ee07 3a90 	vmov	s15, r3
 8006ac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ada:	4b7b      	ldr	r3, [pc, #492]	; (8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b0a:	e087      	b.n	8006c1c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8006b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b1e:	4b6a      	ldr	r3, [pc, #424]	; (8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b4e:	e065      	b.n	8006c1c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8006b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b62:	4b59      	ldr	r3, [pc, #356]	; (8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b92:	e043      	b.n	8006c1c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006cdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba6:	4b48      	ldr	r3, [pc, #288]	; (8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bd6:	e021      	b.n	8006c1c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8006be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bea:	4b37      	ldr	r3, [pc, #220]	; (8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c1a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006c1c:	4b2a      	ldr	r3, [pc, #168]	; (8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c20:	0a5b      	lsrs	r3, r3, #9
 8006c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c26:	ee07 3a90 	vmov	s15, r3
 8006c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c36:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c42:	ee17 2a90 	vmov	r2, s15
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006c4a:	4b1f      	ldr	r3, [pc, #124]	; (8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4e:	0c1b      	lsrs	r3, r3, #16
 8006c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c54:	ee07 3a90 	vmov	s15, r3
 8006c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c64:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c70:	ee17 2a90 	vmov	r2, s15
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006c78:	4b13      	ldr	r3, [pc, #76]	; (8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7c:	0e1b      	lsrs	r3, r3, #24
 8006c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c92:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c9e:	ee17 2a90 	vmov	r2, s15
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006ca6:	e008      	b.n	8006cba <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	609a      	str	r2, [r3, #8]
}
 8006cba:	bf00      	nop
 8006cbc:	3724      	adds	r7, #36	; 0x24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	58024400 	.word	0x58024400
 8006ccc:	03d09000 	.word	0x03d09000
 8006cd0:	46000000 	.word	0x46000000
 8006cd4:	4c742400 	.word	0x4c742400
 8006cd8:	4a742400 	.word	0x4a742400
 8006cdc:	4af42400 	.word	0x4af42400

08006ce0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cee:	4b53      	ldr	r3, [pc, #332]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf2:	f003 0303 	and.w	r3, r3, #3
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d101      	bne.n	8006cfe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e099      	b.n	8006e32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006cfe:	4b4f      	ldr	r3, [pc, #316]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a4e      	ldr	r2, [pc, #312]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006d04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d0a:	f7fb fa17 	bl	800213c <HAL_GetTick>
 8006d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d10:	e008      	b.n	8006d24 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006d12:	f7fb fa13 	bl	800213c <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d901      	bls.n	8006d24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e086      	b.n	8006e32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d24:	4b45      	ldr	r3, [pc, #276]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1f0      	bne.n	8006d12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d30:	4b42      	ldr	r3, [pc, #264]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	031b      	lsls	r3, r3, #12
 8006d3e:	493f      	ldr	r1, [pc, #252]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	628b      	str	r3, [r1, #40]	; 0x28
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	025b      	lsls	r3, r3, #9
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	041b      	lsls	r3, r3, #16
 8006d62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	061b      	lsls	r3, r3, #24
 8006d70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d74:	4931      	ldr	r1, [pc, #196]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d7a:	4b30      	ldr	r3, [pc, #192]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	492d      	ldr	r1, [pc, #180]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d8c:	4b2b      	ldr	r3, [pc, #172]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	f023 0220 	bic.w	r2, r3, #32
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	4928      	ldr	r1, [pc, #160]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d9e:	4b27      	ldr	r3, [pc, #156]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da2:	4a26      	ldr	r2, [pc, #152]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006da4:	f023 0310 	bic.w	r3, r3, #16
 8006da8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006daa:	4b24      	ldr	r3, [pc, #144]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dae:	4b24      	ldr	r3, [pc, #144]	; (8006e40 <RCCEx_PLL2_Config+0x160>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	69d2      	ldr	r2, [r2, #28]
 8006db6:	00d2      	lsls	r2, r2, #3
 8006db8:	4920      	ldr	r1, [pc, #128]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006dbe:	4b1f      	ldr	r3, [pc, #124]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc2:	4a1e      	ldr	r2, [pc, #120]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006dc4:	f043 0310 	orr.w	r3, r3, #16
 8006dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d106      	bne.n	8006dde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006dd0:	4b1a      	ldr	r3, [pc, #104]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	4a19      	ldr	r2, [pc, #100]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006dd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ddc:	e00f      	b.n	8006dfe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d106      	bne.n	8006df2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006de4:	4b15      	ldr	r3, [pc, #84]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de8:	4a14      	ldr	r2, [pc, #80]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006dea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006df0:	e005      	b.n	8006dfe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006df2:	4b12      	ldr	r3, [pc, #72]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	4a11      	ldr	r2, [pc, #68]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006dfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006dfe:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a0e      	ldr	r2, [pc, #56]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006e04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e0a:	f7fb f997 	bl	800213c <HAL_GetTick>
 8006e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e10:	e008      	b.n	8006e24 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006e12:	f7fb f993 	bl	800213c <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d901      	bls.n	8006e24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e006      	b.n	8006e32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e24:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <RCCEx_PLL2_Config+0x15c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d0f0      	beq.n	8006e12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	58024400 	.word	0x58024400
 8006e40:	ffff0007 	.word	0xffff0007

08006e44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e52:	4b53      	ldr	r3, [pc, #332]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d101      	bne.n	8006e62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e099      	b.n	8006f96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e62:	4b4f      	ldr	r3, [pc, #316]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a4e      	ldr	r2, [pc, #312]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e6e:	f7fb f965 	bl	800213c <HAL_GetTick>
 8006e72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e74:	e008      	b.n	8006e88 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006e76:	f7fb f961 	bl	800213c <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d901      	bls.n	8006e88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e086      	b.n	8006f96 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e88:	4b45      	ldr	r3, [pc, #276]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1f0      	bne.n	8006e76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e94:	4b42      	ldr	r3, [pc, #264]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	051b      	lsls	r3, r3, #20
 8006ea2:	493f      	ldr	r1, [pc, #252]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	628b      	str	r3, [r1, #40]	; 0x28
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	025b      	lsls	r3, r3, #9
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	041b      	lsls	r3, r3, #16
 8006ec6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	061b      	lsls	r3, r3, #24
 8006ed4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ed8:	4931      	ldr	r1, [pc, #196]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006ede:	4b30      	ldr	r3, [pc, #192]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	492d      	ldr	r1, [pc, #180]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006ef0:	4b2b      	ldr	r3, [pc, #172]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	4928      	ldr	r1, [pc, #160]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f02:	4b27      	ldr	r3, [pc, #156]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f06:	4a26      	ldr	r2, [pc, #152]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f0e:	4b24      	ldr	r3, [pc, #144]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f12:	4b24      	ldr	r3, [pc, #144]	; (8006fa4 <RCCEx_PLL3_Config+0x160>)
 8006f14:	4013      	ands	r3, r2
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	69d2      	ldr	r2, [r2, #28]
 8006f1a:	00d2      	lsls	r2, r2, #3
 8006f1c:	4920      	ldr	r1, [pc, #128]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f22:	4b1f      	ldr	r3, [pc, #124]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	4a1e      	ldr	r2, [pc, #120]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d106      	bne.n	8006f42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f34:	4b1a      	ldr	r3, [pc, #104]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	4a19      	ldr	r2, [pc, #100]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006f3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f40:	e00f      	b.n	8006f62 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d106      	bne.n	8006f56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f48:	4b15      	ldr	r3, [pc, #84]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	4a14      	ldr	r2, [pc, #80]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006f4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f54:	e005      	b.n	8006f62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f56:	4b12      	ldr	r3, [pc, #72]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5a:	4a11      	ldr	r2, [pc, #68]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f62:	4b0f      	ldr	r3, [pc, #60]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a0e      	ldr	r2, [pc, #56]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f6e:	f7fb f8e5 	bl	800213c <HAL_GetTick>
 8006f72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f74:	e008      	b.n	8006f88 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006f76:	f7fb f8e1 	bl	800213c <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d901      	bls.n	8006f88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e006      	b.n	8006f96 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f88:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <RCCEx_PLL3_Config+0x15c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0f0      	beq.n	8006f76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	58024400 	.word	0x58024400
 8006fa4:	ffff0007 	.word	0xffff0007

08006fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e049      	b.n	800704e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7fa fa58 	bl	8001484 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	f000 faa6 	bl	8007538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
	...

08007058 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b01      	cmp	r3, #1
 800706a:	d001      	beq.n	8007070 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e019      	b.n	80070a4 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	4b0c      	ldr	r3, [pc, #48]	; (80070b0 <HAL_TIM_Base_Start+0x58>)
 8007080:	4013      	ands	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2b06      	cmp	r3, #6
 8007088:	d00b      	beq.n	80070a2 <HAL_TIM_Base_Start+0x4a>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007090:	d007      	beq.n	80070a2 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f042 0201 	orr.w	r2, r2, #1
 80070a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	00010007 	.word	0x00010007

080070b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e049      	b.n	800715a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d106      	bne.n	80070e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f841 	bl	8007162 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3304      	adds	r3, #4
 80070f0:	4619      	mov	r1, r3
 80070f2:	4610      	mov	r0, r2
 80070f4:	f000 fa20 	bl	8007538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
	...

08007178 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800718a:	2b01      	cmp	r3, #1
 800718c:	d101      	bne.n	8007192 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800718e:	2302      	movs	r3, #2
 8007190:	e0fd      	b.n	800738e <HAL_TIM_PWM_ConfigChannel+0x216>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b14      	cmp	r3, #20
 800719e:	f200 80f0 	bhi.w	8007382 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80071a2:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80071a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a8:	080071fd 	.word	0x080071fd
 80071ac:	08007383 	.word	0x08007383
 80071b0:	08007383 	.word	0x08007383
 80071b4:	08007383 	.word	0x08007383
 80071b8:	0800723d 	.word	0x0800723d
 80071bc:	08007383 	.word	0x08007383
 80071c0:	08007383 	.word	0x08007383
 80071c4:	08007383 	.word	0x08007383
 80071c8:	0800727f 	.word	0x0800727f
 80071cc:	08007383 	.word	0x08007383
 80071d0:	08007383 	.word	0x08007383
 80071d4:	08007383 	.word	0x08007383
 80071d8:	080072bf 	.word	0x080072bf
 80071dc:	08007383 	.word	0x08007383
 80071e0:	08007383 	.word	0x08007383
 80071e4:	08007383 	.word	0x08007383
 80071e8:	08007301 	.word	0x08007301
 80071ec:	08007383 	.word	0x08007383
 80071f0:	08007383 	.word	0x08007383
 80071f4:	08007383 	.word	0x08007383
 80071f8:	08007341 	.word	0x08007341
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68b9      	ldr	r1, [r7, #8]
 8007202:	4618      	mov	r0, r3
 8007204:	f000 fa32 	bl	800766c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699a      	ldr	r2, [r3, #24]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0208 	orr.w	r2, r2, #8
 8007216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699a      	ldr	r2, [r3, #24]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0204 	bic.w	r2, r2, #4
 8007226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6999      	ldr	r1, [r3, #24]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	691a      	ldr	r2, [r3, #16]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	619a      	str	r2, [r3, #24]
      break;
 800723a:	e0a3      	b.n	8007384 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68b9      	ldr	r1, [r7, #8]
 8007242:	4618      	mov	r0, r3
 8007244:	f000 faa2 	bl	800778c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699a      	ldr	r2, [r3, #24]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699a      	ldr	r2, [r3, #24]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6999      	ldr	r1, [r3, #24]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	021a      	lsls	r2, r3, #8
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	619a      	str	r2, [r3, #24]
      break;
 800727c:	e082      	b.n	8007384 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68b9      	ldr	r1, [r7, #8]
 8007284:	4618      	mov	r0, r3
 8007286:	f000 fb0b 	bl	80078a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	69da      	ldr	r2, [r3, #28]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f042 0208 	orr.w	r2, r2, #8
 8007298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	69da      	ldr	r2, [r3, #28]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f022 0204 	bic.w	r2, r2, #4
 80072a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69d9      	ldr	r1, [r3, #28]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	691a      	ldr	r2, [r3, #16]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	61da      	str	r2, [r3, #28]
      break;
 80072bc:	e062      	b.n	8007384 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68b9      	ldr	r1, [r7, #8]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 fb71 	bl	80079ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69da      	ldr	r2, [r3, #28]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69da      	ldr	r2, [r3, #28]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69d9      	ldr	r1, [r3, #28]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	021a      	lsls	r2, r3, #8
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	61da      	str	r2, [r3, #28]
      break;
 80072fe:	e041      	b.n	8007384 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68b9      	ldr	r1, [r7, #8]
 8007306:	4618      	mov	r0, r3
 8007308:	f000 fbb8 	bl	8007a7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 0208 	orr.w	r2, r2, #8
 800731a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f022 0204 	bic.w	r2, r2, #4
 800732a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	691a      	ldr	r2, [r3, #16]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800733e:	e021      	b.n	8007384 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68b9      	ldr	r1, [r7, #8]
 8007346:	4618      	mov	r0, r3
 8007348:	f000 fbfa 	bl	8007b40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800735a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800736a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	021a      	lsls	r2, r3, #8
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	430a      	orrs	r2, r1
 800737e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007380:	e000      	b.n	8007384 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007382:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop

08007398 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d101      	bne.n	80073b0 <HAL_TIM_ConfigClockSource+0x18>
 80073ac:	2302      	movs	r3, #2
 80073ae:	e0b7      	b.n	8007520 <HAL_TIM_ConfigClockSource+0x188>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4b57      	ldr	r3, [pc, #348]	; (8007528 <HAL_TIM_ConfigClockSource+0x190>)
 80073cc:	4013      	ands	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b70      	cmp	r3, #112	; 0x70
 80073e6:	d02e      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0xae>
 80073e8:	2b70      	cmp	r3, #112	; 0x70
 80073ea:	d812      	bhi.n	8007412 <HAL_TIM_ConfigClockSource+0x7a>
 80073ec:	2b30      	cmp	r3, #48	; 0x30
 80073ee:	f000 8084 	beq.w	80074fa <HAL_TIM_ConfigClockSource+0x162>
 80073f2:	2b30      	cmp	r3, #48	; 0x30
 80073f4:	d806      	bhi.n	8007404 <HAL_TIM_ConfigClockSource+0x6c>
 80073f6:	2b10      	cmp	r3, #16
 80073f8:	d07f      	beq.n	80074fa <HAL_TIM_ConfigClockSource+0x162>
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d07d      	beq.n	80074fa <HAL_TIM_ConfigClockSource+0x162>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d07b      	beq.n	80074fa <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007402:	e084      	b.n	800750e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007404:	2b50      	cmp	r3, #80	; 0x50
 8007406:	d048      	beq.n	800749a <HAL_TIM_ConfigClockSource+0x102>
 8007408:	2b60      	cmp	r3, #96	; 0x60
 800740a:	d056      	beq.n	80074ba <HAL_TIM_ConfigClockSource+0x122>
 800740c:	2b40      	cmp	r3, #64	; 0x40
 800740e:	d064      	beq.n	80074da <HAL_TIM_ConfigClockSource+0x142>
      break;
 8007410:	e07d      	b.n	800750e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007412:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007416:	d070      	beq.n	80074fa <HAL_TIM_ConfigClockSource+0x162>
 8007418:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800741c:	d809      	bhi.n	8007432 <HAL_TIM_ConfigClockSource+0x9a>
 800741e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007422:	d027      	beq.n	8007474 <HAL_TIM_ConfigClockSource+0xdc>
 8007424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007428:	d067      	beq.n	80074fa <HAL_TIM_ConfigClockSource+0x162>
 800742a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800742e:	d06d      	beq.n	800750c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007430:	e06d      	b.n	800750e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007432:	4a3e      	ldr	r2, [pc, #248]	; (800752c <HAL_TIM_ConfigClockSource+0x194>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d060      	beq.n	80074fa <HAL_TIM_ConfigClockSource+0x162>
 8007438:	4a3d      	ldr	r2, [pc, #244]	; (8007530 <HAL_TIM_ConfigClockSource+0x198>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d05d      	beq.n	80074fa <HAL_TIM_ConfigClockSource+0x162>
 800743e:	4a3d      	ldr	r2, [pc, #244]	; (8007534 <HAL_TIM_ConfigClockSource+0x19c>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d05a      	beq.n	80074fa <HAL_TIM_ConfigClockSource+0x162>
      break;
 8007444:	e063      	b.n	800750e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	6899      	ldr	r1, [r3, #8]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f000 fc55 	bl	8007d04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007468:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	609a      	str	r2, [r3, #8]
      break;
 8007472:	e04c      	b.n	800750e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6818      	ldr	r0, [r3, #0]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	6899      	ldr	r1, [r3, #8]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f000 fc3e 	bl	8007d04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689a      	ldr	r2, [r3, #8]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007496:	609a      	str	r2, [r3, #8]
      break;
 8007498:	e039      	b.n	800750e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6818      	ldr	r0, [r3, #0]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	6859      	ldr	r1, [r3, #4]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	461a      	mov	r2, r3
 80074a8:	f000 fbae 	bl	8007c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2150      	movs	r1, #80	; 0x50
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fc08 	bl	8007cc8 <TIM_ITRx_SetConfig>
      break;
 80074b8:	e029      	b.n	800750e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6818      	ldr	r0, [r3, #0]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	6859      	ldr	r1, [r3, #4]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	461a      	mov	r2, r3
 80074c8:	f000 fbcd 	bl	8007c66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2160      	movs	r1, #96	; 0x60
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 fbf8 	bl	8007cc8 <TIM_ITRx_SetConfig>
      break;
 80074d8:	e019      	b.n	800750e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6818      	ldr	r0, [r3, #0]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	6859      	ldr	r1, [r3, #4]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	461a      	mov	r2, r3
 80074e8:	f000 fb8e 	bl	8007c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2140      	movs	r1, #64	; 0x40
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 fbe8 	bl	8007cc8 <TIM_ITRx_SetConfig>
      break;
 80074f8:	e009      	b.n	800750e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4619      	mov	r1, r3
 8007504:	4610      	mov	r0, r2
 8007506:	f000 fbdf 	bl	8007cc8 <TIM_ITRx_SetConfig>
      break;
 800750a:	e000      	b.n	800750e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800750c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	ffceff88 	.word	0xffceff88
 800752c:	00100030 	.word	0x00100030
 8007530:	00100040 	.word	0x00100040
 8007534:	00100020 	.word	0x00100020

08007538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a40      	ldr	r2, [pc, #256]	; (800764c <TIM_Base_SetConfig+0x114>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d013      	beq.n	8007578 <TIM_Base_SetConfig+0x40>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007556:	d00f      	beq.n	8007578 <TIM_Base_SetConfig+0x40>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a3d      	ldr	r2, [pc, #244]	; (8007650 <TIM_Base_SetConfig+0x118>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d00b      	beq.n	8007578 <TIM_Base_SetConfig+0x40>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a3c      	ldr	r2, [pc, #240]	; (8007654 <TIM_Base_SetConfig+0x11c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d007      	beq.n	8007578 <TIM_Base_SetConfig+0x40>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a3b      	ldr	r2, [pc, #236]	; (8007658 <TIM_Base_SetConfig+0x120>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d003      	beq.n	8007578 <TIM_Base_SetConfig+0x40>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a3a      	ldr	r2, [pc, #232]	; (800765c <TIM_Base_SetConfig+0x124>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d108      	bne.n	800758a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	4313      	orrs	r3, r2
 8007588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a2f      	ldr	r2, [pc, #188]	; (800764c <TIM_Base_SetConfig+0x114>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d01f      	beq.n	80075d2 <TIM_Base_SetConfig+0x9a>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007598:	d01b      	beq.n	80075d2 <TIM_Base_SetConfig+0x9a>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a2c      	ldr	r2, [pc, #176]	; (8007650 <TIM_Base_SetConfig+0x118>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d017      	beq.n	80075d2 <TIM_Base_SetConfig+0x9a>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a2b      	ldr	r2, [pc, #172]	; (8007654 <TIM_Base_SetConfig+0x11c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d013      	beq.n	80075d2 <TIM_Base_SetConfig+0x9a>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a2a      	ldr	r2, [pc, #168]	; (8007658 <TIM_Base_SetConfig+0x120>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d00f      	beq.n	80075d2 <TIM_Base_SetConfig+0x9a>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a29      	ldr	r2, [pc, #164]	; (800765c <TIM_Base_SetConfig+0x124>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d00b      	beq.n	80075d2 <TIM_Base_SetConfig+0x9a>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a28      	ldr	r2, [pc, #160]	; (8007660 <TIM_Base_SetConfig+0x128>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d007      	beq.n	80075d2 <TIM_Base_SetConfig+0x9a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a27      	ldr	r2, [pc, #156]	; (8007664 <TIM_Base_SetConfig+0x12c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d003      	beq.n	80075d2 <TIM_Base_SetConfig+0x9a>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a26      	ldr	r2, [pc, #152]	; (8007668 <TIM_Base_SetConfig+0x130>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d108      	bne.n	80075e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a10      	ldr	r2, [pc, #64]	; (800764c <TIM_Base_SetConfig+0x114>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d00f      	beq.n	8007630 <TIM_Base_SetConfig+0xf8>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a12      	ldr	r2, [pc, #72]	; (800765c <TIM_Base_SetConfig+0x124>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d00b      	beq.n	8007630 <TIM_Base_SetConfig+0xf8>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a11      	ldr	r2, [pc, #68]	; (8007660 <TIM_Base_SetConfig+0x128>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d007      	beq.n	8007630 <TIM_Base_SetConfig+0xf8>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a10      	ldr	r2, [pc, #64]	; (8007664 <TIM_Base_SetConfig+0x12c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d003      	beq.n	8007630 <TIM_Base_SetConfig+0xf8>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a0f      	ldr	r2, [pc, #60]	; (8007668 <TIM_Base_SetConfig+0x130>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d103      	bne.n	8007638 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	691a      	ldr	r2, [r3, #16]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	615a      	str	r2, [r3, #20]
}
 800763e:	bf00      	nop
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	40010000 	.word	0x40010000
 8007650:	40000400 	.word	0x40000400
 8007654:	40000800 	.word	0x40000800
 8007658:	40000c00 	.word	0x40000c00
 800765c:	40010400 	.word	0x40010400
 8007660:	40014000 	.word	0x40014000
 8007664:	40014400 	.word	0x40014400
 8007668:	40014800 	.word	0x40014800

0800766c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	f023 0201 	bic.w	r2, r3, #1
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	4b37      	ldr	r3, [pc, #220]	; (8007774 <TIM_OC1_SetConfig+0x108>)
 8007698:	4013      	ands	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f023 0303 	bic.w	r3, r3, #3
 80076a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f023 0302 	bic.w	r3, r3, #2
 80076b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	4313      	orrs	r3, r2
 80076be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a2d      	ldr	r2, [pc, #180]	; (8007778 <TIM_OC1_SetConfig+0x10c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d00f      	beq.n	80076e8 <TIM_OC1_SetConfig+0x7c>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a2c      	ldr	r2, [pc, #176]	; (800777c <TIM_OC1_SetConfig+0x110>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00b      	beq.n	80076e8 <TIM_OC1_SetConfig+0x7c>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a2b      	ldr	r2, [pc, #172]	; (8007780 <TIM_OC1_SetConfig+0x114>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d007      	beq.n	80076e8 <TIM_OC1_SetConfig+0x7c>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a2a      	ldr	r2, [pc, #168]	; (8007784 <TIM_OC1_SetConfig+0x118>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_OC1_SetConfig+0x7c>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a29      	ldr	r2, [pc, #164]	; (8007788 <TIM_OC1_SetConfig+0x11c>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d10c      	bne.n	8007702 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f023 0308 	bic.w	r3, r3, #8
 80076ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f023 0304 	bic.w	r3, r3, #4
 8007700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a1c      	ldr	r2, [pc, #112]	; (8007778 <TIM_OC1_SetConfig+0x10c>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d00f      	beq.n	800772a <TIM_OC1_SetConfig+0xbe>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a1b      	ldr	r2, [pc, #108]	; (800777c <TIM_OC1_SetConfig+0x110>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d00b      	beq.n	800772a <TIM_OC1_SetConfig+0xbe>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a1a      	ldr	r2, [pc, #104]	; (8007780 <TIM_OC1_SetConfig+0x114>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d007      	beq.n	800772a <TIM_OC1_SetConfig+0xbe>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a19      	ldr	r2, [pc, #100]	; (8007784 <TIM_OC1_SetConfig+0x118>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d003      	beq.n	800772a <TIM_OC1_SetConfig+0xbe>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a18      	ldr	r2, [pc, #96]	; (8007788 <TIM_OC1_SetConfig+0x11c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d111      	bne.n	800774e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	4313      	orrs	r3, r2
 8007742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	4313      	orrs	r3, r2
 800774c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	621a      	str	r2, [r3, #32]
}
 8007768:	bf00      	nop
 800776a:	371c      	adds	r7, #28
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	fffeff8f 	.word	0xfffeff8f
 8007778:	40010000 	.word	0x40010000
 800777c:	40010400 	.word	0x40010400
 8007780:	40014000 	.word	0x40014000
 8007784:	40014400 	.word	0x40014400
 8007788:	40014800 	.word	0x40014800

0800778c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	f023 0210 	bic.w	r2, r3, #16
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	4b34      	ldr	r3, [pc, #208]	; (8007888 <TIM_OC2_SetConfig+0xfc>)
 80077b8:	4013      	ands	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	021b      	lsls	r3, r3, #8
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f023 0320 	bic.w	r3, r3, #32
 80077d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	011b      	lsls	r3, r3, #4
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a29      	ldr	r2, [pc, #164]	; (800788c <TIM_OC2_SetConfig+0x100>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d003      	beq.n	80077f4 <TIM_OC2_SetConfig+0x68>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a28      	ldr	r2, [pc, #160]	; (8007890 <TIM_OC2_SetConfig+0x104>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d10d      	bne.n	8007810 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	011b      	lsls	r3, r3, #4
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800780e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a1e      	ldr	r2, [pc, #120]	; (800788c <TIM_OC2_SetConfig+0x100>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d00f      	beq.n	8007838 <TIM_OC2_SetConfig+0xac>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a1d      	ldr	r2, [pc, #116]	; (8007890 <TIM_OC2_SetConfig+0x104>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d00b      	beq.n	8007838 <TIM_OC2_SetConfig+0xac>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a1c      	ldr	r2, [pc, #112]	; (8007894 <TIM_OC2_SetConfig+0x108>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d007      	beq.n	8007838 <TIM_OC2_SetConfig+0xac>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a1b      	ldr	r2, [pc, #108]	; (8007898 <TIM_OC2_SetConfig+0x10c>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d003      	beq.n	8007838 <TIM_OC2_SetConfig+0xac>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a1a      	ldr	r2, [pc, #104]	; (800789c <TIM_OC2_SetConfig+0x110>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d113      	bne.n	8007860 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800783e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	4313      	orrs	r3, r2
 8007852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	4313      	orrs	r3, r2
 800785e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	621a      	str	r2, [r3, #32]
}
 800787a:	bf00      	nop
 800787c:	371c      	adds	r7, #28
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	feff8fff 	.word	0xfeff8fff
 800788c:	40010000 	.word	0x40010000
 8007890:	40010400 	.word	0x40010400
 8007894:	40014000 	.word	0x40014000
 8007898:	40014400 	.word	0x40014400
 800789c:	40014800 	.word	0x40014800

080078a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0303 	bic.w	r3, r3, #3
 80078d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	021b      	lsls	r3, r3, #8
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a27      	ldr	r2, [pc, #156]	; (8007998 <TIM_OC3_SetConfig+0xf8>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d003      	beq.n	8007906 <TIM_OC3_SetConfig+0x66>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a26      	ldr	r2, [pc, #152]	; (800799c <TIM_OC3_SetConfig+0xfc>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d10d      	bne.n	8007922 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800790c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	021b      	lsls	r3, r3, #8
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	4313      	orrs	r3, r2
 8007918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a1c      	ldr	r2, [pc, #112]	; (8007998 <TIM_OC3_SetConfig+0xf8>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d00f      	beq.n	800794a <TIM_OC3_SetConfig+0xaa>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a1b      	ldr	r2, [pc, #108]	; (800799c <TIM_OC3_SetConfig+0xfc>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d00b      	beq.n	800794a <TIM_OC3_SetConfig+0xaa>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a1a      	ldr	r2, [pc, #104]	; (80079a0 <TIM_OC3_SetConfig+0x100>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d007      	beq.n	800794a <TIM_OC3_SetConfig+0xaa>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a19      	ldr	r2, [pc, #100]	; (80079a4 <TIM_OC3_SetConfig+0x104>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d003      	beq.n	800794a <TIM_OC3_SetConfig+0xaa>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a18      	ldr	r2, [pc, #96]	; (80079a8 <TIM_OC3_SetConfig+0x108>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d113      	bne.n	8007972 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	011b      	lsls	r3, r3, #4
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	4313      	orrs	r3, r2
 8007964:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	4313      	orrs	r3, r2
 8007970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	621a      	str	r2, [r3, #32]
}
 800798c:	bf00      	nop
 800798e:	371c      	adds	r7, #28
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	40010000 	.word	0x40010000
 800799c:	40010400 	.word	0x40010400
 80079a0:	40014000 	.word	0x40014000
 80079a4:	40014400 	.word	0x40014400
 80079a8:	40014800 	.word	0x40014800

080079ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	021b      	lsls	r3, r3, #8
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	031b      	lsls	r3, r3, #12
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a18      	ldr	r2, [pc, #96]	; (8007a68 <TIM_OC4_SetConfig+0xbc>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d00f      	beq.n	8007a2c <TIM_OC4_SetConfig+0x80>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a17      	ldr	r2, [pc, #92]	; (8007a6c <TIM_OC4_SetConfig+0xc0>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d00b      	beq.n	8007a2c <TIM_OC4_SetConfig+0x80>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a16      	ldr	r2, [pc, #88]	; (8007a70 <TIM_OC4_SetConfig+0xc4>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d007      	beq.n	8007a2c <TIM_OC4_SetConfig+0x80>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a15      	ldr	r2, [pc, #84]	; (8007a74 <TIM_OC4_SetConfig+0xc8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d003      	beq.n	8007a2c <TIM_OC4_SetConfig+0x80>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a14      	ldr	r2, [pc, #80]	; (8007a78 <TIM_OC4_SetConfig+0xcc>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d109      	bne.n	8007a40 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	695b      	ldr	r3, [r3, #20]
 8007a38:	019b      	lsls	r3, r3, #6
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	621a      	str	r2, [r3, #32]
}
 8007a5a:	bf00      	nop
 8007a5c:	371c      	adds	r7, #28
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	40010000 	.word	0x40010000
 8007a6c:	40010400 	.word	0x40010400
 8007a70:	40014000 	.word	0x40014000
 8007a74:	40014400 	.word	0x40014400
 8007a78:	40014800 	.word	0x40014800

08007a7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007abc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	041b      	lsls	r3, r3, #16
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a17      	ldr	r2, [pc, #92]	; (8007b2c <TIM_OC5_SetConfig+0xb0>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d00f      	beq.n	8007af2 <TIM_OC5_SetConfig+0x76>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a16      	ldr	r2, [pc, #88]	; (8007b30 <TIM_OC5_SetConfig+0xb4>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d00b      	beq.n	8007af2 <TIM_OC5_SetConfig+0x76>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a15      	ldr	r2, [pc, #84]	; (8007b34 <TIM_OC5_SetConfig+0xb8>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d007      	beq.n	8007af2 <TIM_OC5_SetConfig+0x76>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a14      	ldr	r2, [pc, #80]	; (8007b38 <TIM_OC5_SetConfig+0xbc>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d003      	beq.n	8007af2 <TIM_OC5_SetConfig+0x76>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a13      	ldr	r2, [pc, #76]	; (8007b3c <TIM_OC5_SetConfig+0xc0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d109      	bne.n	8007b06 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007af8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	021b      	lsls	r3, r3, #8
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	621a      	str	r2, [r3, #32]
}
 8007b20:	bf00      	nop
 8007b22:	371c      	adds	r7, #28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	40010000 	.word	0x40010000
 8007b30:	40010400 	.word	0x40010400
 8007b34:	40014000 	.word	0x40014000
 8007b38:	40014400 	.word	0x40014400
 8007b3c:	40014800 	.word	0x40014800

08007b40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b087      	sub	sp, #28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	021b      	lsls	r3, r3, #8
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	051b      	lsls	r3, r3, #20
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a18      	ldr	r2, [pc, #96]	; (8007bf4 <TIM_OC6_SetConfig+0xb4>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d00f      	beq.n	8007bb8 <TIM_OC6_SetConfig+0x78>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a17      	ldr	r2, [pc, #92]	; (8007bf8 <TIM_OC6_SetConfig+0xb8>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d00b      	beq.n	8007bb8 <TIM_OC6_SetConfig+0x78>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a16      	ldr	r2, [pc, #88]	; (8007bfc <TIM_OC6_SetConfig+0xbc>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d007      	beq.n	8007bb8 <TIM_OC6_SetConfig+0x78>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a15      	ldr	r2, [pc, #84]	; (8007c00 <TIM_OC6_SetConfig+0xc0>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d003      	beq.n	8007bb8 <TIM_OC6_SetConfig+0x78>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a14      	ldr	r2, [pc, #80]	; (8007c04 <TIM_OC6_SetConfig+0xc4>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d109      	bne.n	8007bcc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	029b      	lsls	r3, r3, #10
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	621a      	str	r2, [r3, #32]
}
 8007be6:	bf00      	nop
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	40010000 	.word	0x40010000
 8007bf8:	40010400 	.word	0x40010400
 8007bfc:	40014000 	.word	0x40014000
 8007c00:	40014400 	.word	0x40014400
 8007c04:	40014800 	.word	0x40014800

08007c08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6a1b      	ldr	r3, [r3, #32]
 8007c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	f023 0201 	bic.w	r2, r3, #1
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	011b      	lsls	r3, r3, #4
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f023 030a 	bic.w	r3, r3, #10
 8007c44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	621a      	str	r2, [r3, #32]
}
 8007c5a:	bf00      	nop
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b087      	sub	sp, #28
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	60f8      	str	r0, [r7, #12]
 8007c6e:	60b9      	str	r1, [r7, #8]
 8007c70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	f023 0210 	bic.w	r2, r3, #16
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	031b      	lsls	r3, r3, #12
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ca2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	011b      	lsls	r3, r3, #4
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	621a      	str	r2, [r3, #32]
}
 8007cba:	bf00      	nop
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
	...

08007cc8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	4b09      	ldr	r3, [pc, #36]	; (8007d00 <TIM_ITRx_SetConfig+0x38>)
 8007cdc:	4013      	ands	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	f043 0307 	orr.w	r3, r3, #7
 8007cea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	609a      	str	r2, [r3, #8]
}
 8007cf2:	bf00      	nop
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	ffcfff8f 	.word	0xffcfff8f

08007d04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
 8007d10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	021a      	lsls	r2, r3, #8
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	431a      	orrs	r2, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	609a      	str	r2, [r3, #8]
}
 8007d38:	bf00      	nop
 8007d3a:	371c      	adds	r7, #28
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d101      	bne.n	8007d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	e068      	b.n	8007e2e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a2e      	ldr	r2, [pc, #184]	; (8007e3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d004      	beq.n	8007d90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a2d      	ldr	r2, [pc, #180]	; (8007e40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d108      	bne.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a1e      	ldr	r2, [pc, #120]	; (8007e3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d01d      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dce:	d018      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a1b      	ldr	r2, [pc, #108]	; (8007e44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d013      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a1a      	ldr	r2, [pc, #104]	; (8007e48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d00e      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a18      	ldr	r2, [pc, #96]	; (8007e4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d009      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a13      	ldr	r2, [pc, #76]	; (8007e40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d004      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a14      	ldr	r2, [pc, #80]	; (8007e50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d10c      	bne.n	8007e1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	40010000 	.word	0x40010000
 8007e40:	40010400 	.word	0x40010400
 8007e44:	40000400 	.word	0x40000400
 8007e48:	40000800 	.word	0x40000800
 8007e4c:	40000c00 	.word	0x40000c00
 8007e50:	40001800 	.word	0x40001800

08007e54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d101      	bne.n	8007e70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	e065      	b.n	8007f3c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	041b      	lsls	r3, r3, #16
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a16      	ldr	r2, [pc, #88]	; (8007f48 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d004      	beq.n	8007efe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a14      	ldr	r2, [pc, #80]	; (8007f4c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d115      	bne.n	8007f2a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	051b      	lsls	r3, r3, #20
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	40010000 	.word	0x40010000
 8007f4c:	40010400 	.word	0x40010400

08007f50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e042      	b.n	8007fe8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d106      	bne.n	8007f7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7f9 fb93 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2224      	movs	r2, #36	; 0x24
 8007f7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f022 0201 	bic.w	r2, r2, #1
 8007f90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f82c 	bl	8007ff0 <UART_SetConfig>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d101      	bne.n	8007fa2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e022      	b.n	8007fe8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fdd0 	bl	8008b50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685a      	ldr	r2, [r3, #4]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	689a      	ldr	r2, [r3, #8]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f042 0201 	orr.w	r2, r2, #1
 8007fde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fe57 	bl	8008c94 <UART_CheckIdleState>
 8007fe6:	4603      	mov	r3, r0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ff0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007ff4:	b08e      	sub	sp, #56	; 0x38
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	689a      	ldr	r2, [r3, #8]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	431a      	orrs	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	431a      	orrs	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	4313      	orrs	r3, r2
 8008016:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800801c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800801e:	4313      	orrs	r3, r2
 8008020:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	4bc1      	ldr	r3, [pc, #772]	; (8008330 <UART_SetConfig+0x340>)
 800802a:	4013      	ands	r3, r2
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6812      	ldr	r2, [r2, #0]
 8008030:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008032:	430b      	orrs	r3, r1
 8008034:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	68da      	ldr	r2, [r3, #12]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	430a      	orrs	r2, r1
 800804a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4ab7      	ldr	r2, [pc, #732]	; (8008334 <UART_SetConfig+0x344>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d004      	beq.n	8008066 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a1b      	ldr	r3, [r3, #32]
 8008060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008062:	4313      	orrs	r3, r2
 8008064:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689a      	ldr	r2, [r3, #8]
 800806c:	4bb2      	ldr	r3, [pc, #712]	; (8008338 <UART_SetConfig+0x348>)
 800806e:	4013      	ands	r3, r2
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	6812      	ldr	r2, [r2, #0]
 8008074:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008076:	430b      	orrs	r3, r1
 8008078:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008080:	f023 010f 	bic.w	r1, r3, #15
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	430a      	orrs	r2, r1
 800808e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4aa9      	ldr	r2, [pc, #676]	; (800833c <UART_SetConfig+0x34c>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d177      	bne.n	800818a <UART_SetConfig+0x19a>
 800809a:	4ba9      	ldr	r3, [pc, #676]	; (8008340 <UART_SetConfig+0x350>)
 800809c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080a2:	2b28      	cmp	r3, #40	; 0x28
 80080a4:	d86c      	bhi.n	8008180 <UART_SetConfig+0x190>
 80080a6:	a201      	add	r2, pc, #4	; (adr r2, 80080ac <UART_SetConfig+0xbc>)
 80080a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ac:	08008151 	.word	0x08008151
 80080b0:	08008181 	.word	0x08008181
 80080b4:	08008181 	.word	0x08008181
 80080b8:	08008181 	.word	0x08008181
 80080bc:	08008181 	.word	0x08008181
 80080c0:	08008181 	.word	0x08008181
 80080c4:	08008181 	.word	0x08008181
 80080c8:	08008181 	.word	0x08008181
 80080cc:	08008159 	.word	0x08008159
 80080d0:	08008181 	.word	0x08008181
 80080d4:	08008181 	.word	0x08008181
 80080d8:	08008181 	.word	0x08008181
 80080dc:	08008181 	.word	0x08008181
 80080e0:	08008181 	.word	0x08008181
 80080e4:	08008181 	.word	0x08008181
 80080e8:	08008181 	.word	0x08008181
 80080ec:	08008161 	.word	0x08008161
 80080f0:	08008181 	.word	0x08008181
 80080f4:	08008181 	.word	0x08008181
 80080f8:	08008181 	.word	0x08008181
 80080fc:	08008181 	.word	0x08008181
 8008100:	08008181 	.word	0x08008181
 8008104:	08008181 	.word	0x08008181
 8008108:	08008181 	.word	0x08008181
 800810c:	08008169 	.word	0x08008169
 8008110:	08008181 	.word	0x08008181
 8008114:	08008181 	.word	0x08008181
 8008118:	08008181 	.word	0x08008181
 800811c:	08008181 	.word	0x08008181
 8008120:	08008181 	.word	0x08008181
 8008124:	08008181 	.word	0x08008181
 8008128:	08008181 	.word	0x08008181
 800812c:	08008171 	.word	0x08008171
 8008130:	08008181 	.word	0x08008181
 8008134:	08008181 	.word	0x08008181
 8008138:	08008181 	.word	0x08008181
 800813c:	08008181 	.word	0x08008181
 8008140:	08008181 	.word	0x08008181
 8008144:	08008181 	.word	0x08008181
 8008148:	08008181 	.word	0x08008181
 800814c:	08008179 	.word	0x08008179
 8008150:	2301      	movs	r3, #1
 8008152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008156:	e233      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008158:	2304      	movs	r3, #4
 800815a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800815e:	e22f      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008160:	2308      	movs	r3, #8
 8008162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008166:	e22b      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008168:	2310      	movs	r3, #16
 800816a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800816e:	e227      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008170:	2320      	movs	r3, #32
 8008172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008176:	e223      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008178:	2340      	movs	r3, #64	; 0x40
 800817a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800817e:	e21f      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008180:	2380      	movs	r3, #128	; 0x80
 8008182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008186:	bf00      	nop
 8008188:	e21a      	b.n	80085c0 <UART_SetConfig+0x5d0>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a6d      	ldr	r2, [pc, #436]	; (8008344 <UART_SetConfig+0x354>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d132      	bne.n	80081fa <UART_SetConfig+0x20a>
 8008194:	4b6a      	ldr	r3, [pc, #424]	; (8008340 <UART_SetConfig+0x350>)
 8008196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008198:	f003 0307 	and.w	r3, r3, #7
 800819c:	2b05      	cmp	r3, #5
 800819e:	d827      	bhi.n	80081f0 <UART_SetConfig+0x200>
 80081a0:	a201      	add	r2, pc, #4	; (adr r2, 80081a8 <UART_SetConfig+0x1b8>)
 80081a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a6:	bf00      	nop
 80081a8:	080081c1 	.word	0x080081c1
 80081ac:	080081c9 	.word	0x080081c9
 80081b0:	080081d1 	.word	0x080081d1
 80081b4:	080081d9 	.word	0x080081d9
 80081b8:	080081e1 	.word	0x080081e1
 80081bc:	080081e9 	.word	0x080081e9
 80081c0:	2300      	movs	r3, #0
 80081c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081c6:	e1fb      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80081c8:	2304      	movs	r3, #4
 80081ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081ce:	e1f7      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80081d0:	2308      	movs	r3, #8
 80081d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081d6:	e1f3      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80081d8:	2310      	movs	r3, #16
 80081da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081de:	e1ef      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80081e0:	2320      	movs	r3, #32
 80081e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081e6:	e1eb      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80081e8:	2340      	movs	r3, #64	; 0x40
 80081ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081ee:	e1e7      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80081f0:	2380      	movs	r3, #128	; 0x80
 80081f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081f6:	bf00      	nop
 80081f8:	e1e2      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a52      	ldr	r2, [pc, #328]	; (8008348 <UART_SetConfig+0x358>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d132      	bne.n	800826a <UART_SetConfig+0x27a>
 8008204:	4b4e      	ldr	r3, [pc, #312]	; (8008340 <UART_SetConfig+0x350>)
 8008206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008208:	f003 0307 	and.w	r3, r3, #7
 800820c:	2b05      	cmp	r3, #5
 800820e:	d827      	bhi.n	8008260 <UART_SetConfig+0x270>
 8008210:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <UART_SetConfig+0x228>)
 8008212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008216:	bf00      	nop
 8008218:	08008231 	.word	0x08008231
 800821c:	08008239 	.word	0x08008239
 8008220:	08008241 	.word	0x08008241
 8008224:	08008249 	.word	0x08008249
 8008228:	08008251 	.word	0x08008251
 800822c:	08008259 	.word	0x08008259
 8008230:	2300      	movs	r3, #0
 8008232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008236:	e1c3      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008238:	2304      	movs	r3, #4
 800823a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800823e:	e1bf      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008240:	2308      	movs	r3, #8
 8008242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008246:	e1bb      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008248:	2310      	movs	r3, #16
 800824a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800824e:	e1b7      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008250:	2320      	movs	r3, #32
 8008252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008256:	e1b3      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008258:	2340      	movs	r3, #64	; 0x40
 800825a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800825e:	e1af      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008260:	2380      	movs	r3, #128	; 0x80
 8008262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008266:	bf00      	nop
 8008268:	e1aa      	b.n	80085c0 <UART_SetConfig+0x5d0>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a37      	ldr	r2, [pc, #220]	; (800834c <UART_SetConfig+0x35c>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d132      	bne.n	80082da <UART_SetConfig+0x2ea>
 8008274:	4b32      	ldr	r3, [pc, #200]	; (8008340 <UART_SetConfig+0x350>)
 8008276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008278:	f003 0307 	and.w	r3, r3, #7
 800827c:	2b05      	cmp	r3, #5
 800827e:	d827      	bhi.n	80082d0 <UART_SetConfig+0x2e0>
 8008280:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <UART_SetConfig+0x298>)
 8008282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008286:	bf00      	nop
 8008288:	080082a1 	.word	0x080082a1
 800828c:	080082a9 	.word	0x080082a9
 8008290:	080082b1 	.word	0x080082b1
 8008294:	080082b9 	.word	0x080082b9
 8008298:	080082c1 	.word	0x080082c1
 800829c:	080082c9 	.word	0x080082c9
 80082a0:	2300      	movs	r3, #0
 80082a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082a6:	e18b      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80082a8:	2304      	movs	r3, #4
 80082aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ae:	e187      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80082b0:	2308      	movs	r3, #8
 80082b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082b6:	e183      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80082b8:	2310      	movs	r3, #16
 80082ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082be:	e17f      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80082c0:	2320      	movs	r3, #32
 80082c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082c6:	e17b      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80082c8:	2340      	movs	r3, #64	; 0x40
 80082ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ce:	e177      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80082d0:	2380      	movs	r3, #128	; 0x80
 80082d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082d6:	bf00      	nop
 80082d8:	e172      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a1c      	ldr	r2, [pc, #112]	; (8008350 <UART_SetConfig+0x360>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d144      	bne.n	800836e <UART_SetConfig+0x37e>
 80082e4:	4b16      	ldr	r3, [pc, #88]	; (8008340 <UART_SetConfig+0x350>)
 80082e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e8:	f003 0307 	and.w	r3, r3, #7
 80082ec:	2b05      	cmp	r3, #5
 80082ee:	d839      	bhi.n	8008364 <UART_SetConfig+0x374>
 80082f0:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <UART_SetConfig+0x308>)
 80082f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f6:	bf00      	nop
 80082f8:	08008311 	.word	0x08008311
 80082fc:	08008319 	.word	0x08008319
 8008300:	08008321 	.word	0x08008321
 8008304:	08008329 	.word	0x08008329
 8008308:	08008355 	.word	0x08008355
 800830c:	0800835d 	.word	0x0800835d
 8008310:	2300      	movs	r3, #0
 8008312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008316:	e153      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008318:	2304      	movs	r3, #4
 800831a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800831e:	e14f      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008320:	2308      	movs	r3, #8
 8008322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008326:	e14b      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008328:	2310      	movs	r3, #16
 800832a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800832e:	e147      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008330:	cfff69f3 	.word	0xcfff69f3
 8008334:	58000c00 	.word	0x58000c00
 8008338:	11fff4ff 	.word	0x11fff4ff
 800833c:	40011000 	.word	0x40011000
 8008340:	58024400 	.word	0x58024400
 8008344:	40004400 	.word	0x40004400
 8008348:	40004800 	.word	0x40004800
 800834c:	40004c00 	.word	0x40004c00
 8008350:	40005000 	.word	0x40005000
 8008354:	2320      	movs	r3, #32
 8008356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800835a:	e131      	b.n	80085c0 <UART_SetConfig+0x5d0>
 800835c:	2340      	movs	r3, #64	; 0x40
 800835e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008362:	e12d      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008364:	2380      	movs	r3, #128	; 0x80
 8008366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800836a:	bf00      	nop
 800836c:	e128      	b.n	80085c0 <UART_SetConfig+0x5d0>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4ab6      	ldr	r2, [pc, #728]	; (800864c <UART_SetConfig+0x65c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d178      	bne.n	800846a <UART_SetConfig+0x47a>
 8008378:	4bb5      	ldr	r3, [pc, #724]	; (8008650 <UART_SetConfig+0x660>)
 800837a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800837c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008380:	2b28      	cmp	r3, #40	; 0x28
 8008382:	d86d      	bhi.n	8008460 <UART_SetConfig+0x470>
 8008384:	a201      	add	r2, pc, #4	; (adr r2, 800838c <UART_SetConfig+0x39c>)
 8008386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838a:	bf00      	nop
 800838c:	08008431 	.word	0x08008431
 8008390:	08008461 	.word	0x08008461
 8008394:	08008461 	.word	0x08008461
 8008398:	08008461 	.word	0x08008461
 800839c:	08008461 	.word	0x08008461
 80083a0:	08008461 	.word	0x08008461
 80083a4:	08008461 	.word	0x08008461
 80083a8:	08008461 	.word	0x08008461
 80083ac:	08008439 	.word	0x08008439
 80083b0:	08008461 	.word	0x08008461
 80083b4:	08008461 	.word	0x08008461
 80083b8:	08008461 	.word	0x08008461
 80083bc:	08008461 	.word	0x08008461
 80083c0:	08008461 	.word	0x08008461
 80083c4:	08008461 	.word	0x08008461
 80083c8:	08008461 	.word	0x08008461
 80083cc:	08008441 	.word	0x08008441
 80083d0:	08008461 	.word	0x08008461
 80083d4:	08008461 	.word	0x08008461
 80083d8:	08008461 	.word	0x08008461
 80083dc:	08008461 	.word	0x08008461
 80083e0:	08008461 	.word	0x08008461
 80083e4:	08008461 	.word	0x08008461
 80083e8:	08008461 	.word	0x08008461
 80083ec:	08008449 	.word	0x08008449
 80083f0:	08008461 	.word	0x08008461
 80083f4:	08008461 	.word	0x08008461
 80083f8:	08008461 	.word	0x08008461
 80083fc:	08008461 	.word	0x08008461
 8008400:	08008461 	.word	0x08008461
 8008404:	08008461 	.word	0x08008461
 8008408:	08008461 	.word	0x08008461
 800840c:	08008451 	.word	0x08008451
 8008410:	08008461 	.word	0x08008461
 8008414:	08008461 	.word	0x08008461
 8008418:	08008461 	.word	0x08008461
 800841c:	08008461 	.word	0x08008461
 8008420:	08008461 	.word	0x08008461
 8008424:	08008461 	.word	0x08008461
 8008428:	08008461 	.word	0x08008461
 800842c:	08008459 	.word	0x08008459
 8008430:	2301      	movs	r3, #1
 8008432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008436:	e0c3      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008438:	2304      	movs	r3, #4
 800843a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800843e:	e0bf      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008440:	2308      	movs	r3, #8
 8008442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008446:	e0bb      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008448:	2310      	movs	r3, #16
 800844a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800844e:	e0b7      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008450:	2320      	movs	r3, #32
 8008452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008456:	e0b3      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008458:	2340      	movs	r3, #64	; 0x40
 800845a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800845e:	e0af      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008460:	2380      	movs	r3, #128	; 0x80
 8008462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008466:	bf00      	nop
 8008468:	e0aa      	b.n	80085c0 <UART_SetConfig+0x5d0>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a79      	ldr	r2, [pc, #484]	; (8008654 <UART_SetConfig+0x664>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d132      	bne.n	80084da <UART_SetConfig+0x4ea>
 8008474:	4b76      	ldr	r3, [pc, #472]	; (8008650 <UART_SetConfig+0x660>)
 8008476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008478:	f003 0307 	and.w	r3, r3, #7
 800847c:	2b05      	cmp	r3, #5
 800847e:	d827      	bhi.n	80084d0 <UART_SetConfig+0x4e0>
 8008480:	a201      	add	r2, pc, #4	; (adr r2, 8008488 <UART_SetConfig+0x498>)
 8008482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008486:	bf00      	nop
 8008488:	080084a1 	.word	0x080084a1
 800848c:	080084a9 	.word	0x080084a9
 8008490:	080084b1 	.word	0x080084b1
 8008494:	080084b9 	.word	0x080084b9
 8008498:	080084c1 	.word	0x080084c1
 800849c:	080084c9 	.word	0x080084c9
 80084a0:	2300      	movs	r3, #0
 80084a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084a6:	e08b      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80084a8:	2304      	movs	r3, #4
 80084aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084ae:	e087      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80084b0:	2308      	movs	r3, #8
 80084b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084b6:	e083      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80084b8:	2310      	movs	r3, #16
 80084ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084be:	e07f      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80084c0:	2320      	movs	r3, #32
 80084c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084c6:	e07b      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80084c8:	2340      	movs	r3, #64	; 0x40
 80084ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084ce:	e077      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80084d0:	2380      	movs	r3, #128	; 0x80
 80084d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084d6:	bf00      	nop
 80084d8:	e072      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a5e      	ldr	r2, [pc, #376]	; (8008658 <UART_SetConfig+0x668>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d132      	bne.n	800854a <UART_SetConfig+0x55a>
 80084e4:	4b5a      	ldr	r3, [pc, #360]	; (8008650 <UART_SetConfig+0x660>)
 80084e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e8:	f003 0307 	and.w	r3, r3, #7
 80084ec:	2b05      	cmp	r3, #5
 80084ee:	d827      	bhi.n	8008540 <UART_SetConfig+0x550>
 80084f0:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <UART_SetConfig+0x508>)
 80084f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f6:	bf00      	nop
 80084f8:	08008511 	.word	0x08008511
 80084fc:	08008519 	.word	0x08008519
 8008500:	08008521 	.word	0x08008521
 8008504:	08008529 	.word	0x08008529
 8008508:	08008531 	.word	0x08008531
 800850c:	08008539 	.word	0x08008539
 8008510:	2300      	movs	r3, #0
 8008512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008516:	e053      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008518:	2304      	movs	r3, #4
 800851a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800851e:	e04f      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008520:	2308      	movs	r3, #8
 8008522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008526:	e04b      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008528:	2310      	movs	r3, #16
 800852a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800852e:	e047      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008530:	2320      	movs	r3, #32
 8008532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008536:	e043      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008538:	2340      	movs	r3, #64	; 0x40
 800853a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800853e:	e03f      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008540:	2380      	movs	r3, #128	; 0x80
 8008542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008546:	bf00      	nop
 8008548:	e03a      	b.n	80085c0 <UART_SetConfig+0x5d0>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a43      	ldr	r2, [pc, #268]	; (800865c <UART_SetConfig+0x66c>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d132      	bne.n	80085ba <UART_SetConfig+0x5ca>
 8008554:	4b3e      	ldr	r3, [pc, #248]	; (8008650 <UART_SetConfig+0x660>)
 8008556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008558:	f003 0307 	and.w	r3, r3, #7
 800855c:	2b05      	cmp	r3, #5
 800855e:	d827      	bhi.n	80085b0 <UART_SetConfig+0x5c0>
 8008560:	a201      	add	r2, pc, #4	; (adr r2, 8008568 <UART_SetConfig+0x578>)
 8008562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008566:	bf00      	nop
 8008568:	08008581 	.word	0x08008581
 800856c:	08008589 	.word	0x08008589
 8008570:	08008591 	.word	0x08008591
 8008574:	08008599 	.word	0x08008599
 8008578:	080085a1 	.word	0x080085a1
 800857c:	080085a9 	.word	0x080085a9
 8008580:	2302      	movs	r3, #2
 8008582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008586:	e01b      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008588:	2304      	movs	r3, #4
 800858a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800858e:	e017      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008590:	2308      	movs	r3, #8
 8008592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008596:	e013      	b.n	80085c0 <UART_SetConfig+0x5d0>
 8008598:	2310      	movs	r3, #16
 800859a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800859e:	e00f      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80085a0:	2320      	movs	r3, #32
 80085a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085a6:	e00b      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80085a8:	2340      	movs	r3, #64	; 0x40
 80085aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ae:	e007      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80085b0:	2380      	movs	r3, #128	; 0x80
 80085b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085b6:	bf00      	nop
 80085b8:	e002      	b.n	80085c0 <UART_SetConfig+0x5d0>
 80085ba:	2380      	movs	r3, #128	; 0x80
 80085bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a25      	ldr	r2, [pc, #148]	; (800865c <UART_SetConfig+0x66c>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	f040 80b8 	bne.w	800873c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80085d0:	2b08      	cmp	r3, #8
 80085d2:	d019      	beq.n	8008608 <UART_SetConfig+0x618>
 80085d4:	2b08      	cmp	r3, #8
 80085d6:	dc04      	bgt.n	80085e2 <UART_SetConfig+0x5f2>
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d009      	beq.n	80085f0 <UART_SetConfig+0x600>
 80085dc:	2b04      	cmp	r3, #4
 80085de:	d00b      	beq.n	80085f8 <UART_SetConfig+0x608>
 80085e0:	e042      	b.n	8008668 <UART_SetConfig+0x678>
 80085e2:	2b20      	cmp	r3, #32
 80085e4:	d02b      	beq.n	800863e <UART_SetConfig+0x64e>
 80085e6:	2b40      	cmp	r3, #64	; 0x40
 80085e8:	d02c      	beq.n	8008644 <UART_SetConfig+0x654>
 80085ea:	2b10      	cmp	r3, #16
 80085ec:	d014      	beq.n	8008618 <UART_SetConfig+0x628>
 80085ee:	e03b      	b.n	8008668 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80085f0:	f7fd ff7c 	bl	80064ec <HAL_RCCEx_GetD3PCLK1Freq>
 80085f4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80085f6:	e03d      	b.n	8008674 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085f8:	f107 0314 	add.w	r3, r7, #20
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7fd ff8b 	bl	8006518 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008606:	e035      	b.n	8008674 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008608:	f107 0308 	add.w	r3, r7, #8
 800860c:	4618      	mov	r0, r3
 800860e:	f7fe f8cf 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008616:	e02d      	b.n	8008674 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008618:	4b0d      	ldr	r3, [pc, #52]	; (8008650 <UART_SetConfig+0x660>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0320 	and.w	r3, r3, #32
 8008620:	2b00      	cmp	r3, #0
 8008622:	d009      	beq.n	8008638 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008624:	4b0a      	ldr	r3, [pc, #40]	; (8008650 <UART_SetConfig+0x660>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	08db      	lsrs	r3, r3, #3
 800862a:	f003 0303 	and.w	r3, r3, #3
 800862e:	4a0c      	ldr	r2, [pc, #48]	; (8008660 <UART_SetConfig+0x670>)
 8008630:	fa22 f303 	lsr.w	r3, r2, r3
 8008634:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008636:	e01d      	b.n	8008674 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8008638:	4b09      	ldr	r3, [pc, #36]	; (8008660 <UART_SetConfig+0x670>)
 800863a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800863c:	e01a      	b.n	8008674 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800863e:	4b09      	ldr	r3, [pc, #36]	; (8008664 <UART_SetConfig+0x674>)
 8008640:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008642:	e017      	b.n	8008674 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008644:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008648:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800864a:	e013      	b.n	8008674 <UART_SetConfig+0x684>
 800864c:	40011400 	.word	0x40011400
 8008650:	58024400 	.word	0x58024400
 8008654:	40007800 	.word	0x40007800
 8008658:	40007c00 	.word	0x40007c00
 800865c:	58000c00 	.word	0x58000c00
 8008660:	03d09000 	.word	0x03d09000
 8008664:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008672:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 824d 	beq.w	8008b16 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	4aad      	ldr	r2, [pc, #692]	; (8008938 <UART_SetConfig+0x948>)
 8008682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008686:	461a      	mov	r2, r3
 8008688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868a:	fbb3 f3f2 	udiv	r3, r3, r2
 800868e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	4613      	mov	r3, r2
 8008696:	005b      	lsls	r3, r3, #1
 8008698:	4413      	add	r3, r2
 800869a:	6a3a      	ldr	r2, [r7, #32]
 800869c:	429a      	cmp	r2, r3
 800869e:	d305      	bcc.n	80086ac <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086a6:	6a3a      	ldr	r2, [r7, #32]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d903      	bls.n	80086b4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80086b2:	e230      	b.n	8008b16 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b6:	4618      	mov	r0, r3
 80086b8:	f04f 0100 	mov.w	r1, #0
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c0:	4a9d      	ldr	r2, [pc, #628]	; (8008938 <UART_SetConfig+0x948>)
 80086c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	f04f 0400 	mov.w	r4, #0
 80086cc:	461a      	mov	r2, r3
 80086ce:	4623      	mov	r3, r4
 80086d0:	f7f7 fe56 	bl	8000380 <__aeabi_uldivmod>
 80086d4:	4603      	mov	r3, r0
 80086d6:	460c      	mov	r4, r1
 80086d8:	4619      	mov	r1, r3
 80086da:	4622      	mov	r2, r4
 80086dc:	f04f 0300 	mov.w	r3, #0
 80086e0:	f04f 0400 	mov.w	r4, #0
 80086e4:	0214      	lsls	r4, r2, #8
 80086e6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80086ea:	020b      	lsls	r3, r1, #8
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	6852      	ldr	r2, [r2, #4]
 80086f0:	0852      	lsrs	r2, r2, #1
 80086f2:	4611      	mov	r1, r2
 80086f4:	f04f 0200 	mov.w	r2, #0
 80086f8:	eb13 0b01 	adds.w	fp, r3, r1
 80086fc:	eb44 0c02 	adc.w	ip, r4, r2
 8008700:	4658      	mov	r0, fp
 8008702:	4661      	mov	r1, ip
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	f04f 0400 	mov.w	r4, #0
 800870c:	461a      	mov	r2, r3
 800870e:	4623      	mov	r3, r4
 8008710:	f7f7 fe36 	bl	8000380 <__aeabi_uldivmod>
 8008714:	4603      	mov	r3, r0
 8008716:	460c      	mov	r4, r1
 8008718:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008720:	d308      	bcc.n	8008734 <UART_SetConfig+0x744>
 8008722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008728:	d204      	bcs.n	8008734 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008730:	60da      	str	r2, [r3, #12]
 8008732:	e1f0      	b.n	8008b16 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800873a:	e1ec      	b.n	8008b16 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	69db      	ldr	r3, [r3, #28]
 8008740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008744:	f040 8100 	bne.w	8008948 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8008748:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800874c:	2b40      	cmp	r3, #64	; 0x40
 800874e:	f200 80b7 	bhi.w	80088c0 <UART_SetConfig+0x8d0>
 8008752:	a201      	add	r2, pc, #4	; (adr r2, 8008758 <UART_SetConfig+0x768>)
 8008754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008758:	0800885d 	.word	0x0800885d
 800875c:	08008865 	.word	0x08008865
 8008760:	080088c1 	.word	0x080088c1
 8008764:	080088c1 	.word	0x080088c1
 8008768:	0800886d 	.word	0x0800886d
 800876c:	080088c1 	.word	0x080088c1
 8008770:	080088c1 	.word	0x080088c1
 8008774:	080088c1 	.word	0x080088c1
 8008778:	0800887d 	.word	0x0800887d
 800877c:	080088c1 	.word	0x080088c1
 8008780:	080088c1 	.word	0x080088c1
 8008784:	080088c1 	.word	0x080088c1
 8008788:	080088c1 	.word	0x080088c1
 800878c:	080088c1 	.word	0x080088c1
 8008790:	080088c1 	.word	0x080088c1
 8008794:	080088c1 	.word	0x080088c1
 8008798:	0800888d 	.word	0x0800888d
 800879c:	080088c1 	.word	0x080088c1
 80087a0:	080088c1 	.word	0x080088c1
 80087a4:	080088c1 	.word	0x080088c1
 80087a8:	080088c1 	.word	0x080088c1
 80087ac:	080088c1 	.word	0x080088c1
 80087b0:	080088c1 	.word	0x080088c1
 80087b4:	080088c1 	.word	0x080088c1
 80087b8:	080088c1 	.word	0x080088c1
 80087bc:	080088c1 	.word	0x080088c1
 80087c0:	080088c1 	.word	0x080088c1
 80087c4:	080088c1 	.word	0x080088c1
 80087c8:	080088c1 	.word	0x080088c1
 80087cc:	080088c1 	.word	0x080088c1
 80087d0:	080088c1 	.word	0x080088c1
 80087d4:	080088c1 	.word	0x080088c1
 80087d8:	080088b3 	.word	0x080088b3
 80087dc:	080088c1 	.word	0x080088c1
 80087e0:	080088c1 	.word	0x080088c1
 80087e4:	080088c1 	.word	0x080088c1
 80087e8:	080088c1 	.word	0x080088c1
 80087ec:	080088c1 	.word	0x080088c1
 80087f0:	080088c1 	.word	0x080088c1
 80087f4:	080088c1 	.word	0x080088c1
 80087f8:	080088c1 	.word	0x080088c1
 80087fc:	080088c1 	.word	0x080088c1
 8008800:	080088c1 	.word	0x080088c1
 8008804:	080088c1 	.word	0x080088c1
 8008808:	080088c1 	.word	0x080088c1
 800880c:	080088c1 	.word	0x080088c1
 8008810:	080088c1 	.word	0x080088c1
 8008814:	080088c1 	.word	0x080088c1
 8008818:	080088c1 	.word	0x080088c1
 800881c:	080088c1 	.word	0x080088c1
 8008820:	080088c1 	.word	0x080088c1
 8008824:	080088c1 	.word	0x080088c1
 8008828:	080088c1 	.word	0x080088c1
 800882c:	080088c1 	.word	0x080088c1
 8008830:	080088c1 	.word	0x080088c1
 8008834:	080088c1 	.word	0x080088c1
 8008838:	080088c1 	.word	0x080088c1
 800883c:	080088c1 	.word	0x080088c1
 8008840:	080088c1 	.word	0x080088c1
 8008844:	080088c1 	.word	0x080088c1
 8008848:	080088c1 	.word	0x080088c1
 800884c:	080088c1 	.word	0x080088c1
 8008850:	080088c1 	.word	0x080088c1
 8008854:	080088c1 	.word	0x080088c1
 8008858:	080088b9 	.word	0x080088b9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800885c:	f7fc fcb4 	bl	80051c8 <HAL_RCC_GetPCLK1Freq>
 8008860:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008862:	e033      	b.n	80088cc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008864:	f7fc fcc6 	bl	80051f4 <HAL_RCC_GetPCLK2Freq>
 8008868:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800886a:	e02f      	b.n	80088cc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800886c:	f107 0314 	add.w	r3, r7, #20
 8008870:	4618      	mov	r0, r3
 8008872:	f7fd fe51 	bl	8006518 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800887a:	e027      	b.n	80088cc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800887c:	f107 0308 	add.w	r3, r7, #8
 8008880:	4618      	mov	r0, r3
 8008882:	f7fd ff95 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800888a:	e01f      	b.n	80088cc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800888c:	4b2b      	ldr	r3, [pc, #172]	; (800893c <UART_SetConfig+0x94c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0320 	and.w	r3, r3, #32
 8008894:	2b00      	cmp	r3, #0
 8008896:	d009      	beq.n	80088ac <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008898:	4b28      	ldr	r3, [pc, #160]	; (800893c <UART_SetConfig+0x94c>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	08db      	lsrs	r3, r3, #3
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	4a27      	ldr	r2, [pc, #156]	; (8008940 <UART_SetConfig+0x950>)
 80088a4:	fa22 f303 	lsr.w	r3, r2, r3
 80088a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088aa:	e00f      	b.n	80088cc <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80088ac:	4b24      	ldr	r3, [pc, #144]	; (8008940 <UART_SetConfig+0x950>)
 80088ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088b0:	e00c      	b.n	80088cc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088b2:	4b24      	ldr	r3, [pc, #144]	; (8008944 <UART_SetConfig+0x954>)
 80088b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088b6:	e009      	b.n	80088cc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088be:	e005      	b.n	80088cc <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80088ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f000 8121 	beq.w	8008b16 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	4a17      	ldr	r2, [pc, #92]	; (8008938 <UART_SetConfig+0x948>)
 80088da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088de:	461a      	mov	r2, r3
 80088e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80088e6:	005a      	lsls	r2, r3, #1
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	085b      	lsrs	r3, r3, #1
 80088ee:	441a      	add	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fe:	2b0f      	cmp	r3, #15
 8008900:	d916      	bls.n	8008930 <UART_SetConfig+0x940>
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008908:	d212      	bcs.n	8008930 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890c:	b29b      	uxth	r3, r3
 800890e:	f023 030f 	bic.w	r3, r3, #15
 8008912:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008916:	085b      	lsrs	r3, r3, #1
 8008918:	b29b      	uxth	r3, r3
 800891a:	f003 0307 	and.w	r3, r3, #7
 800891e:	b29a      	uxth	r2, r3
 8008920:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008922:	4313      	orrs	r3, r2
 8008924:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800892c:	60da      	str	r2, [r3, #12]
 800892e:	e0f2      	b.n	8008b16 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008936:	e0ee      	b.n	8008b16 <UART_SetConfig+0xb26>
 8008938:	0800a7fc 	.word	0x0800a7fc
 800893c:	58024400 	.word	0x58024400
 8008940:	03d09000 	.word	0x03d09000
 8008944:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8008948:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800894c:	2b40      	cmp	r3, #64	; 0x40
 800894e:	f200 80b7 	bhi.w	8008ac0 <UART_SetConfig+0xad0>
 8008952:	a201      	add	r2, pc, #4	; (adr r2, 8008958 <UART_SetConfig+0x968>)
 8008954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008958:	08008a5d 	.word	0x08008a5d
 800895c:	08008a65 	.word	0x08008a65
 8008960:	08008ac1 	.word	0x08008ac1
 8008964:	08008ac1 	.word	0x08008ac1
 8008968:	08008a6d 	.word	0x08008a6d
 800896c:	08008ac1 	.word	0x08008ac1
 8008970:	08008ac1 	.word	0x08008ac1
 8008974:	08008ac1 	.word	0x08008ac1
 8008978:	08008a7d 	.word	0x08008a7d
 800897c:	08008ac1 	.word	0x08008ac1
 8008980:	08008ac1 	.word	0x08008ac1
 8008984:	08008ac1 	.word	0x08008ac1
 8008988:	08008ac1 	.word	0x08008ac1
 800898c:	08008ac1 	.word	0x08008ac1
 8008990:	08008ac1 	.word	0x08008ac1
 8008994:	08008ac1 	.word	0x08008ac1
 8008998:	08008a8d 	.word	0x08008a8d
 800899c:	08008ac1 	.word	0x08008ac1
 80089a0:	08008ac1 	.word	0x08008ac1
 80089a4:	08008ac1 	.word	0x08008ac1
 80089a8:	08008ac1 	.word	0x08008ac1
 80089ac:	08008ac1 	.word	0x08008ac1
 80089b0:	08008ac1 	.word	0x08008ac1
 80089b4:	08008ac1 	.word	0x08008ac1
 80089b8:	08008ac1 	.word	0x08008ac1
 80089bc:	08008ac1 	.word	0x08008ac1
 80089c0:	08008ac1 	.word	0x08008ac1
 80089c4:	08008ac1 	.word	0x08008ac1
 80089c8:	08008ac1 	.word	0x08008ac1
 80089cc:	08008ac1 	.word	0x08008ac1
 80089d0:	08008ac1 	.word	0x08008ac1
 80089d4:	08008ac1 	.word	0x08008ac1
 80089d8:	08008ab3 	.word	0x08008ab3
 80089dc:	08008ac1 	.word	0x08008ac1
 80089e0:	08008ac1 	.word	0x08008ac1
 80089e4:	08008ac1 	.word	0x08008ac1
 80089e8:	08008ac1 	.word	0x08008ac1
 80089ec:	08008ac1 	.word	0x08008ac1
 80089f0:	08008ac1 	.word	0x08008ac1
 80089f4:	08008ac1 	.word	0x08008ac1
 80089f8:	08008ac1 	.word	0x08008ac1
 80089fc:	08008ac1 	.word	0x08008ac1
 8008a00:	08008ac1 	.word	0x08008ac1
 8008a04:	08008ac1 	.word	0x08008ac1
 8008a08:	08008ac1 	.word	0x08008ac1
 8008a0c:	08008ac1 	.word	0x08008ac1
 8008a10:	08008ac1 	.word	0x08008ac1
 8008a14:	08008ac1 	.word	0x08008ac1
 8008a18:	08008ac1 	.word	0x08008ac1
 8008a1c:	08008ac1 	.word	0x08008ac1
 8008a20:	08008ac1 	.word	0x08008ac1
 8008a24:	08008ac1 	.word	0x08008ac1
 8008a28:	08008ac1 	.word	0x08008ac1
 8008a2c:	08008ac1 	.word	0x08008ac1
 8008a30:	08008ac1 	.word	0x08008ac1
 8008a34:	08008ac1 	.word	0x08008ac1
 8008a38:	08008ac1 	.word	0x08008ac1
 8008a3c:	08008ac1 	.word	0x08008ac1
 8008a40:	08008ac1 	.word	0x08008ac1
 8008a44:	08008ac1 	.word	0x08008ac1
 8008a48:	08008ac1 	.word	0x08008ac1
 8008a4c:	08008ac1 	.word	0x08008ac1
 8008a50:	08008ac1 	.word	0x08008ac1
 8008a54:	08008ac1 	.word	0x08008ac1
 8008a58:	08008ab9 	.word	0x08008ab9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a5c:	f7fc fbb4 	bl	80051c8 <HAL_RCC_GetPCLK1Freq>
 8008a60:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008a62:	e033      	b.n	8008acc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a64:	f7fc fbc6 	bl	80051f4 <HAL_RCC_GetPCLK2Freq>
 8008a68:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008a6a:	e02f      	b.n	8008acc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a6c:	f107 0314 	add.w	r3, r7, #20
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7fd fd51 	bl	8006518 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a7a:	e027      	b.n	8008acc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a7c:	f107 0308 	add.w	r3, r7, #8
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7fd fe95 	bl	80067b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a8a:	e01f      	b.n	8008acc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a8c:	4b2c      	ldr	r3, [pc, #176]	; (8008b40 <UART_SetConfig+0xb50>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0320 	and.w	r3, r3, #32
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d009      	beq.n	8008aac <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a98:	4b29      	ldr	r3, [pc, #164]	; (8008b40 <UART_SetConfig+0xb50>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	08db      	lsrs	r3, r3, #3
 8008a9e:	f003 0303 	and.w	r3, r3, #3
 8008aa2:	4a28      	ldr	r2, [pc, #160]	; (8008b44 <UART_SetConfig+0xb54>)
 8008aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008aaa:	e00f      	b.n	8008acc <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8008aac:	4b25      	ldr	r3, [pc, #148]	; (8008b44 <UART_SetConfig+0xb54>)
 8008aae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ab0:	e00c      	b.n	8008acc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ab2:	4b25      	ldr	r3, [pc, #148]	; (8008b48 <UART_SetConfig+0xb58>)
 8008ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ab6:	e009      	b.n	8008acc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ab8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008abe:	e005      	b.n	8008acc <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008aca:	bf00      	nop
    }

    if (pclk != 0U)
 8008acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d021      	beq.n	8008b16 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad6:	4a1d      	ldr	r2, [pc, #116]	; (8008b4c <UART_SetConfig+0xb5c>)
 8008ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008adc:	461a      	mov	r2, r3
 8008ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae0:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	085b      	lsrs	r3, r3, #1
 8008aea:	441a      	add	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afa:	2b0f      	cmp	r3, #15
 8008afc:	d908      	bls.n	8008b10 <UART_SetConfig+0xb20>
 8008afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b04:	d204      	bcs.n	8008b10 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b0c:	60da      	str	r2, [r3, #12]
 8008b0e:	e002      	b.n	8008b16 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008b32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3738      	adds	r7, #56	; 0x38
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008b40:	58024400 	.word	0x58024400
 8008b44:	03d09000 	.word	0x03d09000
 8008b48:	003d0900 	.word	0x003d0900
 8008b4c:	0800a7fc 	.word	0x0800a7fc

08008b50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00a      	beq.n	8008b7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7e:	f003 0302 	and.w	r3, r3, #2
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00a      	beq.n	8008b9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba0:	f003 0304 	and.w	r3, r3, #4
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00a      	beq.n	8008bbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc2:	f003 0308 	and.w	r3, r3, #8
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00a      	beq.n	8008be0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	430a      	orrs	r2, r1
 8008bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be4:	f003 0310 	and.w	r3, r3, #16
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00a      	beq.n	8008c02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c06:	f003 0320 	and.w	r3, r3, #32
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00a      	beq.n	8008c24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	430a      	orrs	r2, r1
 8008c22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d01a      	beq.n	8008c66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	430a      	orrs	r2, r1
 8008c44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c4e:	d10a      	bne.n	8008c66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	430a      	orrs	r2, r1
 8008c64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00a      	beq.n	8008c88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	430a      	orrs	r2, r1
 8008c86:	605a      	str	r2, [r3, #4]
  }
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b086      	sub	sp, #24
 8008c98:	af02      	add	r7, sp, #8
 8008c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008ca4:	f7f9 fa4a 	bl	800213c <HAL_GetTick>
 8008ca8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0308 	and.w	r3, r3, #8
 8008cb4:	2b08      	cmp	r3, #8
 8008cb6:	d10e      	bne.n	8008cd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f82c 	bl	8008d24 <UART_WaitOnFlagUntilTimeout>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e022      	b.n	8008d1c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0304 	and.w	r3, r3, #4
 8008ce0:	2b04      	cmp	r3, #4
 8008ce2:	d10e      	bne.n	8008d02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f816 	bl	8008d24 <UART_WaitOnFlagUntilTimeout>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d001      	beq.n	8008d02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e00c      	b.n	8008d1c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2220      	movs	r2, #32
 8008d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2220      	movs	r2, #32
 8008d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	603b      	str	r3, [r7, #0]
 8008d30:	4613      	mov	r3, r2
 8008d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d34:	e062      	b.n	8008dfc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d3c:	d05e      	beq.n	8008dfc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d3e:	f7f9 f9fd 	bl	800213c <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	69ba      	ldr	r2, [r7, #24]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d302      	bcc.n	8008d54 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d11d      	bne.n	8008d90 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d62:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689a      	ldr	r2, [r3, #8]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f022 0201 	bic.w	r2, r2, #1
 8008d72:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2220      	movs	r2, #32
 8008d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2220      	movs	r2, #32
 8008d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	e045      	b.n	8008e1c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0304 	and.w	r3, r3, #4
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d02e      	beq.n	8008dfc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	69db      	ldr	r3, [r3, #28]
 8008da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dac:	d126      	bne.n	8008dfc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008db6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008dc6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	689a      	ldr	r2, [r3, #8]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f022 0201 	bic.w	r2, r2, #1
 8008dd6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2220      	movs	r2, #32
 8008ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2220      	movs	r2, #32
 8008de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2220      	movs	r2, #32
 8008dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e00f      	b.n	8008e1c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	69da      	ldr	r2, [r3, #28]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	4013      	ands	r3, r2
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	bf0c      	ite	eq
 8008e0c:	2301      	moveq	r3, #1
 8008e0e:	2300      	movne	r3, #0
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	461a      	mov	r2, r3
 8008e14:	79fb      	ldrb	r3, [r7, #7]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d08d      	beq.n	8008d36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d101      	bne.n	8008e3a <HAL_UARTEx_DisableFifoMode+0x16>
 8008e36:	2302      	movs	r3, #2
 8008e38:	e027      	b.n	8008e8a <HAL_UARTEx_DisableFifoMode+0x66>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2224      	movs	r2, #36	; 0x24
 8008e46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f022 0201 	bic.w	r2, r2, #1
 8008e60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2220      	movs	r2, #32
 8008e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b084      	sub	sp, #16
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d101      	bne.n	8008eae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008eaa:	2302      	movs	r3, #2
 8008eac:	e02d      	b.n	8008f0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2224      	movs	r2, #36	; 0x24
 8008eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f022 0201 	bic.w	r2, r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	683a      	ldr	r2, [r7, #0]
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f850 	bl	8008f90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2220      	movs	r2, #32
 8008efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b084      	sub	sp, #16
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d101      	bne.n	8008f2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f26:	2302      	movs	r3, #2
 8008f28:	e02d      	b.n	8008f86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2224      	movs	r2, #36	; 0x24
 8008f36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f022 0201 	bic.w	r2, r2, #1
 8008f50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	683a      	ldr	r2, [r7, #0]
 8008f62:	430a      	orrs	r2, r1
 8008f64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f812 	bl	8008f90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2220      	movs	r2, #32
 8008f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
	...

08008f90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b089      	sub	sp, #36	; 0x24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008f98:	4a2f      	ldr	r2, [pc, #188]	; (8009058 <UARTEx_SetNbDataToProcess+0xc8>)
 8008f9a:	f107 0314 	add.w	r3, r7, #20
 8008f9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fa2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008fa6:	4a2d      	ldr	r2, [pc, #180]	; (800905c <UARTEx_SetNbDataToProcess+0xcc>)
 8008fa8:	f107 030c 	add.w	r3, r7, #12
 8008fac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fb0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d108      	bne.n	8008fce <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008fcc:	e03d      	b.n	800904a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fce:	2310      	movs	r3, #16
 8008fd0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fd2:	2310      	movs	r3, #16
 8008fd4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	0e5b      	lsrs	r3, r3, #25
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	f003 0307 	and.w	r3, r3, #7
 8008fe4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	0f5b      	lsrs	r3, r3, #29
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	f003 0307 	and.w	r3, r3, #7
 8008ff4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008ff6:	7fbb      	ldrb	r3, [r7, #30]
 8008ff8:	7f3a      	ldrb	r2, [r7, #28]
 8008ffa:	f107 0120 	add.w	r1, r7, #32
 8008ffe:	440a      	add	r2, r1
 8009000:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009004:	fb02 f303 	mul.w	r3, r2, r3
 8009008:	7f3a      	ldrb	r2, [r7, #28]
 800900a:	f107 0120 	add.w	r1, r7, #32
 800900e:	440a      	add	r2, r1
 8009010:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009014:	fb93 f3f2 	sdiv	r3, r3, r2
 8009018:	b29a      	uxth	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009020:	7ffb      	ldrb	r3, [r7, #31]
 8009022:	7f7a      	ldrb	r2, [r7, #29]
 8009024:	f107 0120 	add.w	r1, r7, #32
 8009028:	440a      	add	r2, r1
 800902a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800902e:	fb02 f303 	mul.w	r3, r2, r3
 8009032:	7f7a      	ldrb	r2, [r7, #29]
 8009034:	f107 0120 	add.w	r1, r7, #32
 8009038:	440a      	add	r2, r1
 800903a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800903e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009042:	b29a      	uxth	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800904a:	bf00      	nop
 800904c:	3724      	adds	r7, #36	; 0x24
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	0800a7dc 	.word	0x0800a7dc
 800905c:	0800a7e4 	.word	0x0800a7e4

08009060 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009060:	b084      	sub	sp, #16
 8009062:	b580      	push	{r7, lr}
 8009064:	b084      	sub	sp, #16
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	f107 001c 	add.w	r0, r7, #28
 800906e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	2b01      	cmp	r3, #1
 8009076:	d120      	bne.n	80090ba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68da      	ldr	r2, [r3, #12]
 8009088:	4b25      	ldr	r3, [pc, #148]	; (8009120 <USB_CoreInit+0xc0>)
 800908a:	4013      	ands	r3, r2
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800909c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d105      	bne.n	80090ae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa4c 	bl	800954c <USB_CoreReset>
 80090b4:	4603      	mov	r3, r0
 80090b6:	73fb      	strb	r3, [r7, #15]
 80090b8:	e01a      	b.n	80090f0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fa40 	bl	800954c <USB_CoreReset>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80090d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d106      	bne.n	80090e4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	639a      	str	r2, [r3, #56]	; 0x38
 80090e2:	e005      	b.n	80090f0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80090f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d10b      	bne.n	800910e <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f043 0206 	orr.w	r2, r3, #6
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	f043 0220 	orr.w	r2, r3, #32
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800910e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800911a:	b004      	add	sp, #16
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	ffbdffbf 	.word	0xffbdffbf

08009124 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	f023 0201 	bic.w	r2, r3, #1
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b082      	sub	sp, #8
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	460b      	mov	r3, r1
 8009150:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800915e:	78fb      	ldrb	r3, [r7, #3]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d106      	bne.n	8009172 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	60da      	str	r2, [r3, #12]
 8009170:	e00b      	b.n	800918a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009172:	78fb      	ldrb	r3, [r7, #3]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d106      	bne.n	8009186 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	60da      	str	r2, [r3, #12]
 8009184:	e001      	b.n	800918a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e003      	b.n	8009192 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800918a:	2032      	movs	r0, #50	; 0x32
 800918c:	f7f8 ffe2 	bl	8002154 <HAL_Delay>

  return HAL_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
	...

0800919c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800919c:	b084      	sub	sp, #16
 800919e:	b580      	push	{r7, lr}
 80091a0:	b086      	sub	sp, #24
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80091aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80091b6:	2300      	movs	r3, #0
 80091b8:	613b      	str	r3, [r7, #16]
 80091ba:	e009      	b.n	80091d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	3340      	adds	r3, #64	; 0x40
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	2200      	movs	r2, #0
 80091c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	3301      	adds	r3, #1
 80091ce:	613b      	str	r3, [r7, #16]
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	2b0e      	cmp	r3, #14
 80091d4:	d9f2      	bls.n	80091bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80091d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d11c      	bne.n	8009216 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091ea:	f043 0302 	orr.w	r3, r3, #2
 80091ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	601a      	str	r2, [r3, #0]
 8009214:	e005      	b.n	8009222 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009228:	461a      	mov	r2, r3
 800922a:	2300      	movs	r3, #0
 800922c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009234:	4619      	mov	r1, r3
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800923c:	461a      	mov	r2, r3
 800923e:	680b      	ldr	r3, [r1, #0]
 8009240:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009244:	2b01      	cmp	r3, #1
 8009246:	d10c      	bne.n	8009262 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	2b00      	cmp	r3, #0
 800924c:	d104      	bne.n	8009258 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800924e:	2100      	movs	r1, #0
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f949 	bl	80094e8 <USB_SetDevSpeed>
 8009256:	e008      	b.n	800926a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009258:	2101      	movs	r1, #1
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f944 	bl	80094e8 <USB_SetDevSpeed>
 8009260:	e003      	b.n	800926a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009262:	2103      	movs	r1, #3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f93f 	bl	80094e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800926a:	2110      	movs	r1, #16
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f8f3 	bl	8009458 <USB_FlushTxFifo>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 f911 	bl	80094a4 <USB_FlushRxFifo>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009292:	461a      	mov	r2, r3
 8009294:	2300      	movs	r3, #0
 8009296:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800929e:	461a      	mov	r2, r3
 80092a0:	2300      	movs	r3, #0
 80092a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092aa:	461a      	mov	r2, r3
 80092ac:	2300      	movs	r3, #0
 80092ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092b0:	2300      	movs	r3, #0
 80092b2:	613b      	str	r3, [r7, #16]
 80092b4:	e043      	b.n	800933e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092cc:	d118      	bne.n	8009300 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10a      	bne.n	80092ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	015a      	lsls	r2, r3, #5
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	4413      	add	r3, r2
 80092dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e0:	461a      	mov	r2, r3
 80092e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092e6:	6013      	str	r3, [r2, #0]
 80092e8:	e013      	b.n	8009312 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	015a      	lsls	r2, r3, #5
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f6:	461a      	mov	r2, r3
 80092f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092fc:	6013      	str	r3, [r2, #0]
 80092fe:	e008      	b.n	8009312 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930c:	461a      	mov	r2, r3
 800930e:	2300      	movs	r3, #0
 8009310:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	015a      	lsls	r2, r3, #5
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	4413      	add	r3, r2
 800931a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800931e:	461a      	mov	r2, r3
 8009320:	2300      	movs	r3, #0
 8009322:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009330:	461a      	mov	r2, r3
 8009332:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009336:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	3301      	adds	r3, #1
 800933c:	613b      	str	r3, [r7, #16]
 800933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	429a      	cmp	r2, r3
 8009344:	d3b7      	bcc.n	80092b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009346:	2300      	movs	r3, #0
 8009348:	613b      	str	r3, [r7, #16]
 800934a:	e043      	b.n	80093d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	015a      	lsls	r2, r3, #5
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	4413      	add	r3, r2
 8009354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800935e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009362:	d118      	bne.n	8009396 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10a      	bne.n	8009380 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009376:	461a      	mov	r2, r3
 8009378:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800937c:	6013      	str	r3, [r2, #0]
 800937e:	e013      	b.n	80093a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	015a      	lsls	r2, r3, #5
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	4413      	add	r3, r2
 8009388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800938c:	461a      	mov	r2, r3
 800938e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009392:	6013      	str	r3, [r2, #0]
 8009394:	e008      	b.n	80093a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	015a      	lsls	r2, r3, #5
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	4413      	add	r3, r2
 800939e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a2:	461a      	mov	r2, r3
 80093a4:	2300      	movs	r3, #0
 80093a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	015a      	lsls	r2, r3, #5
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	4413      	add	r3, r2
 80093b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b4:	461a      	mov	r2, r3
 80093b6:	2300      	movs	r3, #0
 80093b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	015a      	lsls	r2, r3, #5
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	4413      	add	r3, r2
 80093c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c6:	461a      	mov	r2, r3
 80093c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	3301      	adds	r3, #1
 80093d2:	613b      	str	r3, [r7, #16]
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d3b7      	bcc.n	800934c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80093fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80093fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009400:	2b00      	cmp	r3, #0
 8009402:	d105      	bne.n	8009410 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	f043 0210 	orr.w	r2, r3, #16
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	699a      	ldr	r2, [r3, #24]
 8009414:	4b0e      	ldr	r3, [pc, #56]	; (8009450 <USB_DevInit+0x2b4>)
 8009416:	4313      	orrs	r3, r2
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800941c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800941e:	2b00      	cmp	r3, #0
 8009420:	d005      	beq.n	800942e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	f043 0208 	orr.w	r2, r3, #8
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800942e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009430:	2b01      	cmp	r3, #1
 8009432:	d105      	bne.n	8009440 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	699a      	ldr	r2, [r3, #24]
 8009438:	4b06      	ldr	r3, [pc, #24]	; (8009454 <USB_DevInit+0x2b8>)
 800943a:	4313      	orrs	r3, r2
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009440:	7dfb      	ldrb	r3, [r7, #23]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800944c:	b004      	add	sp, #16
 800944e:	4770      	bx	lr
 8009450:	803c3800 	.word	0x803c3800
 8009454:	40000004 	.word	0x40000004

08009458 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009462:	2300      	movs	r3, #0
 8009464:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	019b      	lsls	r3, r3, #6
 800946a:	f043 0220 	orr.w	r2, r3, #32
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	3301      	adds	r3, #1
 8009476:	60fb      	str	r3, [r7, #12]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	4a09      	ldr	r2, [pc, #36]	; (80094a0 <USB_FlushTxFifo+0x48>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d901      	bls.n	8009484 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	e006      	b.n	8009492 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	f003 0320 	and.w	r3, r3, #32
 800948c:	2b20      	cmp	r3, #32
 800948e:	d0f0      	beq.n	8009472 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3714      	adds	r7, #20
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	00030d40 	.word	0x00030d40

080094a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2210      	movs	r2, #16
 80094b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	3301      	adds	r3, #1
 80094ba:	60fb      	str	r3, [r7, #12]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	4a09      	ldr	r2, [pc, #36]	; (80094e4 <USB_FlushRxFifo+0x40>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d901      	bls.n	80094c8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e006      	b.n	80094d6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	f003 0310 	and.w	r3, r3, #16
 80094d0:	2b10      	cmp	r3, #16
 80094d2:	d0f0      	beq.n	80094b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	00030d40 	.word	0x00030d40

080094e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	460b      	mov	r3, r1
 80094f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	78fb      	ldrb	r3, [r7, #3]
 8009502:	68f9      	ldr	r1, [r7, #12]
 8009504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009508:	4313      	orrs	r3, r2
 800950a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3714      	adds	r7, #20
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr

0800951a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009534:	f043 0302 	orr.w	r3, r3, #2
 8009538:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800953a:	2003      	movs	r0, #3
 800953c:	f7f8 fe0a 	bl	8002154 <HAL_Delay>

  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
	...

0800954c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009554:	2300      	movs	r3, #0
 8009556:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3301      	adds	r3, #1
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	4a13      	ldr	r2, [pc, #76]	; (80095b0 <USB_CoreReset+0x64>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d901      	bls.n	800956a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e01b      	b.n	80095a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	2b00      	cmp	r3, #0
 8009570:	daf2      	bge.n	8009558 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009572:	2300      	movs	r3, #0
 8009574:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	f043 0201 	orr.w	r2, r3, #1
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3301      	adds	r3, #1
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	4a09      	ldr	r2, [pc, #36]	; (80095b0 <USB_CoreReset+0x64>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d901      	bls.n	8009594 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009590:	2303      	movs	r3, #3
 8009592:	e006      	b.n	80095a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b01      	cmp	r3, #1
 800959e:	d0f0      	beq.n	8009582 <USB_CoreReset+0x36>

  return HAL_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	00030d40 	.word	0x00030d40

080095b4 <__errno>:
 80095b4:	4b01      	ldr	r3, [pc, #4]	; (80095bc <__errno+0x8>)
 80095b6:	6818      	ldr	r0, [r3, #0]
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	20000010 	.word	0x20000010

080095c0 <__libc_init_array>:
 80095c0:	b570      	push	{r4, r5, r6, lr}
 80095c2:	4e0d      	ldr	r6, [pc, #52]	; (80095f8 <__libc_init_array+0x38>)
 80095c4:	4c0d      	ldr	r4, [pc, #52]	; (80095fc <__libc_init_array+0x3c>)
 80095c6:	1ba4      	subs	r4, r4, r6
 80095c8:	10a4      	asrs	r4, r4, #2
 80095ca:	2500      	movs	r5, #0
 80095cc:	42a5      	cmp	r5, r4
 80095ce:	d109      	bne.n	80095e4 <__libc_init_array+0x24>
 80095d0:	4e0b      	ldr	r6, [pc, #44]	; (8009600 <__libc_init_array+0x40>)
 80095d2:	4c0c      	ldr	r4, [pc, #48]	; (8009604 <__libc_init_array+0x44>)
 80095d4:	f001 f8c8 	bl	800a768 <_init>
 80095d8:	1ba4      	subs	r4, r4, r6
 80095da:	10a4      	asrs	r4, r4, #2
 80095dc:	2500      	movs	r5, #0
 80095de:	42a5      	cmp	r5, r4
 80095e0:	d105      	bne.n	80095ee <__libc_init_array+0x2e>
 80095e2:	bd70      	pop	{r4, r5, r6, pc}
 80095e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095e8:	4798      	blx	r3
 80095ea:	3501      	adds	r5, #1
 80095ec:	e7ee      	b.n	80095cc <__libc_init_array+0xc>
 80095ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095f2:	4798      	blx	r3
 80095f4:	3501      	adds	r5, #1
 80095f6:	e7f2      	b.n	80095de <__libc_init_array+0x1e>
 80095f8:	0800a8b4 	.word	0x0800a8b4
 80095fc:	0800a8b4 	.word	0x0800a8b4
 8009600:	0800a8b4 	.word	0x0800a8b4
 8009604:	0800a8b8 	.word	0x0800a8b8

08009608 <memset>:
 8009608:	4402      	add	r2, r0
 800960a:	4603      	mov	r3, r0
 800960c:	4293      	cmp	r3, r2
 800960e:	d100      	bne.n	8009612 <memset+0xa>
 8009610:	4770      	bx	lr
 8009612:	f803 1b01 	strb.w	r1, [r3], #1
 8009616:	e7f9      	b.n	800960c <memset+0x4>

08009618 <iprintf>:
 8009618:	b40f      	push	{r0, r1, r2, r3}
 800961a:	4b0a      	ldr	r3, [pc, #40]	; (8009644 <iprintf+0x2c>)
 800961c:	b513      	push	{r0, r1, r4, lr}
 800961e:	681c      	ldr	r4, [r3, #0]
 8009620:	b124      	cbz	r4, 800962c <iprintf+0x14>
 8009622:	69a3      	ldr	r3, [r4, #24]
 8009624:	b913      	cbnz	r3, 800962c <iprintf+0x14>
 8009626:	4620      	mov	r0, r4
 8009628:	f000 f86e 	bl	8009708 <__sinit>
 800962c:	ab05      	add	r3, sp, #20
 800962e:	9a04      	ldr	r2, [sp, #16]
 8009630:	68a1      	ldr	r1, [r4, #8]
 8009632:	9301      	str	r3, [sp, #4]
 8009634:	4620      	mov	r0, r4
 8009636:	f000 fac7 	bl	8009bc8 <_vfiprintf_r>
 800963a:	b002      	add	sp, #8
 800963c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009640:	b004      	add	sp, #16
 8009642:	4770      	bx	lr
 8009644:	20000010 	.word	0x20000010

08009648 <siprintf>:
 8009648:	b40e      	push	{r1, r2, r3}
 800964a:	b500      	push	{lr}
 800964c:	b09c      	sub	sp, #112	; 0x70
 800964e:	ab1d      	add	r3, sp, #116	; 0x74
 8009650:	9002      	str	r0, [sp, #8]
 8009652:	9006      	str	r0, [sp, #24]
 8009654:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009658:	4809      	ldr	r0, [pc, #36]	; (8009680 <siprintf+0x38>)
 800965a:	9107      	str	r1, [sp, #28]
 800965c:	9104      	str	r1, [sp, #16]
 800965e:	4909      	ldr	r1, [pc, #36]	; (8009684 <siprintf+0x3c>)
 8009660:	f853 2b04 	ldr.w	r2, [r3], #4
 8009664:	9105      	str	r1, [sp, #20]
 8009666:	6800      	ldr	r0, [r0, #0]
 8009668:	9301      	str	r3, [sp, #4]
 800966a:	a902      	add	r1, sp, #8
 800966c:	f000 f98a 	bl	8009984 <_svfiprintf_r>
 8009670:	9b02      	ldr	r3, [sp, #8]
 8009672:	2200      	movs	r2, #0
 8009674:	701a      	strb	r2, [r3, #0]
 8009676:	b01c      	add	sp, #112	; 0x70
 8009678:	f85d eb04 	ldr.w	lr, [sp], #4
 800967c:	b003      	add	sp, #12
 800967e:	4770      	bx	lr
 8009680:	20000010 	.word	0x20000010
 8009684:	ffff0208 	.word	0xffff0208

08009688 <std>:
 8009688:	2300      	movs	r3, #0
 800968a:	b510      	push	{r4, lr}
 800968c:	4604      	mov	r4, r0
 800968e:	e9c0 3300 	strd	r3, r3, [r0]
 8009692:	6083      	str	r3, [r0, #8]
 8009694:	8181      	strh	r1, [r0, #12]
 8009696:	6643      	str	r3, [r0, #100]	; 0x64
 8009698:	81c2      	strh	r2, [r0, #14]
 800969a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800969e:	6183      	str	r3, [r0, #24]
 80096a0:	4619      	mov	r1, r3
 80096a2:	2208      	movs	r2, #8
 80096a4:	305c      	adds	r0, #92	; 0x5c
 80096a6:	f7ff ffaf 	bl	8009608 <memset>
 80096aa:	4b05      	ldr	r3, [pc, #20]	; (80096c0 <std+0x38>)
 80096ac:	6263      	str	r3, [r4, #36]	; 0x24
 80096ae:	4b05      	ldr	r3, [pc, #20]	; (80096c4 <std+0x3c>)
 80096b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80096b2:	4b05      	ldr	r3, [pc, #20]	; (80096c8 <std+0x40>)
 80096b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096b6:	4b05      	ldr	r3, [pc, #20]	; (80096cc <std+0x44>)
 80096b8:	6224      	str	r4, [r4, #32]
 80096ba:	6323      	str	r3, [r4, #48]	; 0x30
 80096bc:	bd10      	pop	{r4, pc}
 80096be:	bf00      	nop
 80096c0:	0800a125 	.word	0x0800a125
 80096c4:	0800a147 	.word	0x0800a147
 80096c8:	0800a17f 	.word	0x0800a17f
 80096cc:	0800a1a3 	.word	0x0800a1a3

080096d0 <_cleanup_r>:
 80096d0:	4901      	ldr	r1, [pc, #4]	; (80096d8 <_cleanup_r+0x8>)
 80096d2:	f000 b885 	b.w	80097e0 <_fwalk_reent>
 80096d6:	bf00      	nop
 80096d8:	0800a47d 	.word	0x0800a47d

080096dc <__sfmoreglue>:
 80096dc:	b570      	push	{r4, r5, r6, lr}
 80096de:	1e4a      	subs	r2, r1, #1
 80096e0:	2568      	movs	r5, #104	; 0x68
 80096e2:	4355      	muls	r5, r2
 80096e4:	460e      	mov	r6, r1
 80096e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80096ea:	f000 f897 	bl	800981c <_malloc_r>
 80096ee:	4604      	mov	r4, r0
 80096f0:	b140      	cbz	r0, 8009704 <__sfmoreglue+0x28>
 80096f2:	2100      	movs	r1, #0
 80096f4:	e9c0 1600 	strd	r1, r6, [r0]
 80096f8:	300c      	adds	r0, #12
 80096fa:	60a0      	str	r0, [r4, #8]
 80096fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009700:	f7ff ff82 	bl	8009608 <memset>
 8009704:	4620      	mov	r0, r4
 8009706:	bd70      	pop	{r4, r5, r6, pc}

08009708 <__sinit>:
 8009708:	6983      	ldr	r3, [r0, #24]
 800970a:	b510      	push	{r4, lr}
 800970c:	4604      	mov	r4, r0
 800970e:	bb33      	cbnz	r3, 800975e <__sinit+0x56>
 8009710:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009714:	6503      	str	r3, [r0, #80]	; 0x50
 8009716:	4b12      	ldr	r3, [pc, #72]	; (8009760 <__sinit+0x58>)
 8009718:	4a12      	ldr	r2, [pc, #72]	; (8009764 <__sinit+0x5c>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6282      	str	r2, [r0, #40]	; 0x28
 800971e:	4298      	cmp	r0, r3
 8009720:	bf04      	itt	eq
 8009722:	2301      	moveq	r3, #1
 8009724:	6183      	streq	r3, [r0, #24]
 8009726:	f000 f81f 	bl	8009768 <__sfp>
 800972a:	6060      	str	r0, [r4, #4]
 800972c:	4620      	mov	r0, r4
 800972e:	f000 f81b 	bl	8009768 <__sfp>
 8009732:	60a0      	str	r0, [r4, #8]
 8009734:	4620      	mov	r0, r4
 8009736:	f000 f817 	bl	8009768 <__sfp>
 800973a:	2200      	movs	r2, #0
 800973c:	60e0      	str	r0, [r4, #12]
 800973e:	2104      	movs	r1, #4
 8009740:	6860      	ldr	r0, [r4, #4]
 8009742:	f7ff ffa1 	bl	8009688 <std>
 8009746:	2201      	movs	r2, #1
 8009748:	2109      	movs	r1, #9
 800974a:	68a0      	ldr	r0, [r4, #8]
 800974c:	f7ff ff9c 	bl	8009688 <std>
 8009750:	2202      	movs	r2, #2
 8009752:	2112      	movs	r1, #18
 8009754:	68e0      	ldr	r0, [r4, #12]
 8009756:	f7ff ff97 	bl	8009688 <std>
 800975a:	2301      	movs	r3, #1
 800975c:	61a3      	str	r3, [r4, #24]
 800975e:	bd10      	pop	{r4, pc}
 8009760:	0800a814 	.word	0x0800a814
 8009764:	080096d1 	.word	0x080096d1

08009768 <__sfp>:
 8009768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976a:	4b1b      	ldr	r3, [pc, #108]	; (80097d8 <__sfp+0x70>)
 800976c:	681e      	ldr	r6, [r3, #0]
 800976e:	69b3      	ldr	r3, [r6, #24]
 8009770:	4607      	mov	r7, r0
 8009772:	b913      	cbnz	r3, 800977a <__sfp+0x12>
 8009774:	4630      	mov	r0, r6
 8009776:	f7ff ffc7 	bl	8009708 <__sinit>
 800977a:	3648      	adds	r6, #72	; 0x48
 800977c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009780:	3b01      	subs	r3, #1
 8009782:	d503      	bpl.n	800978c <__sfp+0x24>
 8009784:	6833      	ldr	r3, [r6, #0]
 8009786:	b133      	cbz	r3, 8009796 <__sfp+0x2e>
 8009788:	6836      	ldr	r6, [r6, #0]
 800978a:	e7f7      	b.n	800977c <__sfp+0x14>
 800978c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009790:	b16d      	cbz	r5, 80097ae <__sfp+0x46>
 8009792:	3468      	adds	r4, #104	; 0x68
 8009794:	e7f4      	b.n	8009780 <__sfp+0x18>
 8009796:	2104      	movs	r1, #4
 8009798:	4638      	mov	r0, r7
 800979a:	f7ff ff9f 	bl	80096dc <__sfmoreglue>
 800979e:	6030      	str	r0, [r6, #0]
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d1f1      	bne.n	8009788 <__sfp+0x20>
 80097a4:	230c      	movs	r3, #12
 80097a6:	603b      	str	r3, [r7, #0]
 80097a8:	4604      	mov	r4, r0
 80097aa:	4620      	mov	r0, r4
 80097ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097ae:	4b0b      	ldr	r3, [pc, #44]	; (80097dc <__sfp+0x74>)
 80097b0:	6665      	str	r5, [r4, #100]	; 0x64
 80097b2:	e9c4 5500 	strd	r5, r5, [r4]
 80097b6:	60a5      	str	r5, [r4, #8]
 80097b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80097bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80097c0:	2208      	movs	r2, #8
 80097c2:	4629      	mov	r1, r5
 80097c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80097c8:	f7ff ff1e 	bl	8009608 <memset>
 80097cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80097d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80097d4:	e7e9      	b.n	80097aa <__sfp+0x42>
 80097d6:	bf00      	nop
 80097d8:	0800a814 	.word	0x0800a814
 80097dc:	ffff0001 	.word	0xffff0001

080097e0 <_fwalk_reent>:
 80097e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097e4:	4680      	mov	r8, r0
 80097e6:	4689      	mov	r9, r1
 80097e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097ec:	2600      	movs	r6, #0
 80097ee:	b914      	cbnz	r4, 80097f6 <_fwalk_reent+0x16>
 80097f0:	4630      	mov	r0, r6
 80097f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80097fa:	3f01      	subs	r7, #1
 80097fc:	d501      	bpl.n	8009802 <_fwalk_reent+0x22>
 80097fe:	6824      	ldr	r4, [r4, #0]
 8009800:	e7f5      	b.n	80097ee <_fwalk_reent+0xe>
 8009802:	89ab      	ldrh	r3, [r5, #12]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d907      	bls.n	8009818 <_fwalk_reent+0x38>
 8009808:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800980c:	3301      	adds	r3, #1
 800980e:	d003      	beq.n	8009818 <_fwalk_reent+0x38>
 8009810:	4629      	mov	r1, r5
 8009812:	4640      	mov	r0, r8
 8009814:	47c8      	blx	r9
 8009816:	4306      	orrs	r6, r0
 8009818:	3568      	adds	r5, #104	; 0x68
 800981a:	e7ee      	b.n	80097fa <_fwalk_reent+0x1a>

0800981c <_malloc_r>:
 800981c:	b570      	push	{r4, r5, r6, lr}
 800981e:	1ccd      	adds	r5, r1, #3
 8009820:	f025 0503 	bic.w	r5, r5, #3
 8009824:	3508      	adds	r5, #8
 8009826:	2d0c      	cmp	r5, #12
 8009828:	bf38      	it	cc
 800982a:	250c      	movcc	r5, #12
 800982c:	2d00      	cmp	r5, #0
 800982e:	4606      	mov	r6, r0
 8009830:	db01      	blt.n	8009836 <_malloc_r+0x1a>
 8009832:	42a9      	cmp	r1, r5
 8009834:	d903      	bls.n	800983e <_malloc_r+0x22>
 8009836:	230c      	movs	r3, #12
 8009838:	6033      	str	r3, [r6, #0]
 800983a:	2000      	movs	r0, #0
 800983c:	bd70      	pop	{r4, r5, r6, pc}
 800983e:	f000 fee1 	bl	800a604 <__malloc_lock>
 8009842:	4a21      	ldr	r2, [pc, #132]	; (80098c8 <_malloc_r+0xac>)
 8009844:	6814      	ldr	r4, [r2, #0]
 8009846:	4621      	mov	r1, r4
 8009848:	b991      	cbnz	r1, 8009870 <_malloc_r+0x54>
 800984a:	4c20      	ldr	r4, [pc, #128]	; (80098cc <_malloc_r+0xb0>)
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	b91b      	cbnz	r3, 8009858 <_malloc_r+0x3c>
 8009850:	4630      	mov	r0, r6
 8009852:	f000 fc57 	bl	800a104 <_sbrk_r>
 8009856:	6020      	str	r0, [r4, #0]
 8009858:	4629      	mov	r1, r5
 800985a:	4630      	mov	r0, r6
 800985c:	f000 fc52 	bl	800a104 <_sbrk_r>
 8009860:	1c43      	adds	r3, r0, #1
 8009862:	d124      	bne.n	80098ae <_malloc_r+0x92>
 8009864:	230c      	movs	r3, #12
 8009866:	6033      	str	r3, [r6, #0]
 8009868:	4630      	mov	r0, r6
 800986a:	f000 fecc 	bl	800a606 <__malloc_unlock>
 800986e:	e7e4      	b.n	800983a <_malloc_r+0x1e>
 8009870:	680b      	ldr	r3, [r1, #0]
 8009872:	1b5b      	subs	r3, r3, r5
 8009874:	d418      	bmi.n	80098a8 <_malloc_r+0x8c>
 8009876:	2b0b      	cmp	r3, #11
 8009878:	d90f      	bls.n	800989a <_malloc_r+0x7e>
 800987a:	600b      	str	r3, [r1, #0]
 800987c:	50cd      	str	r5, [r1, r3]
 800987e:	18cc      	adds	r4, r1, r3
 8009880:	4630      	mov	r0, r6
 8009882:	f000 fec0 	bl	800a606 <__malloc_unlock>
 8009886:	f104 000b 	add.w	r0, r4, #11
 800988a:	1d23      	adds	r3, r4, #4
 800988c:	f020 0007 	bic.w	r0, r0, #7
 8009890:	1ac3      	subs	r3, r0, r3
 8009892:	d0d3      	beq.n	800983c <_malloc_r+0x20>
 8009894:	425a      	negs	r2, r3
 8009896:	50e2      	str	r2, [r4, r3]
 8009898:	e7d0      	b.n	800983c <_malloc_r+0x20>
 800989a:	428c      	cmp	r4, r1
 800989c:	684b      	ldr	r3, [r1, #4]
 800989e:	bf16      	itet	ne
 80098a0:	6063      	strne	r3, [r4, #4]
 80098a2:	6013      	streq	r3, [r2, #0]
 80098a4:	460c      	movne	r4, r1
 80098a6:	e7eb      	b.n	8009880 <_malloc_r+0x64>
 80098a8:	460c      	mov	r4, r1
 80098aa:	6849      	ldr	r1, [r1, #4]
 80098ac:	e7cc      	b.n	8009848 <_malloc_r+0x2c>
 80098ae:	1cc4      	adds	r4, r0, #3
 80098b0:	f024 0403 	bic.w	r4, r4, #3
 80098b4:	42a0      	cmp	r0, r4
 80098b6:	d005      	beq.n	80098c4 <_malloc_r+0xa8>
 80098b8:	1a21      	subs	r1, r4, r0
 80098ba:	4630      	mov	r0, r6
 80098bc:	f000 fc22 	bl	800a104 <_sbrk_r>
 80098c0:	3001      	adds	r0, #1
 80098c2:	d0cf      	beq.n	8009864 <_malloc_r+0x48>
 80098c4:	6025      	str	r5, [r4, #0]
 80098c6:	e7db      	b.n	8009880 <_malloc_r+0x64>
 80098c8:	20000094 	.word	0x20000094
 80098cc:	20000098 	.word	0x20000098

080098d0 <__ssputs_r>:
 80098d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098d4:	688e      	ldr	r6, [r1, #8]
 80098d6:	429e      	cmp	r6, r3
 80098d8:	4682      	mov	sl, r0
 80098da:	460c      	mov	r4, r1
 80098dc:	4690      	mov	r8, r2
 80098de:	4699      	mov	r9, r3
 80098e0:	d837      	bhi.n	8009952 <__ssputs_r+0x82>
 80098e2:	898a      	ldrh	r2, [r1, #12]
 80098e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098e8:	d031      	beq.n	800994e <__ssputs_r+0x7e>
 80098ea:	6825      	ldr	r5, [r4, #0]
 80098ec:	6909      	ldr	r1, [r1, #16]
 80098ee:	1a6f      	subs	r7, r5, r1
 80098f0:	6965      	ldr	r5, [r4, #20]
 80098f2:	2302      	movs	r3, #2
 80098f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80098fc:	f109 0301 	add.w	r3, r9, #1
 8009900:	443b      	add	r3, r7
 8009902:	429d      	cmp	r5, r3
 8009904:	bf38      	it	cc
 8009906:	461d      	movcc	r5, r3
 8009908:	0553      	lsls	r3, r2, #21
 800990a:	d530      	bpl.n	800996e <__ssputs_r+0x9e>
 800990c:	4629      	mov	r1, r5
 800990e:	f7ff ff85 	bl	800981c <_malloc_r>
 8009912:	4606      	mov	r6, r0
 8009914:	b950      	cbnz	r0, 800992c <__ssputs_r+0x5c>
 8009916:	230c      	movs	r3, #12
 8009918:	f8ca 3000 	str.w	r3, [sl]
 800991c:	89a3      	ldrh	r3, [r4, #12]
 800991e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009922:	81a3      	strh	r3, [r4, #12]
 8009924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800992c:	463a      	mov	r2, r7
 800992e:	6921      	ldr	r1, [r4, #16]
 8009930:	f000 fe44 	bl	800a5bc <memcpy>
 8009934:	89a3      	ldrh	r3, [r4, #12]
 8009936:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800993a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800993e:	81a3      	strh	r3, [r4, #12]
 8009940:	6126      	str	r6, [r4, #16]
 8009942:	6165      	str	r5, [r4, #20]
 8009944:	443e      	add	r6, r7
 8009946:	1bed      	subs	r5, r5, r7
 8009948:	6026      	str	r6, [r4, #0]
 800994a:	60a5      	str	r5, [r4, #8]
 800994c:	464e      	mov	r6, r9
 800994e:	454e      	cmp	r6, r9
 8009950:	d900      	bls.n	8009954 <__ssputs_r+0x84>
 8009952:	464e      	mov	r6, r9
 8009954:	4632      	mov	r2, r6
 8009956:	4641      	mov	r1, r8
 8009958:	6820      	ldr	r0, [r4, #0]
 800995a:	f000 fe3a 	bl	800a5d2 <memmove>
 800995e:	68a3      	ldr	r3, [r4, #8]
 8009960:	1b9b      	subs	r3, r3, r6
 8009962:	60a3      	str	r3, [r4, #8]
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	441e      	add	r6, r3
 8009968:	6026      	str	r6, [r4, #0]
 800996a:	2000      	movs	r0, #0
 800996c:	e7dc      	b.n	8009928 <__ssputs_r+0x58>
 800996e:	462a      	mov	r2, r5
 8009970:	f000 fe98 	bl	800a6a4 <_realloc_r>
 8009974:	4606      	mov	r6, r0
 8009976:	2800      	cmp	r0, #0
 8009978:	d1e2      	bne.n	8009940 <__ssputs_r+0x70>
 800997a:	6921      	ldr	r1, [r4, #16]
 800997c:	4650      	mov	r0, sl
 800997e:	f000 fe43 	bl	800a608 <_free_r>
 8009982:	e7c8      	b.n	8009916 <__ssputs_r+0x46>

08009984 <_svfiprintf_r>:
 8009984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009988:	461d      	mov	r5, r3
 800998a:	898b      	ldrh	r3, [r1, #12]
 800998c:	061f      	lsls	r7, r3, #24
 800998e:	b09d      	sub	sp, #116	; 0x74
 8009990:	4680      	mov	r8, r0
 8009992:	460c      	mov	r4, r1
 8009994:	4616      	mov	r6, r2
 8009996:	d50f      	bpl.n	80099b8 <_svfiprintf_r+0x34>
 8009998:	690b      	ldr	r3, [r1, #16]
 800999a:	b96b      	cbnz	r3, 80099b8 <_svfiprintf_r+0x34>
 800999c:	2140      	movs	r1, #64	; 0x40
 800999e:	f7ff ff3d 	bl	800981c <_malloc_r>
 80099a2:	6020      	str	r0, [r4, #0]
 80099a4:	6120      	str	r0, [r4, #16]
 80099a6:	b928      	cbnz	r0, 80099b4 <_svfiprintf_r+0x30>
 80099a8:	230c      	movs	r3, #12
 80099aa:	f8c8 3000 	str.w	r3, [r8]
 80099ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099b2:	e0c8      	b.n	8009b46 <_svfiprintf_r+0x1c2>
 80099b4:	2340      	movs	r3, #64	; 0x40
 80099b6:	6163      	str	r3, [r4, #20]
 80099b8:	2300      	movs	r3, #0
 80099ba:	9309      	str	r3, [sp, #36]	; 0x24
 80099bc:	2320      	movs	r3, #32
 80099be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099c2:	2330      	movs	r3, #48	; 0x30
 80099c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099c8:	9503      	str	r5, [sp, #12]
 80099ca:	f04f 0b01 	mov.w	fp, #1
 80099ce:	4637      	mov	r7, r6
 80099d0:	463d      	mov	r5, r7
 80099d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80099d6:	b10b      	cbz	r3, 80099dc <_svfiprintf_r+0x58>
 80099d8:	2b25      	cmp	r3, #37	; 0x25
 80099da:	d13e      	bne.n	8009a5a <_svfiprintf_r+0xd6>
 80099dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80099e0:	d00b      	beq.n	80099fa <_svfiprintf_r+0x76>
 80099e2:	4653      	mov	r3, sl
 80099e4:	4632      	mov	r2, r6
 80099e6:	4621      	mov	r1, r4
 80099e8:	4640      	mov	r0, r8
 80099ea:	f7ff ff71 	bl	80098d0 <__ssputs_r>
 80099ee:	3001      	adds	r0, #1
 80099f0:	f000 80a4 	beq.w	8009b3c <_svfiprintf_r+0x1b8>
 80099f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099f6:	4453      	add	r3, sl
 80099f8:	9309      	str	r3, [sp, #36]	; 0x24
 80099fa:	783b      	ldrb	r3, [r7, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f000 809d 	beq.w	8009b3c <_svfiprintf_r+0x1b8>
 8009a02:	2300      	movs	r3, #0
 8009a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a0c:	9304      	str	r3, [sp, #16]
 8009a0e:	9307      	str	r3, [sp, #28]
 8009a10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a14:	931a      	str	r3, [sp, #104]	; 0x68
 8009a16:	462f      	mov	r7, r5
 8009a18:	2205      	movs	r2, #5
 8009a1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009a1e:	4850      	ldr	r0, [pc, #320]	; (8009b60 <_svfiprintf_r+0x1dc>)
 8009a20:	f7f6 fc5e 	bl	80002e0 <memchr>
 8009a24:	9b04      	ldr	r3, [sp, #16]
 8009a26:	b9d0      	cbnz	r0, 8009a5e <_svfiprintf_r+0xda>
 8009a28:	06d9      	lsls	r1, r3, #27
 8009a2a:	bf44      	itt	mi
 8009a2c:	2220      	movmi	r2, #32
 8009a2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009a32:	071a      	lsls	r2, r3, #28
 8009a34:	bf44      	itt	mi
 8009a36:	222b      	movmi	r2, #43	; 0x2b
 8009a38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009a3c:	782a      	ldrb	r2, [r5, #0]
 8009a3e:	2a2a      	cmp	r2, #42	; 0x2a
 8009a40:	d015      	beq.n	8009a6e <_svfiprintf_r+0xea>
 8009a42:	9a07      	ldr	r2, [sp, #28]
 8009a44:	462f      	mov	r7, r5
 8009a46:	2000      	movs	r0, #0
 8009a48:	250a      	movs	r5, #10
 8009a4a:	4639      	mov	r1, r7
 8009a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a50:	3b30      	subs	r3, #48	; 0x30
 8009a52:	2b09      	cmp	r3, #9
 8009a54:	d94d      	bls.n	8009af2 <_svfiprintf_r+0x16e>
 8009a56:	b1b8      	cbz	r0, 8009a88 <_svfiprintf_r+0x104>
 8009a58:	e00f      	b.n	8009a7a <_svfiprintf_r+0xf6>
 8009a5a:	462f      	mov	r7, r5
 8009a5c:	e7b8      	b.n	80099d0 <_svfiprintf_r+0x4c>
 8009a5e:	4a40      	ldr	r2, [pc, #256]	; (8009b60 <_svfiprintf_r+0x1dc>)
 8009a60:	1a80      	subs	r0, r0, r2
 8009a62:	fa0b f000 	lsl.w	r0, fp, r0
 8009a66:	4318      	orrs	r0, r3
 8009a68:	9004      	str	r0, [sp, #16]
 8009a6a:	463d      	mov	r5, r7
 8009a6c:	e7d3      	b.n	8009a16 <_svfiprintf_r+0x92>
 8009a6e:	9a03      	ldr	r2, [sp, #12]
 8009a70:	1d11      	adds	r1, r2, #4
 8009a72:	6812      	ldr	r2, [r2, #0]
 8009a74:	9103      	str	r1, [sp, #12]
 8009a76:	2a00      	cmp	r2, #0
 8009a78:	db01      	blt.n	8009a7e <_svfiprintf_r+0xfa>
 8009a7a:	9207      	str	r2, [sp, #28]
 8009a7c:	e004      	b.n	8009a88 <_svfiprintf_r+0x104>
 8009a7e:	4252      	negs	r2, r2
 8009a80:	f043 0302 	orr.w	r3, r3, #2
 8009a84:	9207      	str	r2, [sp, #28]
 8009a86:	9304      	str	r3, [sp, #16]
 8009a88:	783b      	ldrb	r3, [r7, #0]
 8009a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a8c:	d10c      	bne.n	8009aa8 <_svfiprintf_r+0x124>
 8009a8e:	787b      	ldrb	r3, [r7, #1]
 8009a90:	2b2a      	cmp	r3, #42	; 0x2a
 8009a92:	d133      	bne.n	8009afc <_svfiprintf_r+0x178>
 8009a94:	9b03      	ldr	r3, [sp, #12]
 8009a96:	1d1a      	adds	r2, r3, #4
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	9203      	str	r2, [sp, #12]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	bfb8      	it	lt
 8009aa0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009aa4:	3702      	adds	r7, #2
 8009aa6:	9305      	str	r3, [sp, #20]
 8009aa8:	4d2e      	ldr	r5, [pc, #184]	; (8009b64 <_svfiprintf_r+0x1e0>)
 8009aaa:	7839      	ldrb	r1, [r7, #0]
 8009aac:	2203      	movs	r2, #3
 8009aae:	4628      	mov	r0, r5
 8009ab0:	f7f6 fc16 	bl	80002e0 <memchr>
 8009ab4:	b138      	cbz	r0, 8009ac6 <_svfiprintf_r+0x142>
 8009ab6:	2340      	movs	r3, #64	; 0x40
 8009ab8:	1b40      	subs	r0, r0, r5
 8009aba:	fa03 f000 	lsl.w	r0, r3, r0
 8009abe:	9b04      	ldr	r3, [sp, #16]
 8009ac0:	4303      	orrs	r3, r0
 8009ac2:	3701      	adds	r7, #1
 8009ac4:	9304      	str	r3, [sp, #16]
 8009ac6:	7839      	ldrb	r1, [r7, #0]
 8009ac8:	4827      	ldr	r0, [pc, #156]	; (8009b68 <_svfiprintf_r+0x1e4>)
 8009aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ace:	2206      	movs	r2, #6
 8009ad0:	1c7e      	adds	r6, r7, #1
 8009ad2:	f7f6 fc05 	bl	80002e0 <memchr>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d038      	beq.n	8009b4c <_svfiprintf_r+0x1c8>
 8009ada:	4b24      	ldr	r3, [pc, #144]	; (8009b6c <_svfiprintf_r+0x1e8>)
 8009adc:	bb13      	cbnz	r3, 8009b24 <_svfiprintf_r+0x1a0>
 8009ade:	9b03      	ldr	r3, [sp, #12]
 8009ae0:	3307      	adds	r3, #7
 8009ae2:	f023 0307 	bic.w	r3, r3, #7
 8009ae6:	3308      	adds	r3, #8
 8009ae8:	9303      	str	r3, [sp, #12]
 8009aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aec:	444b      	add	r3, r9
 8009aee:	9309      	str	r3, [sp, #36]	; 0x24
 8009af0:	e76d      	b.n	80099ce <_svfiprintf_r+0x4a>
 8009af2:	fb05 3202 	mla	r2, r5, r2, r3
 8009af6:	2001      	movs	r0, #1
 8009af8:	460f      	mov	r7, r1
 8009afa:	e7a6      	b.n	8009a4a <_svfiprintf_r+0xc6>
 8009afc:	2300      	movs	r3, #0
 8009afe:	3701      	adds	r7, #1
 8009b00:	9305      	str	r3, [sp, #20]
 8009b02:	4619      	mov	r1, r3
 8009b04:	250a      	movs	r5, #10
 8009b06:	4638      	mov	r0, r7
 8009b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b0c:	3a30      	subs	r2, #48	; 0x30
 8009b0e:	2a09      	cmp	r2, #9
 8009b10:	d903      	bls.n	8009b1a <_svfiprintf_r+0x196>
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d0c8      	beq.n	8009aa8 <_svfiprintf_r+0x124>
 8009b16:	9105      	str	r1, [sp, #20]
 8009b18:	e7c6      	b.n	8009aa8 <_svfiprintf_r+0x124>
 8009b1a:	fb05 2101 	mla	r1, r5, r1, r2
 8009b1e:	2301      	movs	r3, #1
 8009b20:	4607      	mov	r7, r0
 8009b22:	e7f0      	b.n	8009b06 <_svfiprintf_r+0x182>
 8009b24:	ab03      	add	r3, sp, #12
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	4622      	mov	r2, r4
 8009b2a:	4b11      	ldr	r3, [pc, #68]	; (8009b70 <_svfiprintf_r+0x1ec>)
 8009b2c:	a904      	add	r1, sp, #16
 8009b2e:	4640      	mov	r0, r8
 8009b30:	f3af 8000 	nop.w
 8009b34:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009b38:	4681      	mov	r9, r0
 8009b3a:	d1d6      	bne.n	8009aea <_svfiprintf_r+0x166>
 8009b3c:	89a3      	ldrh	r3, [r4, #12]
 8009b3e:	065b      	lsls	r3, r3, #25
 8009b40:	f53f af35 	bmi.w	80099ae <_svfiprintf_r+0x2a>
 8009b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b46:	b01d      	add	sp, #116	; 0x74
 8009b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4c:	ab03      	add	r3, sp, #12
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	4622      	mov	r2, r4
 8009b52:	4b07      	ldr	r3, [pc, #28]	; (8009b70 <_svfiprintf_r+0x1ec>)
 8009b54:	a904      	add	r1, sp, #16
 8009b56:	4640      	mov	r0, r8
 8009b58:	f000 f9c2 	bl	8009ee0 <_printf_i>
 8009b5c:	e7ea      	b.n	8009b34 <_svfiprintf_r+0x1b0>
 8009b5e:	bf00      	nop
 8009b60:	0800a878 	.word	0x0800a878
 8009b64:	0800a87e 	.word	0x0800a87e
 8009b68:	0800a882 	.word	0x0800a882
 8009b6c:	00000000 	.word	0x00000000
 8009b70:	080098d1 	.word	0x080098d1

08009b74 <__sfputc_r>:
 8009b74:	6893      	ldr	r3, [r2, #8]
 8009b76:	3b01      	subs	r3, #1
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	b410      	push	{r4}
 8009b7c:	6093      	str	r3, [r2, #8]
 8009b7e:	da08      	bge.n	8009b92 <__sfputc_r+0x1e>
 8009b80:	6994      	ldr	r4, [r2, #24]
 8009b82:	42a3      	cmp	r3, r4
 8009b84:	db01      	blt.n	8009b8a <__sfputc_r+0x16>
 8009b86:	290a      	cmp	r1, #10
 8009b88:	d103      	bne.n	8009b92 <__sfputc_r+0x1e>
 8009b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b8e:	f000 bb0d 	b.w	800a1ac <__swbuf_r>
 8009b92:	6813      	ldr	r3, [r2, #0]
 8009b94:	1c58      	adds	r0, r3, #1
 8009b96:	6010      	str	r0, [r2, #0]
 8009b98:	7019      	strb	r1, [r3, #0]
 8009b9a:	4608      	mov	r0, r1
 8009b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <__sfputs_r>:
 8009ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba4:	4606      	mov	r6, r0
 8009ba6:	460f      	mov	r7, r1
 8009ba8:	4614      	mov	r4, r2
 8009baa:	18d5      	adds	r5, r2, r3
 8009bac:	42ac      	cmp	r4, r5
 8009bae:	d101      	bne.n	8009bb4 <__sfputs_r+0x12>
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	e007      	b.n	8009bc4 <__sfputs_r+0x22>
 8009bb4:	463a      	mov	r2, r7
 8009bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f7ff ffda 	bl	8009b74 <__sfputc_r>
 8009bc0:	1c43      	adds	r3, r0, #1
 8009bc2:	d1f3      	bne.n	8009bac <__sfputs_r+0xa>
 8009bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bc8 <_vfiprintf_r>:
 8009bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bcc:	460c      	mov	r4, r1
 8009bce:	b09d      	sub	sp, #116	; 0x74
 8009bd0:	4617      	mov	r7, r2
 8009bd2:	461d      	mov	r5, r3
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	b118      	cbz	r0, 8009be0 <_vfiprintf_r+0x18>
 8009bd8:	6983      	ldr	r3, [r0, #24]
 8009bda:	b90b      	cbnz	r3, 8009be0 <_vfiprintf_r+0x18>
 8009bdc:	f7ff fd94 	bl	8009708 <__sinit>
 8009be0:	4b7c      	ldr	r3, [pc, #496]	; (8009dd4 <_vfiprintf_r+0x20c>)
 8009be2:	429c      	cmp	r4, r3
 8009be4:	d158      	bne.n	8009c98 <_vfiprintf_r+0xd0>
 8009be6:	6874      	ldr	r4, [r6, #4]
 8009be8:	89a3      	ldrh	r3, [r4, #12]
 8009bea:	0718      	lsls	r0, r3, #28
 8009bec:	d55e      	bpl.n	8009cac <_vfiprintf_r+0xe4>
 8009bee:	6923      	ldr	r3, [r4, #16]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d05b      	beq.n	8009cac <_vfiprintf_r+0xe4>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8009bf8:	2320      	movs	r3, #32
 8009bfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bfe:	2330      	movs	r3, #48	; 0x30
 8009c00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c04:	9503      	str	r5, [sp, #12]
 8009c06:	f04f 0b01 	mov.w	fp, #1
 8009c0a:	46b8      	mov	r8, r7
 8009c0c:	4645      	mov	r5, r8
 8009c0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009c12:	b10b      	cbz	r3, 8009c18 <_vfiprintf_r+0x50>
 8009c14:	2b25      	cmp	r3, #37	; 0x25
 8009c16:	d154      	bne.n	8009cc2 <_vfiprintf_r+0xfa>
 8009c18:	ebb8 0a07 	subs.w	sl, r8, r7
 8009c1c:	d00b      	beq.n	8009c36 <_vfiprintf_r+0x6e>
 8009c1e:	4653      	mov	r3, sl
 8009c20:	463a      	mov	r2, r7
 8009c22:	4621      	mov	r1, r4
 8009c24:	4630      	mov	r0, r6
 8009c26:	f7ff ffbc 	bl	8009ba2 <__sfputs_r>
 8009c2a:	3001      	adds	r0, #1
 8009c2c:	f000 80c2 	beq.w	8009db4 <_vfiprintf_r+0x1ec>
 8009c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c32:	4453      	add	r3, sl
 8009c34:	9309      	str	r3, [sp, #36]	; 0x24
 8009c36:	f898 3000 	ldrb.w	r3, [r8]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f000 80ba 	beq.w	8009db4 <_vfiprintf_r+0x1ec>
 8009c40:	2300      	movs	r3, #0
 8009c42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c4a:	9304      	str	r3, [sp, #16]
 8009c4c:	9307      	str	r3, [sp, #28]
 8009c4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c52:	931a      	str	r3, [sp, #104]	; 0x68
 8009c54:	46a8      	mov	r8, r5
 8009c56:	2205      	movs	r2, #5
 8009c58:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009c5c:	485e      	ldr	r0, [pc, #376]	; (8009dd8 <_vfiprintf_r+0x210>)
 8009c5e:	f7f6 fb3f 	bl	80002e0 <memchr>
 8009c62:	9b04      	ldr	r3, [sp, #16]
 8009c64:	bb78      	cbnz	r0, 8009cc6 <_vfiprintf_r+0xfe>
 8009c66:	06d9      	lsls	r1, r3, #27
 8009c68:	bf44      	itt	mi
 8009c6a:	2220      	movmi	r2, #32
 8009c6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c70:	071a      	lsls	r2, r3, #28
 8009c72:	bf44      	itt	mi
 8009c74:	222b      	movmi	r2, #43	; 0x2b
 8009c76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c7a:	782a      	ldrb	r2, [r5, #0]
 8009c7c:	2a2a      	cmp	r2, #42	; 0x2a
 8009c7e:	d02a      	beq.n	8009cd6 <_vfiprintf_r+0x10e>
 8009c80:	9a07      	ldr	r2, [sp, #28]
 8009c82:	46a8      	mov	r8, r5
 8009c84:	2000      	movs	r0, #0
 8009c86:	250a      	movs	r5, #10
 8009c88:	4641      	mov	r1, r8
 8009c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c8e:	3b30      	subs	r3, #48	; 0x30
 8009c90:	2b09      	cmp	r3, #9
 8009c92:	d969      	bls.n	8009d68 <_vfiprintf_r+0x1a0>
 8009c94:	b360      	cbz	r0, 8009cf0 <_vfiprintf_r+0x128>
 8009c96:	e024      	b.n	8009ce2 <_vfiprintf_r+0x11a>
 8009c98:	4b50      	ldr	r3, [pc, #320]	; (8009ddc <_vfiprintf_r+0x214>)
 8009c9a:	429c      	cmp	r4, r3
 8009c9c:	d101      	bne.n	8009ca2 <_vfiprintf_r+0xda>
 8009c9e:	68b4      	ldr	r4, [r6, #8]
 8009ca0:	e7a2      	b.n	8009be8 <_vfiprintf_r+0x20>
 8009ca2:	4b4f      	ldr	r3, [pc, #316]	; (8009de0 <_vfiprintf_r+0x218>)
 8009ca4:	429c      	cmp	r4, r3
 8009ca6:	bf08      	it	eq
 8009ca8:	68f4      	ldreq	r4, [r6, #12]
 8009caa:	e79d      	b.n	8009be8 <_vfiprintf_r+0x20>
 8009cac:	4621      	mov	r1, r4
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f000 fae0 	bl	800a274 <__swsetup_r>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	d09d      	beq.n	8009bf4 <_vfiprintf_r+0x2c>
 8009cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cbc:	b01d      	add	sp, #116	; 0x74
 8009cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc2:	46a8      	mov	r8, r5
 8009cc4:	e7a2      	b.n	8009c0c <_vfiprintf_r+0x44>
 8009cc6:	4a44      	ldr	r2, [pc, #272]	; (8009dd8 <_vfiprintf_r+0x210>)
 8009cc8:	1a80      	subs	r0, r0, r2
 8009cca:	fa0b f000 	lsl.w	r0, fp, r0
 8009cce:	4318      	orrs	r0, r3
 8009cd0:	9004      	str	r0, [sp, #16]
 8009cd2:	4645      	mov	r5, r8
 8009cd4:	e7be      	b.n	8009c54 <_vfiprintf_r+0x8c>
 8009cd6:	9a03      	ldr	r2, [sp, #12]
 8009cd8:	1d11      	adds	r1, r2, #4
 8009cda:	6812      	ldr	r2, [r2, #0]
 8009cdc:	9103      	str	r1, [sp, #12]
 8009cde:	2a00      	cmp	r2, #0
 8009ce0:	db01      	blt.n	8009ce6 <_vfiprintf_r+0x11e>
 8009ce2:	9207      	str	r2, [sp, #28]
 8009ce4:	e004      	b.n	8009cf0 <_vfiprintf_r+0x128>
 8009ce6:	4252      	negs	r2, r2
 8009ce8:	f043 0302 	orr.w	r3, r3, #2
 8009cec:	9207      	str	r2, [sp, #28]
 8009cee:	9304      	str	r3, [sp, #16]
 8009cf0:	f898 3000 	ldrb.w	r3, [r8]
 8009cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8009cf6:	d10e      	bne.n	8009d16 <_vfiprintf_r+0x14e>
 8009cf8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8009cfe:	d138      	bne.n	8009d72 <_vfiprintf_r+0x1aa>
 8009d00:	9b03      	ldr	r3, [sp, #12]
 8009d02:	1d1a      	adds	r2, r3, #4
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	9203      	str	r2, [sp, #12]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	bfb8      	it	lt
 8009d0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009d10:	f108 0802 	add.w	r8, r8, #2
 8009d14:	9305      	str	r3, [sp, #20]
 8009d16:	4d33      	ldr	r5, [pc, #204]	; (8009de4 <_vfiprintf_r+0x21c>)
 8009d18:	f898 1000 	ldrb.w	r1, [r8]
 8009d1c:	2203      	movs	r2, #3
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f7f6 fade 	bl	80002e0 <memchr>
 8009d24:	b140      	cbz	r0, 8009d38 <_vfiprintf_r+0x170>
 8009d26:	2340      	movs	r3, #64	; 0x40
 8009d28:	1b40      	subs	r0, r0, r5
 8009d2a:	fa03 f000 	lsl.w	r0, r3, r0
 8009d2e:	9b04      	ldr	r3, [sp, #16]
 8009d30:	4303      	orrs	r3, r0
 8009d32:	f108 0801 	add.w	r8, r8, #1
 8009d36:	9304      	str	r3, [sp, #16]
 8009d38:	f898 1000 	ldrb.w	r1, [r8]
 8009d3c:	482a      	ldr	r0, [pc, #168]	; (8009de8 <_vfiprintf_r+0x220>)
 8009d3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d42:	2206      	movs	r2, #6
 8009d44:	f108 0701 	add.w	r7, r8, #1
 8009d48:	f7f6 faca 	bl	80002e0 <memchr>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d037      	beq.n	8009dc0 <_vfiprintf_r+0x1f8>
 8009d50:	4b26      	ldr	r3, [pc, #152]	; (8009dec <_vfiprintf_r+0x224>)
 8009d52:	bb1b      	cbnz	r3, 8009d9c <_vfiprintf_r+0x1d4>
 8009d54:	9b03      	ldr	r3, [sp, #12]
 8009d56:	3307      	adds	r3, #7
 8009d58:	f023 0307 	bic.w	r3, r3, #7
 8009d5c:	3308      	adds	r3, #8
 8009d5e:	9303      	str	r3, [sp, #12]
 8009d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d62:	444b      	add	r3, r9
 8009d64:	9309      	str	r3, [sp, #36]	; 0x24
 8009d66:	e750      	b.n	8009c0a <_vfiprintf_r+0x42>
 8009d68:	fb05 3202 	mla	r2, r5, r2, r3
 8009d6c:	2001      	movs	r0, #1
 8009d6e:	4688      	mov	r8, r1
 8009d70:	e78a      	b.n	8009c88 <_vfiprintf_r+0xc0>
 8009d72:	2300      	movs	r3, #0
 8009d74:	f108 0801 	add.w	r8, r8, #1
 8009d78:	9305      	str	r3, [sp, #20]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	250a      	movs	r5, #10
 8009d7e:	4640      	mov	r0, r8
 8009d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d84:	3a30      	subs	r2, #48	; 0x30
 8009d86:	2a09      	cmp	r2, #9
 8009d88:	d903      	bls.n	8009d92 <_vfiprintf_r+0x1ca>
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d0c3      	beq.n	8009d16 <_vfiprintf_r+0x14e>
 8009d8e:	9105      	str	r1, [sp, #20]
 8009d90:	e7c1      	b.n	8009d16 <_vfiprintf_r+0x14e>
 8009d92:	fb05 2101 	mla	r1, r5, r1, r2
 8009d96:	2301      	movs	r3, #1
 8009d98:	4680      	mov	r8, r0
 8009d9a:	e7f0      	b.n	8009d7e <_vfiprintf_r+0x1b6>
 8009d9c:	ab03      	add	r3, sp, #12
 8009d9e:	9300      	str	r3, [sp, #0]
 8009da0:	4622      	mov	r2, r4
 8009da2:	4b13      	ldr	r3, [pc, #76]	; (8009df0 <_vfiprintf_r+0x228>)
 8009da4:	a904      	add	r1, sp, #16
 8009da6:	4630      	mov	r0, r6
 8009da8:	f3af 8000 	nop.w
 8009dac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009db0:	4681      	mov	r9, r0
 8009db2:	d1d5      	bne.n	8009d60 <_vfiprintf_r+0x198>
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	065b      	lsls	r3, r3, #25
 8009db8:	f53f af7e 	bmi.w	8009cb8 <_vfiprintf_r+0xf0>
 8009dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dbe:	e77d      	b.n	8009cbc <_vfiprintf_r+0xf4>
 8009dc0:	ab03      	add	r3, sp, #12
 8009dc2:	9300      	str	r3, [sp, #0]
 8009dc4:	4622      	mov	r2, r4
 8009dc6:	4b0a      	ldr	r3, [pc, #40]	; (8009df0 <_vfiprintf_r+0x228>)
 8009dc8:	a904      	add	r1, sp, #16
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f000 f888 	bl	8009ee0 <_printf_i>
 8009dd0:	e7ec      	b.n	8009dac <_vfiprintf_r+0x1e4>
 8009dd2:	bf00      	nop
 8009dd4:	0800a838 	.word	0x0800a838
 8009dd8:	0800a878 	.word	0x0800a878
 8009ddc:	0800a858 	.word	0x0800a858
 8009de0:	0800a818 	.word	0x0800a818
 8009de4:	0800a87e 	.word	0x0800a87e
 8009de8:	0800a882 	.word	0x0800a882
 8009dec:	00000000 	.word	0x00000000
 8009df0:	08009ba3 	.word	0x08009ba3

08009df4 <_printf_common>:
 8009df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df8:	4691      	mov	r9, r2
 8009dfa:	461f      	mov	r7, r3
 8009dfc:	688a      	ldr	r2, [r1, #8]
 8009dfe:	690b      	ldr	r3, [r1, #16]
 8009e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e04:	4293      	cmp	r3, r2
 8009e06:	bfb8      	it	lt
 8009e08:	4613      	movlt	r3, r2
 8009e0a:	f8c9 3000 	str.w	r3, [r9]
 8009e0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e12:	4606      	mov	r6, r0
 8009e14:	460c      	mov	r4, r1
 8009e16:	b112      	cbz	r2, 8009e1e <_printf_common+0x2a>
 8009e18:	3301      	adds	r3, #1
 8009e1a:	f8c9 3000 	str.w	r3, [r9]
 8009e1e:	6823      	ldr	r3, [r4, #0]
 8009e20:	0699      	lsls	r1, r3, #26
 8009e22:	bf42      	ittt	mi
 8009e24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009e28:	3302      	addmi	r3, #2
 8009e2a:	f8c9 3000 	strmi.w	r3, [r9]
 8009e2e:	6825      	ldr	r5, [r4, #0]
 8009e30:	f015 0506 	ands.w	r5, r5, #6
 8009e34:	d107      	bne.n	8009e46 <_printf_common+0x52>
 8009e36:	f104 0a19 	add.w	sl, r4, #25
 8009e3a:	68e3      	ldr	r3, [r4, #12]
 8009e3c:	f8d9 2000 	ldr.w	r2, [r9]
 8009e40:	1a9b      	subs	r3, r3, r2
 8009e42:	42ab      	cmp	r3, r5
 8009e44:	dc28      	bgt.n	8009e98 <_printf_common+0xa4>
 8009e46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009e4a:	6822      	ldr	r2, [r4, #0]
 8009e4c:	3300      	adds	r3, #0
 8009e4e:	bf18      	it	ne
 8009e50:	2301      	movne	r3, #1
 8009e52:	0692      	lsls	r2, r2, #26
 8009e54:	d42d      	bmi.n	8009eb2 <_printf_common+0xbe>
 8009e56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e5a:	4639      	mov	r1, r7
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	47c0      	blx	r8
 8009e60:	3001      	adds	r0, #1
 8009e62:	d020      	beq.n	8009ea6 <_printf_common+0xb2>
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	68e5      	ldr	r5, [r4, #12]
 8009e68:	f8d9 2000 	ldr.w	r2, [r9]
 8009e6c:	f003 0306 	and.w	r3, r3, #6
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	bf08      	it	eq
 8009e74:	1aad      	subeq	r5, r5, r2
 8009e76:	68a3      	ldr	r3, [r4, #8]
 8009e78:	6922      	ldr	r2, [r4, #16]
 8009e7a:	bf0c      	ite	eq
 8009e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e80:	2500      	movne	r5, #0
 8009e82:	4293      	cmp	r3, r2
 8009e84:	bfc4      	itt	gt
 8009e86:	1a9b      	subgt	r3, r3, r2
 8009e88:	18ed      	addgt	r5, r5, r3
 8009e8a:	f04f 0900 	mov.w	r9, #0
 8009e8e:	341a      	adds	r4, #26
 8009e90:	454d      	cmp	r5, r9
 8009e92:	d11a      	bne.n	8009eca <_printf_common+0xd6>
 8009e94:	2000      	movs	r0, #0
 8009e96:	e008      	b.n	8009eaa <_printf_common+0xb6>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	4652      	mov	r2, sl
 8009e9c:	4639      	mov	r1, r7
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	47c0      	blx	r8
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	d103      	bne.n	8009eae <_printf_common+0xba>
 8009ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eae:	3501      	adds	r5, #1
 8009eb0:	e7c3      	b.n	8009e3a <_printf_common+0x46>
 8009eb2:	18e1      	adds	r1, r4, r3
 8009eb4:	1c5a      	adds	r2, r3, #1
 8009eb6:	2030      	movs	r0, #48	; 0x30
 8009eb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ebc:	4422      	add	r2, r4
 8009ebe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ec2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ec6:	3302      	adds	r3, #2
 8009ec8:	e7c5      	b.n	8009e56 <_printf_common+0x62>
 8009eca:	2301      	movs	r3, #1
 8009ecc:	4622      	mov	r2, r4
 8009ece:	4639      	mov	r1, r7
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	47c0      	blx	r8
 8009ed4:	3001      	adds	r0, #1
 8009ed6:	d0e6      	beq.n	8009ea6 <_printf_common+0xb2>
 8009ed8:	f109 0901 	add.w	r9, r9, #1
 8009edc:	e7d8      	b.n	8009e90 <_printf_common+0x9c>
	...

08009ee0 <_printf_i>:
 8009ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ee4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009ee8:	460c      	mov	r4, r1
 8009eea:	7e09      	ldrb	r1, [r1, #24]
 8009eec:	b085      	sub	sp, #20
 8009eee:	296e      	cmp	r1, #110	; 0x6e
 8009ef0:	4617      	mov	r7, r2
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	4698      	mov	r8, r3
 8009ef6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ef8:	f000 80b3 	beq.w	800a062 <_printf_i+0x182>
 8009efc:	d822      	bhi.n	8009f44 <_printf_i+0x64>
 8009efe:	2963      	cmp	r1, #99	; 0x63
 8009f00:	d036      	beq.n	8009f70 <_printf_i+0x90>
 8009f02:	d80a      	bhi.n	8009f1a <_printf_i+0x3a>
 8009f04:	2900      	cmp	r1, #0
 8009f06:	f000 80b9 	beq.w	800a07c <_printf_i+0x19c>
 8009f0a:	2958      	cmp	r1, #88	; 0x58
 8009f0c:	f000 8083 	beq.w	800a016 <_printf_i+0x136>
 8009f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009f18:	e032      	b.n	8009f80 <_printf_i+0xa0>
 8009f1a:	2964      	cmp	r1, #100	; 0x64
 8009f1c:	d001      	beq.n	8009f22 <_printf_i+0x42>
 8009f1e:	2969      	cmp	r1, #105	; 0x69
 8009f20:	d1f6      	bne.n	8009f10 <_printf_i+0x30>
 8009f22:	6820      	ldr	r0, [r4, #0]
 8009f24:	6813      	ldr	r3, [r2, #0]
 8009f26:	0605      	lsls	r5, r0, #24
 8009f28:	f103 0104 	add.w	r1, r3, #4
 8009f2c:	d52a      	bpl.n	8009f84 <_printf_i+0xa4>
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	6011      	str	r1, [r2, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	da03      	bge.n	8009f3e <_printf_i+0x5e>
 8009f36:	222d      	movs	r2, #45	; 0x2d
 8009f38:	425b      	negs	r3, r3
 8009f3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009f3e:	486f      	ldr	r0, [pc, #444]	; (800a0fc <_printf_i+0x21c>)
 8009f40:	220a      	movs	r2, #10
 8009f42:	e039      	b.n	8009fb8 <_printf_i+0xd8>
 8009f44:	2973      	cmp	r1, #115	; 0x73
 8009f46:	f000 809d 	beq.w	800a084 <_printf_i+0x1a4>
 8009f4a:	d808      	bhi.n	8009f5e <_printf_i+0x7e>
 8009f4c:	296f      	cmp	r1, #111	; 0x6f
 8009f4e:	d020      	beq.n	8009f92 <_printf_i+0xb2>
 8009f50:	2970      	cmp	r1, #112	; 0x70
 8009f52:	d1dd      	bne.n	8009f10 <_printf_i+0x30>
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	f043 0320 	orr.w	r3, r3, #32
 8009f5a:	6023      	str	r3, [r4, #0]
 8009f5c:	e003      	b.n	8009f66 <_printf_i+0x86>
 8009f5e:	2975      	cmp	r1, #117	; 0x75
 8009f60:	d017      	beq.n	8009f92 <_printf_i+0xb2>
 8009f62:	2978      	cmp	r1, #120	; 0x78
 8009f64:	d1d4      	bne.n	8009f10 <_printf_i+0x30>
 8009f66:	2378      	movs	r3, #120	; 0x78
 8009f68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f6c:	4864      	ldr	r0, [pc, #400]	; (800a100 <_printf_i+0x220>)
 8009f6e:	e055      	b.n	800a01c <_printf_i+0x13c>
 8009f70:	6813      	ldr	r3, [r2, #0]
 8009f72:	1d19      	adds	r1, r3, #4
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6011      	str	r1, [r2, #0]
 8009f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f80:	2301      	movs	r3, #1
 8009f82:	e08c      	b.n	800a09e <_printf_i+0x1be>
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6011      	str	r1, [r2, #0]
 8009f88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f8c:	bf18      	it	ne
 8009f8e:	b21b      	sxthne	r3, r3
 8009f90:	e7cf      	b.n	8009f32 <_printf_i+0x52>
 8009f92:	6813      	ldr	r3, [r2, #0]
 8009f94:	6825      	ldr	r5, [r4, #0]
 8009f96:	1d18      	adds	r0, r3, #4
 8009f98:	6010      	str	r0, [r2, #0]
 8009f9a:	0628      	lsls	r0, r5, #24
 8009f9c:	d501      	bpl.n	8009fa2 <_printf_i+0xc2>
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	e002      	b.n	8009fa8 <_printf_i+0xc8>
 8009fa2:	0668      	lsls	r0, r5, #25
 8009fa4:	d5fb      	bpl.n	8009f9e <_printf_i+0xbe>
 8009fa6:	881b      	ldrh	r3, [r3, #0]
 8009fa8:	4854      	ldr	r0, [pc, #336]	; (800a0fc <_printf_i+0x21c>)
 8009faa:	296f      	cmp	r1, #111	; 0x6f
 8009fac:	bf14      	ite	ne
 8009fae:	220a      	movne	r2, #10
 8009fb0:	2208      	moveq	r2, #8
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fb8:	6865      	ldr	r5, [r4, #4]
 8009fba:	60a5      	str	r5, [r4, #8]
 8009fbc:	2d00      	cmp	r5, #0
 8009fbe:	f2c0 8095 	blt.w	800a0ec <_printf_i+0x20c>
 8009fc2:	6821      	ldr	r1, [r4, #0]
 8009fc4:	f021 0104 	bic.w	r1, r1, #4
 8009fc8:	6021      	str	r1, [r4, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d13d      	bne.n	800a04a <_printf_i+0x16a>
 8009fce:	2d00      	cmp	r5, #0
 8009fd0:	f040 808e 	bne.w	800a0f0 <_printf_i+0x210>
 8009fd4:	4665      	mov	r5, ip
 8009fd6:	2a08      	cmp	r2, #8
 8009fd8:	d10b      	bne.n	8009ff2 <_printf_i+0x112>
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	07db      	lsls	r3, r3, #31
 8009fde:	d508      	bpl.n	8009ff2 <_printf_i+0x112>
 8009fe0:	6923      	ldr	r3, [r4, #16]
 8009fe2:	6862      	ldr	r2, [r4, #4]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	bfde      	ittt	le
 8009fe8:	2330      	movle	r3, #48	; 0x30
 8009fea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009ff2:	ebac 0305 	sub.w	r3, ip, r5
 8009ff6:	6123      	str	r3, [r4, #16]
 8009ff8:	f8cd 8000 	str.w	r8, [sp]
 8009ffc:	463b      	mov	r3, r7
 8009ffe:	aa03      	add	r2, sp, #12
 800a000:	4621      	mov	r1, r4
 800a002:	4630      	mov	r0, r6
 800a004:	f7ff fef6 	bl	8009df4 <_printf_common>
 800a008:	3001      	adds	r0, #1
 800a00a:	d14d      	bne.n	800a0a8 <_printf_i+0x1c8>
 800a00c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a010:	b005      	add	sp, #20
 800a012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a016:	4839      	ldr	r0, [pc, #228]	; (800a0fc <_printf_i+0x21c>)
 800a018:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a01c:	6813      	ldr	r3, [r2, #0]
 800a01e:	6821      	ldr	r1, [r4, #0]
 800a020:	1d1d      	adds	r5, r3, #4
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6015      	str	r5, [r2, #0]
 800a026:	060a      	lsls	r2, r1, #24
 800a028:	d50b      	bpl.n	800a042 <_printf_i+0x162>
 800a02a:	07ca      	lsls	r2, r1, #31
 800a02c:	bf44      	itt	mi
 800a02e:	f041 0120 	orrmi.w	r1, r1, #32
 800a032:	6021      	strmi	r1, [r4, #0]
 800a034:	b91b      	cbnz	r3, 800a03e <_printf_i+0x15e>
 800a036:	6822      	ldr	r2, [r4, #0]
 800a038:	f022 0220 	bic.w	r2, r2, #32
 800a03c:	6022      	str	r2, [r4, #0]
 800a03e:	2210      	movs	r2, #16
 800a040:	e7b7      	b.n	8009fb2 <_printf_i+0xd2>
 800a042:	064d      	lsls	r5, r1, #25
 800a044:	bf48      	it	mi
 800a046:	b29b      	uxthmi	r3, r3
 800a048:	e7ef      	b.n	800a02a <_printf_i+0x14a>
 800a04a:	4665      	mov	r5, ip
 800a04c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a050:	fb02 3311 	mls	r3, r2, r1, r3
 800a054:	5cc3      	ldrb	r3, [r0, r3]
 800a056:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a05a:	460b      	mov	r3, r1
 800a05c:	2900      	cmp	r1, #0
 800a05e:	d1f5      	bne.n	800a04c <_printf_i+0x16c>
 800a060:	e7b9      	b.n	8009fd6 <_printf_i+0xf6>
 800a062:	6813      	ldr	r3, [r2, #0]
 800a064:	6825      	ldr	r5, [r4, #0]
 800a066:	6961      	ldr	r1, [r4, #20]
 800a068:	1d18      	adds	r0, r3, #4
 800a06a:	6010      	str	r0, [r2, #0]
 800a06c:	0628      	lsls	r0, r5, #24
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	d501      	bpl.n	800a076 <_printf_i+0x196>
 800a072:	6019      	str	r1, [r3, #0]
 800a074:	e002      	b.n	800a07c <_printf_i+0x19c>
 800a076:	066a      	lsls	r2, r5, #25
 800a078:	d5fb      	bpl.n	800a072 <_printf_i+0x192>
 800a07a:	8019      	strh	r1, [r3, #0]
 800a07c:	2300      	movs	r3, #0
 800a07e:	6123      	str	r3, [r4, #16]
 800a080:	4665      	mov	r5, ip
 800a082:	e7b9      	b.n	8009ff8 <_printf_i+0x118>
 800a084:	6813      	ldr	r3, [r2, #0]
 800a086:	1d19      	adds	r1, r3, #4
 800a088:	6011      	str	r1, [r2, #0]
 800a08a:	681d      	ldr	r5, [r3, #0]
 800a08c:	6862      	ldr	r2, [r4, #4]
 800a08e:	2100      	movs	r1, #0
 800a090:	4628      	mov	r0, r5
 800a092:	f7f6 f925 	bl	80002e0 <memchr>
 800a096:	b108      	cbz	r0, 800a09c <_printf_i+0x1bc>
 800a098:	1b40      	subs	r0, r0, r5
 800a09a:	6060      	str	r0, [r4, #4]
 800a09c:	6863      	ldr	r3, [r4, #4]
 800a09e:	6123      	str	r3, [r4, #16]
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0a6:	e7a7      	b.n	8009ff8 <_printf_i+0x118>
 800a0a8:	6923      	ldr	r3, [r4, #16]
 800a0aa:	462a      	mov	r2, r5
 800a0ac:	4639      	mov	r1, r7
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	47c0      	blx	r8
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	d0aa      	beq.n	800a00c <_printf_i+0x12c>
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	079b      	lsls	r3, r3, #30
 800a0ba:	d413      	bmi.n	800a0e4 <_printf_i+0x204>
 800a0bc:	68e0      	ldr	r0, [r4, #12]
 800a0be:	9b03      	ldr	r3, [sp, #12]
 800a0c0:	4298      	cmp	r0, r3
 800a0c2:	bfb8      	it	lt
 800a0c4:	4618      	movlt	r0, r3
 800a0c6:	e7a3      	b.n	800a010 <_printf_i+0x130>
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	464a      	mov	r2, r9
 800a0cc:	4639      	mov	r1, r7
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	47c0      	blx	r8
 800a0d2:	3001      	adds	r0, #1
 800a0d4:	d09a      	beq.n	800a00c <_printf_i+0x12c>
 800a0d6:	3501      	adds	r5, #1
 800a0d8:	68e3      	ldr	r3, [r4, #12]
 800a0da:	9a03      	ldr	r2, [sp, #12]
 800a0dc:	1a9b      	subs	r3, r3, r2
 800a0de:	42ab      	cmp	r3, r5
 800a0e0:	dcf2      	bgt.n	800a0c8 <_printf_i+0x1e8>
 800a0e2:	e7eb      	b.n	800a0bc <_printf_i+0x1dc>
 800a0e4:	2500      	movs	r5, #0
 800a0e6:	f104 0919 	add.w	r9, r4, #25
 800a0ea:	e7f5      	b.n	800a0d8 <_printf_i+0x1f8>
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1ac      	bne.n	800a04a <_printf_i+0x16a>
 800a0f0:	7803      	ldrb	r3, [r0, #0]
 800a0f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0fa:	e76c      	b.n	8009fd6 <_printf_i+0xf6>
 800a0fc:	0800a889 	.word	0x0800a889
 800a100:	0800a89a 	.word	0x0800a89a

0800a104 <_sbrk_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	4c06      	ldr	r4, [pc, #24]	; (800a120 <_sbrk_r+0x1c>)
 800a108:	2300      	movs	r3, #0
 800a10a:	4605      	mov	r5, r0
 800a10c:	4608      	mov	r0, r1
 800a10e:	6023      	str	r3, [r4, #0]
 800a110:	f7f7 f8a0 	bl	8001254 <_sbrk>
 800a114:	1c43      	adds	r3, r0, #1
 800a116:	d102      	bne.n	800a11e <_sbrk_r+0x1a>
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	b103      	cbz	r3, 800a11e <_sbrk_r+0x1a>
 800a11c:	602b      	str	r3, [r5, #0]
 800a11e:	bd38      	pop	{r3, r4, r5, pc}
 800a120:	2000076c 	.word	0x2000076c

0800a124 <__sread>:
 800a124:	b510      	push	{r4, lr}
 800a126:	460c      	mov	r4, r1
 800a128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a12c:	f000 fae0 	bl	800a6f0 <_read_r>
 800a130:	2800      	cmp	r0, #0
 800a132:	bfab      	itete	ge
 800a134:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a136:	89a3      	ldrhlt	r3, [r4, #12]
 800a138:	181b      	addge	r3, r3, r0
 800a13a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a13e:	bfac      	ite	ge
 800a140:	6563      	strge	r3, [r4, #84]	; 0x54
 800a142:	81a3      	strhlt	r3, [r4, #12]
 800a144:	bd10      	pop	{r4, pc}

0800a146 <__swrite>:
 800a146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a14a:	461f      	mov	r7, r3
 800a14c:	898b      	ldrh	r3, [r1, #12]
 800a14e:	05db      	lsls	r3, r3, #23
 800a150:	4605      	mov	r5, r0
 800a152:	460c      	mov	r4, r1
 800a154:	4616      	mov	r6, r2
 800a156:	d505      	bpl.n	800a164 <__swrite+0x1e>
 800a158:	2302      	movs	r3, #2
 800a15a:	2200      	movs	r2, #0
 800a15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a160:	f000 f9b6 	bl	800a4d0 <_lseek_r>
 800a164:	89a3      	ldrh	r3, [r4, #12]
 800a166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a16a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a16e:	81a3      	strh	r3, [r4, #12]
 800a170:	4632      	mov	r2, r6
 800a172:	463b      	mov	r3, r7
 800a174:	4628      	mov	r0, r5
 800a176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a17a:	f000 b869 	b.w	800a250 <_write_r>

0800a17e <__sseek>:
 800a17e:	b510      	push	{r4, lr}
 800a180:	460c      	mov	r4, r1
 800a182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a186:	f000 f9a3 	bl	800a4d0 <_lseek_r>
 800a18a:	1c43      	adds	r3, r0, #1
 800a18c:	89a3      	ldrh	r3, [r4, #12]
 800a18e:	bf15      	itete	ne
 800a190:	6560      	strne	r0, [r4, #84]	; 0x54
 800a192:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a196:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a19a:	81a3      	strheq	r3, [r4, #12]
 800a19c:	bf18      	it	ne
 800a19e:	81a3      	strhne	r3, [r4, #12]
 800a1a0:	bd10      	pop	{r4, pc}

0800a1a2 <__sclose>:
 800a1a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a6:	f000 b8d3 	b.w	800a350 <_close_r>
	...

0800a1ac <__swbuf_r>:
 800a1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ae:	460e      	mov	r6, r1
 800a1b0:	4614      	mov	r4, r2
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	b118      	cbz	r0, 800a1be <__swbuf_r+0x12>
 800a1b6:	6983      	ldr	r3, [r0, #24]
 800a1b8:	b90b      	cbnz	r3, 800a1be <__swbuf_r+0x12>
 800a1ba:	f7ff faa5 	bl	8009708 <__sinit>
 800a1be:	4b21      	ldr	r3, [pc, #132]	; (800a244 <__swbuf_r+0x98>)
 800a1c0:	429c      	cmp	r4, r3
 800a1c2:	d12a      	bne.n	800a21a <__swbuf_r+0x6e>
 800a1c4:	686c      	ldr	r4, [r5, #4]
 800a1c6:	69a3      	ldr	r3, [r4, #24]
 800a1c8:	60a3      	str	r3, [r4, #8]
 800a1ca:	89a3      	ldrh	r3, [r4, #12]
 800a1cc:	071a      	lsls	r2, r3, #28
 800a1ce:	d52e      	bpl.n	800a22e <__swbuf_r+0x82>
 800a1d0:	6923      	ldr	r3, [r4, #16]
 800a1d2:	b363      	cbz	r3, 800a22e <__swbuf_r+0x82>
 800a1d4:	6923      	ldr	r3, [r4, #16]
 800a1d6:	6820      	ldr	r0, [r4, #0]
 800a1d8:	1ac0      	subs	r0, r0, r3
 800a1da:	6963      	ldr	r3, [r4, #20]
 800a1dc:	b2f6      	uxtb	r6, r6
 800a1de:	4283      	cmp	r3, r0
 800a1e0:	4637      	mov	r7, r6
 800a1e2:	dc04      	bgt.n	800a1ee <__swbuf_r+0x42>
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	f000 f948 	bl	800a47c <_fflush_r>
 800a1ec:	bb28      	cbnz	r0, 800a23a <__swbuf_r+0x8e>
 800a1ee:	68a3      	ldr	r3, [r4, #8]
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	60a3      	str	r3, [r4, #8]
 800a1f4:	6823      	ldr	r3, [r4, #0]
 800a1f6:	1c5a      	adds	r2, r3, #1
 800a1f8:	6022      	str	r2, [r4, #0]
 800a1fa:	701e      	strb	r6, [r3, #0]
 800a1fc:	6963      	ldr	r3, [r4, #20]
 800a1fe:	3001      	adds	r0, #1
 800a200:	4283      	cmp	r3, r0
 800a202:	d004      	beq.n	800a20e <__swbuf_r+0x62>
 800a204:	89a3      	ldrh	r3, [r4, #12]
 800a206:	07db      	lsls	r3, r3, #31
 800a208:	d519      	bpl.n	800a23e <__swbuf_r+0x92>
 800a20a:	2e0a      	cmp	r6, #10
 800a20c:	d117      	bne.n	800a23e <__swbuf_r+0x92>
 800a20e:	4621      	mov	r1, r4
 800a210:	4628      	mov	r0, r5
 800a212:	f000 f933 	bl	800a47c <_fflush_r>
 800a216:	b190      	cbz	r0, 800a23e <__swbuf_r+0x92>
 800a218:	e00f      	b.n	800a23a <__swbuf_r+0x8e>
 800a21a:	4b0b      	ldr	r3, [pc, #44]	; (800a248 <__swbuf_r+0x9c>)
 800a21c:	429c      	cmp	r4, r3
 800a21e:	d101      	bne.n	800a224 <__swbuf_r+0x78>
 800a220:	68ac      	ldr	r4, [r5, #8]
 800a222:	e7d0      	b.n	800a1c6 <__swbuf_r+0x1a>
 800a224:	4b09      	ldr	r3, [pc, #36]	; (800a24c <__swbuf_r+0xa0>)
 800a226:	429c      	cmp	r4, r3
 800a228:	bf08      	it	eq
 800a22a:	68ec      	ldreq	r4, [r5, #12]
 800a22c:	e7cb      	b.n	800a1c6 <__swbuf_r+0x1a>
 800a22e:	4621      	mov	r1, r4
 800a230:	4628      	mov	r0, r5
 800a232:	f000 f81f 	bl	800a274 <__swsetup_r>
 800a236:	2800      	cmp	r0, #0
 800a238:	d0cc      	beq.n	800a1d4 <__swbuf_r+0x28>
 800a23a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a23e:	4638      	mov	r0, r7
 800a240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a242:	bf00      	nop
 800a244:	0800a838 	.word	0x0800a838
 800a248:	0800a858 	.word	0x0800a858
 800a24c:	0800a818 	.word	0x0800a818

0800a250 <_write_r>:
 800a250:	b538      	push	{r3, r4, r5, lr}
 800a252:	4c07      	ldr	r4, [pc, #28]	; (800a270 <_write_r+0x20>)
 800a254:	4605      	mov	r5, r0
 800a256:	4608      	mov	r0, r1
 800a258:	4611      	mov	r1, r2
 800a25a:	2200      	movs	r2, #0
 800a25c:	6022      	str	r2, [r4, #0]
 800a25e:	461a      	mov	r2, r3
 800a260:	f7f6 ffa7 	bl	80011b2 <_write>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	d102      	bne.n	800a26e <_write_r+0x1e>
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	b103      	cbz	r3, 800a26e <_write_r+0x1e>
 800a26c:	602b      	str	r3, [r5, #0]
 800a26e:	bd38      	pop	{r3, r4, r5, pc}
 800a270:	2000076c 	.word	0x2000076c

0800a274 <__swsetup_r>:
 800a274:	4b32      	ldr	r3, [pc, #200]	; (800a340 <__swsetup_r+0xcc>)
 800a276:	b570      	push	{r4, r5, r6, lr}
 800a278:	681d      	ldr	r5, [r3, #0]
 800a27a:	4606      	mov	r6, r0
 800a27c:	460c      	mov	r4, r1
 800a27e:	b125      	cbz	r5, 800a28a <__swsetup_r+0x16>
 800a280:	69ab      	ldr	r3, [r5, #24]
 800a282:	b913      	cbnz	r3, 800a28a <__swsetup_r+0x16>
 800a284:	4628      	mov	r0, r5
 800a286:	f7ff fa3f 	bl	8009708 <__sinit>
 800a28a:	4b2e      	ldr	r3, [pc, #184]	; (800a344 <__swsetup_r+0xd0>)
 800a28c:	429c      	cmp	r4, r3
 800a28e:	d10f      	bne.n	800a2b0 <__swsetup_r+0x3c>
 800a290:	686c      	ldr	r4, [r5, #4]
 800a292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a296:	b29a      	uxth	r2, r3
 800a298:	0715      	lsls	r5, r2, #28
 800a29a:	d42c      	bmi.n	800a2f6 <__swsetup_r+0x82>
 800a29c:	06d0      	lsls	r0, r2, #27
 800a29e:	d411      	bmi.n	800a2c4 <__swsetup_r+0x50>
 800a2a0:	2209      	movs	r2, #9
 800a2a2:	6032      	str	r2, [r6, #0]
 800a2a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2a8:	81a3      	strh	r3, [r4, #12]
 800a2aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2ae:	e03e      	b.n	800a32e <__swsetup_r+0xba>
 800a2b0:	4b25      	ldr	r3, [pc, #148]	; (800a348 <__swsetup_r+0xd4>)
 800a2b2:	429c      	cmp	r4, r3
 800a2b4:	d101      	bne.n	800a2ba <__swsetup_r+0x46>
 800a2b6:	68ac      	ldr	r4, [r5, #8]
 800a2b8:	e7eb      	b.n	800a292 <__swsetup_r+0x1e>
 800a2ba:	4b24      	ldr	r3, [pc, #144]	; (800a34c <__swsetup_r+0xd8>)
 800a2bc:	429c      	cmp	r4, r3
 800a2be:	bf08      	it	eq
 800a2c0:	68ec      	ldreq	r4, [r5, #12]
 800a2c2:	e7e6      	b.n	800a292 <__swsetup_r+0x1e>
 800a2c4:	0751      	lsls	r1, r2, #29
 800a2c6:	d512      	bpl.n	800a2ee <__swsetup_r+0x7a>
 800a2c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2ca:	b141      	cbz	r1, 800a2de <__swsetup_r+0x6a>
 800a2cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2d0:	4299      	cmp	r1, r3
 800a2d2:	d002      	beq.n	800a2da <__swsetup_r+0x66>
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	f000 f997 	bl	800a608 <_free_r>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	6363      	str	r3, [r4, #52]	; 0x34
 800a2de:	89a3      	ldrh	r3, [r4, #12]
 800a2e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2e4:	81a3      	strh	r3, [r4, #12]
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	6063      	str	r3, [r4, #4]
 800a2ea:	6923      	ldr	r3, [r4, #16]
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	89a3      	ldrh	r3, [r4, #12]
 800a2f0:	f043 0308 	orr.w	r3, r3, #8
 800a2f4:	81a3      	strh	r3, [r4, #12]
 800a2f6:	6923      	ldr	r3, [r4, #16]
 800a2f8:	b94b      	cbnz	r3, 800a30e <__swsetup_r+0x9a>
 800a2fa:	89a3      	ldrh	r3, [r4, #12]
 800a2fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a304:	d003      	beq.n	800a30e <__swsetup_r+0x9a>
 800a306:	4621      	mov	r1, r4
 800a308:	4630      	mov	r0, r6
 800a30a:	f000 f917 	bl	800a53c <__smakebuf_r>
 800a30e:	89a2      	ldrh	r2, [r4, #12]
 800a310:	f012 0301 	ands.w	r3, r2, #1
 800a314:	d00c      	beq.n	800a330 <__swsetup_r+0xbc>
 800a316:	2300      	movs	r3, #0
 800a318:	60a3      	str	r3, [r4, #8]
 800a31a:	6963      	ldr	r3, [r4, #20]
 800a31c:	425b      	negs	r3, r3
 800a31e:	61a3      	str	r3, [r4, #24]
 800a320:	6923      	ldr	r3, [r4, #16]
 800a322:	b953      	cbnz	r3, 800a33a <__swsetup_r+0xc6>
 800a324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a328:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a32c:	d1ba      	bne.n	800a2a4 <__swsetup_r+0x30>
 800a32e:	bd70      	pop	{r4, r5, r6, pc}
 800a330:	0792      	lsls	r2, r2, #30
 800a332:	bf58      	it	pl
 800a334:	6963      	ldrpl	r3, [r4, #20]
 800a336:	60a3      	str	r3, [r4, #8]
 800a338:	e7f2      	b.n	800a320 <__swsetup_r+0xac>
 800a33a:	2000      	movs	r0, #0
 800a33c:	e7f7      	b.n	800a32e <__swsetup_r+0xba>
 800a33e:	bf00      	nop
 800a340:	20000010 	.word	0x20000010
 800a344:	0800a838 	.word	0x0800a838
 800a348:	0800a858 	.word	0x0800a858
 800a34c:	0800a818 	.word	0x0800a818

0800a350 <_close_r>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	4c06      	ldr	r4, [pc, #24]	; (800a36c <_close_r+0x1c>)
 800a354:	2300      	movs	r3, #0
 800a356:	4605      	mov	r5, r0
 800a358:	4608      	mov	r0, r1
 800a35a:	6023      	str	r3, [r4, #0]
 800a35c:	f7f6 ff45 	bl	80011ea <_close>
 800a360:	1c43      	adds	r3, r0, #1
 800a362:	d102      	bne.n	800a36a <_close_r+0x1a>
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	b103      	cbz	r3, 800a36a <_close_r+0x1a>
 800a368:	602b      	str	r3, [r5, #0]
 800a36a:	bd38      	pop	{r3, r4, r5, pc}
 800a36c:	2000076c 	.word	0x2000076c

0800a370 <__sflush_r>:
 800a370:	898a      	ldrh	r2, [r1, #12]
 800a372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a376:	4605      	mov	r5, r0
 800a378:	0710      	lsls	r0, r2, #28
 800a37a:	460c      	mov	r4, r1
 800a37c:	d458      	bmi.n	800a430 <__sflush_r+0xc0>
 800a37e:	684b      	ldr	r3, [r1, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	dc05      	bgt.n	800a390 <__sflush_r+0x20>
 800a384:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a386:	2b00      	cmp	r3, #0
 800a388:	dc02      	bgt.n	800a390 <__sflush_r+0x20>
 800a38a:	2000      	movs	r0, #0
 800a38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a390:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a392:	2e00      	cmp	r6, #0
 800a394:	d0f9      	beq.n	800a38a <__sflush_r+0x1a>
 800a396:	2300      	movs	r3, #0
 800a398:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a39c:	682f      	ldr	r7, [r5, #0]
 800a39e:	6a21      	ldr	r1, [r4, #32]
 800a3a0:	602b      	str	r3, [r5, #0]
 800a3a2:	d032      	beq.n	800a40a <__sflush_r+0x9a>
 800a3a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3a6:	89a3      	ldrh	r3, [r4, #12]
 800a3a8:	075a      	lsls	r2, r3, #29
 800a3aa:	d505      	bpl.n	800a3b8 <__sflush_r+0x48>
 800a3ac:	6863      	ldr	r3, [r4, #4]
 800a3ae:	1ac0      	subs	r0, r0, r3
 800a3b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3b2:	b10b      	cbz	r3, 800a3b8 <__sflush_r+0x48>
 800a3b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3b6:	1ac0      	subs	r0, r0, r3
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3be:	6a21      	ldr	r1, [r4, #32]
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	47b0      	blx	r6
 800a3c4:	1c43      	adds	r3, r0, #1
 800a3c6:	89a3      	ldrh	r3, [r4, #12]
 800a3c8:	d106      	bne.n	800a3d8 <__sflush_r+0x68>
 800a3ca:	6829      	ldr	r1, [r5, #0]
 800a3cc:	291d      	cmp	r1, #29
 800a3ce:	d848      	bhi.n	800a462 <__sflush_r+0xf2>
 800a3d0:	4a29      	ldr	r2, [pc, #164]	; (800a478 <__sflush_r+0x108>)
 800a3d2:	40ca      	lsrs	r2, r1
 800a3d4:	07d6      	lsls	r6, r2, #31
 800a3d6:	d544      	bpl.n	800a462 <__sflush_r+0xf2>
 800a3d8:	2200      	movs	r2, #0
 800a3da:	6062      	str	r2, [r4, #4]
 800a3dc:	04d9      	lsls	r1, r3, #19
 800a3de:	6922      	ldr	r2, [r4, #16]
 800a3e0:	6022      	str	r2, [r4, #0]
 800a3e2:	d504      	bpl.n	800a3ee <__sflush_r+0x7e>
 800a3e4:	1c42      	adds	r2, r0, #1
 800a3e6:	d101      	bne.n	800a3ec <__sflush_r+0x7c>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	b903      	cbnz	r3, 800a3ee <__sflush_r+0x7e>
 800a3ec:	6560      	str	r0, [r4, #84]	; 0x54
 800a3ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3f0:	602f      	str	r7, [r5, #0]
 800a3f2:	2900      	cmp	r1, #0
 800a3f4:	d0c9      	beq.n	800a38a <__sflush_r+0x1a>
 800a3f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3fa:	4299      	cmp	r1, r3
 800a3fc:	d002      	beq.n	800a404 <__sflush_r+0x94>
 800a3fe:	4628      	mov	r0, r5
 800a400:	f000 f902 	bl	800a608 <_free_r>
 800a404:	2000      	movs	r0, #0
 800a406:	6360      	str	r0, [r4, #52]	; 0x34
 800a408:	e7c0      	b.n	800a38c <__sflush_r+0x1c>
 800a40a:	2301      	movs	r3, #1
 800a40c:	4628      	mov	r0, r5
 800a40e:	47b0      	blx	r6
 800a410:	1c41      	adds	r1, r0, #1
 800a412:	d1c8      	bne.n	800a3a6 <__sflush_r+0x36>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d0c5      	beq.n	800a3a6 <__sflush_r+0x36>
 800a41a:	2b1d      	cmp	r3, #29
 800a41c:	d001      	beq.n	800a422 <__sflush_r+0xb2>
 800a41e:	2b16      	cmp	r3, #22
 800a420:	d101      	bne.n	800a426 <__sflush_r+0xb6>
 800a422:	602f      	str	r7, [r5, #0]
 800a424:	e7b1      	b.n	800a38a <__sflush_r+0x1a>
 800a426:	89a3      	ldrh	r3, [r4, #12]
 800a428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a42c:	81a3      	strh	r3, [r4, #12]
 800a42e:	e7ad      	b.n	800a38c <__sflush_r+0x1c>
 800a430:	690f      	ldr	r7, [r1, #16]
 800a432:	2f00      	cmp	r7, #0
 800a434:	d0a9      	beq.n	800a38a <__sflush_r+0x1a>
 800a436:	0793      	lsls	r3, r2, #30
 800a438:	680e      	ldr	r6, [r1, #0]
 800a43a:	bf08      	it	eq
 800a43c:	694b      	ldreq	r3, [r1, #20]
 800a43e:	600f      	str	r7, [r1, #0]
 800a440:	bf18      	it	ne
 800a442:	2300      	movne	r3, #0
 800a444:	eba6 0807 	sub.w	r8, r6, r7
 800a448:	608b      	str	r3, [r1, #8]
 800a44a:	f1b8 0f00 	cmp.w	r8, #0
 800a44e:	dd9c      	ble.n	800a38a <__sflush_r+0x1a>
 800a450:	4643      	mov	r3, r8
 800a452:	463a      	mov	r2, r7
 800a454:	6a21      	ldr	r1, [r4, #32]
 800a456:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a458:	4628      	mov	r0, r5
 800a45a:	47b0      	blx	r6
 800a45c:	2800      	cmp	r0, #0
 800a45e:	dc06      	bgt.n	800a46e <__sflush_r+0xfe>
 800a460:	89a3      	ldrh	r3, [r4, #12]
 800a462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a466:	81a3      	strh	r3, [r4, #12]
 800a468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a46c:	e78e      	b.n	800a38c <__sflush_r+0x1c>
 800a46e:	4407      	add	r7, r0
 800a470:	eba8 0800 	sub.w	r8, r8, r0
 800a474:	e7e9      	b.n	800a44a <__sflush_r+0xda>
 800a476:	bf00      	nop
 800a478:	20400001 	.word	0x20400001

0800a47c <_fflush_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	690b      	ldr	r3, [r1, #16]
 800a480:	4605      	mov	r5, r0
 800a482:	460c      	mov	r4, r1
 800a484:	b1db      	cbz	r3, 800a4be <_fflush_r+0x42>
 800a486:	b118      	cbz	r0, 800a490 <_fflush_r+0x14>
 800a488:	6983      	ldr	r3, [r0, #24]
 800a48a:	b90b      	cbnz	r3, 800a490 <_fflush_r+0x14>
 800a48c:	f7ff f93c 	bl	8009708 <__sinit>
 800a490:	4b0c      	ldr	r3, [pc, #48]	; (800a4c4 <_fflush_r+0x48>)
 800a492:	429c      	cmp	r4, r3
 800a494:	d109      	bne.n	800a4aa <_fflush_r+0x2e>
 800a496:	686c      	ldr	r4, [r5, #4]
 800a498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a49c:	b17b      	cbz	r3, 800a4be <_fflush_r+0x42>
 800a49e:	4621      	mov	r1, r4
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4a6:	f7ff bf63 	b.w	800a370 <__sflush_r>
 800a4aa:	4b07      	ldr	r3, [pc, #28]	; (800a4c8 <_fflush_r+0x4c>)
 800a4ac:	429c      	cmp	r4, r3
 800a4ae:	d101      	bne.n	800a4b4 <_fflush_r+0x38>
 800a4b0:	68ac      	ldr	r4, [r5, #8]
 800a4b2:	e7f1      	b.n	800a498 <_fflush_r+0x1c>
 800a4b4:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <_fflush_r+0x50>)
 800a4b6:	429c      	cmp	r4, r3
 800a4b8:	bf08      	it	eq
 800a4ba:	68ec      	ldreq	r4, [r5, #12]
 800a4bc:	e7ec      	b.n	800a498 <_fflush_r+0x1c>
 800a4be:	2000      	movs	r0, #0
 800a4c0:	bd38      	pop	{r3, r4, r5, pc}
 800a4c2:	bf00      	nop
 800a4c4:	0800a838 	.word	0x0800a838
 800a4c8:	0800a858 	.word	0x0800a858
 800a4cc:	0800a818 	.word	0x0800a818

0800a4d0 <_lseek_r>:
 800a4d0:	b538      	push	{r3, r4, r5, lr}
 800a4d2:	4c07      	ldr	r4, [pc, #28]	; (800a4f0 <_lseek_r+0x20>)
 800a4d4:	4605      	mov	r5, r0
 800a4d6:	4608      	mov	r0, r1
 800a4d8:	4611      	mov	r1, r2
 800a4da:	2200      	movs	r2, #0
 800a4dc:	6022      	str	r2, [r4, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f7f6 feaa 	bl	8001238 <_lseek>
 800a4e4:	1c43      	adds	r3, r0, #1
 800a4e6:	d102      	bne.n	800a4ee <_lseek_r+0x1e>
 800a4e8:	6823      	ldr	r3, [r4, #0]
 800a4ea:	b103      	cbz	r3, 800a4ee <_lseek_r+0x1e>
 800a4ec:	602b      	str	r3, [r5, #0]
 800a4ee:	bd38      	pop	{r3, r4, r5, pc}
 800a4f0:	2000076c 	.word	0x2000076c

0800a4f4 <__swhatbuf_r>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	460e      	mov	r6, r1
 800a4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4fc:	2900      	cmp	r1, #0
 800a4fe:	b096      	sub	sp, #88	; 0x58
 800a500:	4614      	mov	r4, r2
 800a502:	461d      	mov	r5, r3
 800a504:	da07      	bge.n	800a516 <__swhatbuf_r+0x22>
 800a506:	2300      	movs	r3, #0
 800a508:	602b      	str	r3, [r5, #0]
 800a50a:	89b3      	ldrh	r3, [r6, #12]
 800a50c:	061a      	lsls	r2, r3, #24
 800a50e:	d410      	bmi.n	800a532 <__swhatbuf_r+0x3e>
 800a510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a514:	e00e      	b.n	800a534 <__swhatbuf_r+0x40>
 800a516:	466a      	mov	r2, sp
 800a518:	f000 f8fc 	bl	800a714 <_fstat_r>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	dbf2      	blt.n	800a506 <__swhatbuf_r+0x12>
 800a520:	9a01      	ldr	r2, [sp, #4]
 800a522:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a526:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a52a:	425a      	negs	r2, r3
 800a52c:	415a      	adcs	r2, r3
 800a52e:	602a      	str	r2, [r5, #0]
 800a530:	e7ee      	b.n	800a510 <__swhatbuf_r+0x1c>
 800a532:	2340      	movs	r3, #64	; 0x40
 800a534:	2000      	movs	r0, #0
 800a536:	6023      	str	r3, [r4, #0]
 800a538:	b016      	add	sp, #88	; 0x58
 800a53a:	bd70      	pop	{r4, r5, r6, pc}

0800a53c <__smakebuf_r>:
 800a53c:	898b      	ldrh	r3, [r1, #12]
 800a53e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a540:	079d      	lsls	r5, r3, #30
 800a542:	4606      	mov	r6, r0
 800a544:	460c      	mov	r4, r1
 800a546:	d507      	bpl.n	800a558 <__smakebuf_r+0x1c>
 800a548:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	6123      	str	r3, [r4, #16]
 800a550:	2301      	movs	r3, #1
 800a552:	6163      	str	r3, [r4, #20]
 800a554:	b002      	add	sp, #8
 800a556:	bd70      	pop	{r4, r5, r6, pc}
 800a558:	ab01      	add	r3, sp, #4
 800a55a:	466a      	mov	r2, sp
 800a55c:	f7ff ffca 	bl	800a4f4 <__swhatbuf_r>
 800a560:	9900      	ldr	r1, [sp, #0]
 800a562:	4605      	mov	r5, r0
 800a564:	4630      	mov	r0, r6
 800a566:	f7ff f959 	bl	800981c <_malloc_r>
 800a56a:	b948      	cbnz	r0, 800a580 <__smakebuf_r+0x44>
 800a56c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a570:	059a      	lsls	r2, r3, #22
 800a572:	d4ef      	bmi.n	800a554 <__smakebuf_r+0x18>
 800a574:	f023 0303 	bic.w	r3, r3, #3
 800a578:	f043 0302 	orr.w	r3, r3, #2
 800a57c:	81a3      	strh	r3, [r4, #12]
 800a57e:	e7e3      	b.n	800a548 <__smakebuf_r+0xc>
 800a580:	4b0d      	ldr	r3, [pc, #52]	; (800a5b8 <__smakebuf_r+0x7c>)
 800a582:	62b3      	str	r3, [r6, #40]	; 0x28
 800a584:	89a3      	ldrh	r3, [r4, #12]
 800a586:	6020      	str	r0, [r4, #0]
 800a588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a58c:	81a3      	strh	r3, [r4, #12]
 800a58e:	9b00      	ldr	r3, [sp, #0]
 800a590:	6163      	str	r3, [r4, #20]
 800a592:	9b01      	ldr	r3, [sp, #4]
 800a594:	6120      	str	r0, [r4, #16]
 800a596:	b15b      	cbz	r3, 800a5b0 <__smakebuf_r+0x74>
 800a598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a59c:	4630      	mov	r0, r6
 800a59e:	f000 f8cb 	bl	800a738 <_isatty_r>
 800a5a2:	b128      	cbz	r0, 800a5b0 <__smakebuf_r+0x74>
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	f023 0303 	bic.w	r3, r3, #3
 800a5aa:	f043 0301 	orr.w	r3, r3, #1
 800a5ae:	81a3      	strh	r3, [r4, #12]
 800a5b0:	89a3      	ldrh	r3, [r4, #12]
 800a5b2:	431d      	orrs	r5, r3
 800a5b4:	81a5      	strh	r5, [r4, #12]
 800a5b6:	e7cd      	b.n	800a554 <__smakebuf_r+0x18>
 800a5b8:	080096d1 	.word	0x080096d1

0800a5bc <memcpy>:
 800a5bc:	b510      	push	{r4, lr}
 800a5be:	1e43      	subs	r3, r0, #1
 800a5c0:	440a      	add	r2, r1
 800a5c2:	4291      	cmp	r1, r2
 800a5c4:	d100      	bne.n	800a5c8 <memcpy+0xc>
 800a5c6:	bd10      	pop	{r4, pc}
 800a5c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5d0:	e7f7      	b.n	800a5c2 <memcpy+0x6>

0800a5d2 <memmove>:
 800a5d2:	4288      	cmp	r0, r1
 800a5d4:	b510      	push	{r4, lr}
 800a5d6:	eb01 0302 	add.w	r3, r1, r2
 800a5da:	d807      	bhi.n	800a5ec <memmove+0x1a>
 800a5dc:	1e42      	subs	r2, r0, #1
 800a5de:	4299      	cmp	r1, r3
 800a5e0:	d00a      	beq.n	800a5f8 <memmove+0x26>
 800a5e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5e6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a5ea:	e7f8      	b.n	800a5de <memmove+0xc>
 800a5ec:	4283      	cmp	r3, r0
 800a5ee:	d9f5      	bls.n	800a5dc <memmove+0xa>
 800a5f0:	1881      	adds	r1, r0, r2
 800a5f2:	1ad2      	subs	r2, r2, r3
 800a5f4:	42d3      	cmn	r3, r2
 800a5f6:	d100      	bne.n	800a5fa <memmove+0x28>
 800a5f8:	bd10      	pop	{r4, pc}
 800a5fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a602:	e7f7      	b.n	800a5f4 <memmove+0x22>

0800a604 <__malloc_lock>:
 800a604:	4770      	bx	lr

0800a606 <__malloc_unlock>:
 800a606:	4770      	bx	lr

0800a608 <_free_r>:
 800a608:	b538      	push	{r3, r4, r5, lr}
 800a60a:	4605      	mov	r5, r0
 800a60c:	2900      	cmp	r1, #0
 800a60e:	d045      	beq.n	800a69c <_free_r+0x94>
 800a610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a614:	1f0c      	subs	r4, r1, #4
 800a616:	2b00      	cmp	r3, #0
 800a618:	bfb8      	it	lt
 800a61a:	18e4      	addlt	r4, r4, r3
 800a61c:	f7ff fff2 	bl	800a604 <__malloc_lock>
 800a620:	4a1f      	ldr	r2, [pc, #124]	; (800a6a0 <_free_r+0x98>)
 800a622:	6813      	ldr	r3, [r2, #0]
 800a624:	4610      	mov	r0, r2
 800a626:	b933      	cbnz	r3, 800a636 <_free_r+0x2e>
 800a628:	6063      	str	r3, [r4, #4]
 800a62a:	6014      	str	r4, [r2, #0]
 800a62c:	4628      	mov	r0, r5
 800a62e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a632:	f7ff bfe8 	b.w	800a606 <__malloc_unlock>
 800a636:	42a3      	cmp	r3, r4
 800a638:	d90c      	bls.n	800a654 <_free_r+0x4c>
 800a63a:	6821      	ldr	r1, [r4, #0]
 800a63c:	1862      	adds	r2, r4, r1
 800a63e:	4293      	cmp	r3, r2
 800a640:	bf04      	itt	eq
 800a642:	681a      	ldreq	r2, [r3, #0]
 800a644:	685b      	ldreq	r3, [r3, #4]
 800a646:	6063      	str	r3, [r4, #4]
 800a648:	bf04      	itt	eq
 800a64a:	1852      	addeq	r2, r2, r1
 800a64c:	6022      	streq	r2, [r4, #0]
 800a64e:	6004      	str	r4, [r0, #0]
 800a650:	e7ec      	b.n	800a62c <_free_r+0x24>
 800a652:	4613      	mov	r3, r2
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	b10a      	cbz	r2, 800a65c <_free_r+0x54>
 800a658:	42a2      	cmp	r2, r4
 800a65a:	d9fa      	bls.n	800a652 <_free_r+0x4a>
 800a65c:	6819      	ldr	r1, [r3, #0]
 800a65e:	1858      	adds	r0, r3, r1
 800a660:	42a0      	cmp	r0, r4
 800a662:	d10b      	bne.n	800a67c <_free_r+0x74>
 800a664:	6820      	ldr	r0, [r4, #0]
 800a666:	4401      	add	r1, r0
 800a668:	1858      	adds	r0, r3, r1
 800a66a:	4282      	cmp	r2, r0
 800a66c:	6019      	str	r1, [r3, #0]
 800a66e:	d1dd      	bne.n	800a62c <_free_r+0x24>
 800a670:	6810      	ldr	r0, [r2, #0]
 800a672:	6852      	ldr	r2, [r2, #4]
 800a674:	605a      	str	r2, [r3, #4]
 800a676:	4401      	add	r1, r0
 800a678:	6019      	str	r1, [r3, #0]
 800a67a:	e7d7      	b.n	800a62c <_free_r+0x24>
 800a67c:	d902      	bls.n	800a684 <_free_r+0x7c>
 800a67e:	230c      	movs	r3, #12
 800a680:	602b      	str	r3, [r5, #0]
 800a682:	e7d3      	b.n	800a62c <_free_r+0x24>
 800a684:	6820      	ldr	r0, [r4, #0]
 800a686:	1821      	adds	r1, r4, r0
 800a688:	428a      	cmp	r2, r1
 800a68a:	bf04      	itt	eq
 800a68c:	6811      	ldreq	r1, [r2, #0]
 800a68e:	6852      	ldreq	r2, [r2, #4]
 800a690:	6062      	str	r2, [r4, #4]
 800a692:	bf04      	itt	eq
 800a694:	1809      	addeq	r1, r1, r0
 800a696:	6021      	streq	r1, [r4, #0]
 800a698:	605c      	str	r4, [r3, #4]
 800a69a:	e7c7      	b.n	800a62c <_free_r+0x24>
 800a69c:	bd38      	pop	{r3, r4, r5, pc}
 800a69e:	bf00      	nop
 800a6a0:	20000094 	.word	0x20000094

0800a6a4 <_realloc_r>:
 800a6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a6:	4607      	mov	r7, r0
 800a6a8:	4614      	mov	r4, r2
 800a6aa:	460e      	mov	r6, r1
 800a6ac:	b921      	cbnz	r1, 800a6b8 <_realloc_r+0x14>
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a6b4:	f7ff b8b2 	b.w	800981c <_malloc_r>
 800a6b8:	b922      	cbnz	r2, 800a6c4 <_realloc_r+0x20>
 800a6ba:	f7ff ffa5 	bl	800a608 <_free_r>
 800a6be:	4625      	mov	r5, r4
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6c4:	f000 f848 	bl	800a758 <_malloc_usable_size_r>
 800a6c8:	42a0      	cmp	r0, r4
 800a6ca:	d20f      	bcs.n	800a6ec <_realloc_r+0x48>
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	4638      	mov	r0, r7
 800a6d0:	f7ff f8a4 	bl	800981c <_malloc_r>
 800a6d4:	4605      	mov	r5, r0
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d0f2      	beq.n	800a6c0 <_realloc_r+0x1c>
 800a6da:	4631      	mov	r1, r6
 800a6dc:	4622      	mov	r2, r4
 800a6de:	f7ff ff6d 	bl	800a5bc <memcpy>
 800a6e2:	4631      	mov	r1, r6
 800a6e4:	4638      	mov	r0, r7
 800a6e6:	f7ff ff8f 	bl	800a608 <_free_r>
 800a6ea:	e7e9      	b.n	800a6c0 <_realloc_r+0x1c>
 800a6ec:	4635      	mov	r5, r6
 800a6ee:	e7e7      	b.n	800a6c0 <_realloc_r+0x1c>

0800a6f0 <_read_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	4c07      	ldr	r4, [pc, #28]	; (800a710 <_read_r+0x20>)
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	4608      	mov	r0, r1
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	6022      	str	r2, [r4, #0]
 800a6fe:	461a      	mov	r2, r3
 800a700:	f7f6 fd3a 	bl	8001178 <_read>
 800a704:	1c43      	adds	r3, r0, #1
 800a706:	d102      	bne.n	800a70e <_read_r+0x1e>
 800a708:	6823      	ldr	r3, [r4, #0]
 800a70a:	b103      	cbz	r3, 800a70e <_read_r+0x1e>
 800a70c:	602b      	str	r3, [r5, #0]
 800a70e:	bd38      	pop	{r3, r4, r5, pc}
 800a710:	2000076c 	.word	0x2000076c

0800a714 <_fstat_r>:
 800a714:	b538      	push	{r3, r4, r5, lr}
 800a716:	4c07      	ldr	r4, [pc, #28]	; (800a734 <_fstat_r+0x20>)
 800a718:	2300      	movs	r3, #0
 800a71a:	4605      	mov	r5, r0
 800a71c:	4608      	mov	r0, r1
 800a71e:	4611      	mov	r1, r2
 800a720:	6023      	str	r3, [r4, #0]
 800a722:	f7f6 fd6e 	bl	8001202 <_fstat>
 800a726:	1c43      	adds	r3, r0, #1
 800a728:	d102      	bne.n	800a730 <_fstat_r+0x1c>
 800a72a:	6823      	ldr	r3, [r4, #0]
 800a72c:	b103      	cbz	r3, 800a730 <_fstat_r+0x1c>
 800a72e:	602b      	str	r3, [r5, #0]
 800a730:	bd38      	pop	{r3, r4, r5, pc}
 800a732:	bf00      	nop
 800a734:	2000076c 	.word	0x2000076c

0800a738 <_isatty_r>:
 800a738:	b538      	push	{r3, r4, r5, lr}
 800a73a:	4c06      	ldr	r4, [pc, #24]	; (800a754 <_isatty_r+0x1c>)
 800a73c:	2300      	movs	r3, #0
 800a73e:	4605      	mov	r5, r0
 800a740:	4608      	mov	r0, r1
 800a742:	6023      	str	r3, [r4, #0]
 800a744:	f7f6 fd6d 	bl	8001222 <_isatty>
 800a748:	1c43      	adds	r3, r0, #1
 800a74a:	d102      	bne.n	800a752 <_isatty_r+0x1a>
 800a74c:	6823      	ldr	r3, [r4, #0]
 800a74e:	b103      	cbz	r3, 800a752 <_isatty_r+0x1a>
 800a750:	602b      	str	r3, [r5, #0]
 800a752:	bd38      	pop	{r3, r4, r5, pc}
 800a754:	2000076c 	.word	0x2000076c

0800a758 <_malloc_usable_size_r>:
 800a758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a75c:	1f18      	subs	r0, r3, #4
 800a75e:	2b00      	cmp	r3, #0
 800a760:	bfbc      	itt	lt
 800a762:	580b      	ldrlt	r3, [r1, r0]
 800a764:	18c0      	addlt	r0, r0, r3
 800a766:	4770      	bx	lr

0800a768 <_init>:
 800a768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76a:	bf00      	nop
 800a76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a76e:	bc08      	pop	{r3}
 800a770:	469e      	mov	lr, r3
 800a772:	4770      	bx	lr

0800a774 <_fini>:
 800a774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a776:	bf00      	nop
 800a778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a77a:	bc08      	pop	{r3}
 800a77c:	469e      	mov	lr, r3
 800a77e:	4770      	bx	lr
